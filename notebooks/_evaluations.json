{"context_similarity": [{"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.8260403740282383", "score": 0.8260403740282383, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9321817112616437", "score": 0.9321817112616437, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.8260403740282383", "score": 0.8260403740282383, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.8906077632907692", "score": 0.8906077632907692, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9485145888694893", "score": 0.9485145888694893, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9593044035118745", "score": 0.9593044035118745, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9339829158619298", "score": 0.9339829158619298, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9294405088424207", "score": 0.9294405088424207, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.938951682859393", "score": 0.938951682859393, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.938951682859393", "score": 0.938951682859393, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9412575468126775", "score": 0.9412575468126775, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9422089395425075", "score": 0.9422089395425075, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.940351095044568", "score": 0.940351095044568, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9271001167429987", "score": 0.9271001167429987, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9397386559824129", "score": 0.9397386559824129, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9369809502956237", "score": 0.9369809502956237, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.914755465416333", "score": 0.914755465416333, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9116155402182753", "score": 0.9116155402182753, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.8850332916851333", "score": 0.8850332916851333, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9408198092171202", "score": 0.9408198092171202, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.8471958257797951", "score": 0.8471958257797951, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.8775667775556615", "score": 0.8775667775556615, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.8471958257797951", "score": 0.8471958257797951, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.8849693960300458", "score": 0.8849693960300458, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9469291866113024", "score": 0.9469291866113024, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9642603308402965", "score": 0.9642603308402965, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.957659955332777", "score": 0.957659955332777, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.961166840325381", "score": 0.961166840325381, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9384846765538617", "score": 0.9384846765538617, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9578178083136277", "score": 0.9578178083136277, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9220405407426228", "score": 0.9220405407426228, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.950293161695869", "score": 0.950293161695869, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9733767973112543", "score": 0.9733767973112543, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9733767973112543", "score": 0.9733767973112543, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9343270307473331", "score": 0.9343270307473331, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.955478548052829", "score": 0.955478548052829, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9220115058745766", "score": 0.9220115058745766, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9026421186867707", "score": 0.9026421186867707, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.8678311786457447", "score": 0.8678311786457447, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.8678311786457447", "score": 0.8678311786457447, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9160668937142027", "score": 0.9160668937142027, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.8954708981640229", "score": 0.8954708981640229, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9065903445090531", "score": 0.9065903445090531, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9065903445090531", "score": 0.9065903445090531, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9257421853041372", "score": 0.9257421853041372, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9156352968334107", "score": 0.9156352968334107, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9377040192652125", "score": 0.9377040192652125, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9371849645833247", "score": 0.9371849645833247, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": false, "feedback": "Similarity score: 0.75285469926588", "score": 0.75285469926588, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.8152047136408299", "score": 0.8152047136408299, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": false, "feedback": "Similarity score: 0.775647901473204", "score": 0.775647901473204, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.8353941539146615", "score": 0.8353941539146615, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": false, "feedback": "Similarity score: 0.7855047175265196", "score": 0.7855047175265196, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": false, "feedback": "Similarity score: 0.7855047175265196", "score": 0.7855047175265196, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": false, "feedback": "Similarity score: 0.7772446156542454", "score": 0.7772446156542454, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": false, "feedback": "Similarity score: 0.7772446156542454", "score": 0.7772446156542454, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9496524237850089", "score": 0.9496524237850089, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9481247383548999", "score": 0.9481247383548999, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9513541658875967", "score": 0.9513541658875967, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9509078961239235", "score": 0.9509078961239235, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9695332235044236", "score": 0.9695332235044236, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9724083254708928", "score": 0.9724083254708928, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.8306329824716435", "score": 0.8306329824716435, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9421834170038892", "score": 0.9421834170038892, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.8307041859906097", "score": 0.8307041859906097, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": null, "contexts": null, "response": null, "passing": true, "feedback": "Similarity score: 0.9422440664543777", "score": 0.9422440664543777, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}], "correctness": [{"query": "**Question:**", "contexts": null, "response": "The analysis of the Lorenz curves indicates a highly uneven distribution of contributions among programmers. A small percentage of programmers are responsible for the majority of the value on both the supply and demand sides. Specifically, the last five percent of programmers generate over 93% of the supply side value and over 96% of the demand side value. This suggests that a few programmers are significantly contributing to a large number of repositories, which in turn are heavily relied upon by firms for creating their own code.", "passing": false, "feedback": "The generated answer is not relevant to the user query, which appears to be incomplete. The generated answer discusses Lorenz curves and programmer contributions, which do not relate to the user's incomplete question.", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Based on the working paper \"The Value of Open Source Software\" by Manuel Hoffmann, Frank Nagle, and Yanuo Zhou, what is the estimated demand-side value of widely-used open source software (OSS), and how does it compare to the supply-side value?", "contexts": null, "response": "The estimated demand-side value of widely-used open source software (OSS) is $8.8 trillion. This value is significantly larger than the supply-side value, which is estimated at $4.15 billion.", "passing": true, "feedback": "The generated answer accurately provides the estimated demand-side value of widely-used open source software as $8.8 trillion and correctly compares it to the supply-side value of $4.15 billion, aligning with the reference answer.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:**", "contexts": null, "response": "The analysis of Lorenz curves in the context of programmer contributions to repositories reveals a highly uneven distribution of value. A small fraction of programmers, specifically the last five percent, are responsible for generating the majority of both supply and demand side values. This indicates that a limited number of programmers are significantly contributing to the creation of open-source software code, which is extensively utilized by firms. Additionally, these top contributors are involved in a substantial number of repositories, suggesting that their impact is not limited to a few high-value projects but spans across numerous repositories.", "passing": false, "feedback": "The generated answer is not relevant to the user query, which is incomplete and does not provide enough context for a specific response. The generated answer discusses Lorenz curves and programmer contributions, which do not relate to the user's query.", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "The estimated demand-side value of widely-used open source software (OSS) is $8.8 trillion, which is significantly larger than the supply-side value, estimated at $4.15 billion. This indicates that firms would need to spend 3.5 times more on software than they currently do if OSS did not exist.", "contexts": null, "response": "The estimated demand-side value of widely-used open source software (OSS) is indeed $8.8 trillion, which is significantly larger than the supply-side value of $4.15 billion. This suggests that if OSS did not exist, firms would need to spend approximately 3.5 times more on software than they currently do, highlighting the substantial cost savings and value that OSS provides to businesses.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately reflects the information provided in the user query and adds a slight elaboration on the value OSS provides, which enhances the understanding without introducing any errors.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the paper aim to address the challenge of measuring the value of open source software (OSS), and why is this measurement important?", "contexts": null, "response": "The paper aims to address the challenge of measuring the value of open source software (OSS) by estimating both the supply-side and demand-side values. It uses a labor market approach to calculate the labor replacement cost of recreating OSS packages, applying the Constructive Cost Model II (COCOMO II) to estimate the person-hours required to write the code from scratch. This supply-side value is then scaled by the number of times firms use each package to obtain a demand-side value. The measurement is important because OSS plays a critical role in the economy, serving as a modern example of 'the commons.' Understanding its value is crucial to ensuring its sustainability and avoiding the 'tragedy of the commons,' where shared resources are overused but underinvested in. Accurate measurement can inform better support and investment in OSS, which is vital for the health of the digital economy and the broader economy built upon it.", "passing": true, "feedback": "The generated answer is relevant and mostly correct, providing a detailed explanation of how the paper addresses the challenge of measuring the value of OSS. It introduces the labor market approach and the use of COCOMO II, which are valid methods for estimating the value. The importance of the measurement is also well explained, aligning with the reference answer. However, it lacks the specific mention of estimating both price and quantity, which is a key point in the reference answer.", "score": 4.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The paper aims to address the challenge of measuring the value of open source software (OSS) by providing estimates for both the price (p) and the quantity (q) of OSS using newly collected data from multiple sources. Traditionally, measuring the value of a good or service involves multiplying the price by the quantity sold. However, in the case of OSS, the price is generally zero since the source code is publicly available, and the quantity is unknown due to the lack of restrictions on how the code may be copied and reused. The measurement of OSS's value is important because OSS plays a critical role in the economy and represents a modern example of 'the commons,' which is at risk of the 'tragedy of the commons.' Understanding its value can help in managing and preserving this shared resource effectively.", "contexts": null, "response": "The paper seeks to measure the value of open source software (OSS) by estimating both the price and quantity of OSS using newly collected data. This is challenging because OSS is typically free, making its price zero, and its usage is difficult to track due to the lack of restrictions on copying and reuse. Understanding the value of OSS is crucial as it plays a vital role in the economy and exemplifies the concept of 'the commons,' which faces the risk of being overused and underinvested in. Accurately measuring its value can aid in better management and preservation of this important shared resource.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately captures the main points of the user query and the reference answer, including the challenges of measuring the value of OSS, the importance of understanding its value, and the concept of 'the commons.' The language is clear and concise, and there are no factual inaccuracies.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the concept of the \"tragedy of the commons\" relate to the challenges faced in measuring the value of open-source software (OSS), and what are the implications for the digital economy?", "contexts": null, "response": "The concept of the \"tragedy of the commons\" relates to the challenges in measuring the value of open-source software (OSS) by highlighting the risk that shared resources, like OSS, may be overused and underinvested in. This occurs because OSS is freely available and widely used, yet its value is difficult to quantify due to the lack of traditional pricing and usage data. The implications for the digital economy are significant, as OSS is a critical component of modern digital infrastructure. Without proper measurement and investment, the sustainability of OSS could be threatened, potentially impacting the broader economy that relies on it. Understanding and addressing these challenges is crucial to ensure the continued health and growth of the digital economy.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately explains the relationship between the \"tragedy of the commons\" and the challenges in measuring the value of open-source software (OSS). It also discusses the implications for the digital economy, emphasizing the importance of proper measurement and investment to ensure sustainability. The answer is concise and captures the essential points made in the reference answer.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The \"tragedy of the commons\" refers to the overuse and underinvestment in shared resources, as individuals prioritize their own benefits over the collective good. This concept is applicable to open-source software (OSS) because, like shared grazing lands, OSS is a communal resource that is critical to the economy. However, its value is difficult to measure, which can lead to overuse and underinvestment. If the value of OSS is not accurately measured and maintained, it risks crumbling under its own success, similar to the tragedy of the commons. This has significant implications for the digital economy, as OSS is a foundational element that supports various economic activities. Therefore, accurately measuring the value of OSS is crucial to ensure its sustainability and the health of the broader economy.", "contexts": null, "response": "The \"tragedy of the commons\" describes a situation where shared resources are overused and underinvested in because individuals focus on their own benefits rather than the collective good. This concept is relevant to open-source software (OSS) because, like shared resources, OSS is a communal asset vital to the economy. Its value is challenging to measure, which can lead to overuse and insufficient investment. If OSS's value is not properly assessed and maintained, it risks deteriorating under its own success, akin to the tragedy of the commons. This poses significant challenges for the digital economy, as OSS is a crucial foundation for various economic activities. Therefore, accurately measuring OSS's value is essential to ensure its sustainability and the overall health of the economy.", "passing": true, "feedback": "The generated answer is highly relevant and correct, closely mirroring the reference answer in content and meaning. It accurately explains the concept of the \"tragedy of the commons\" and its application to open-source software, maintaining the same key points and implications for the digital economy.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How do the Census II and BuiltWith datasets complement each other in measuring the value of Open Source Software (OSS) usage, and why is this important for reducing measurement error?", "contexts": null, "response": "The Census II and BuiltWith datasets complement each other by capturing different dimensions of Open Source Software (OSS) usage. The Census II dataset is inward-facing, focusing on OSS code used within products that firms create, while the BuiltWith dataset is outward-facing, identifying OSS code that consumers interact with through firm websites. This dual approach is important for reducing measurement error because it minimizes the risk of double-counting and ensures a more comprehensive understanding of OSS usage. By covering both internal and external applications of OSS, the combined datasets provide a more accurate estimate of the value of OSS, capturing its impact on both the supply and demand sides of the economy.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately describes how the Census II and BuiltWith datasets complement each other by capturing different dimensions of OSS usage, similar to the reference answer. It also explains the importance of this approach in reducing measurement error and provides a comprehensive understanding of OSS usage, covering both internal and external applications. The explanation is clear and aligns well with the reference answer.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The Census II and BuiltWith datasets complement each other by focusing on different aspects of OSS usage. The Census II dataset aggregates data from software composition analysis (SCA) firms to capture OSS that is built into the software a company sells, while the BuiltWith dataset identifies OSS libraries used in a company's website technology. This complementary approach is important because it reduces the chances of double-counting OSS usage across datasets, thereby minimizing measurement error. By focusing on widely deployed and practically used OSS, rather than all available OSS projects, the study enhances the accuracy of measuring OSS value, avoiding overestimation that could occur if unused projects were valued equally with widely used ones.", "contexts": null, "response": "The Census II and BuiltWith datasets complement each other by focusing on different dimensions of OSS usage. The Census II dataset captures OSS integrated into products that companies create, while the BuiltWith dataset identifies OSS libraries used in company websites. This approach minimizes the risk of double-counting OSS usage, thereby reducing measurement error. By concentrating on widely used OSS, the study provides a more accurate estimation of OSS value, avoiding overestimation that could result from including less utilized projects.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately describes how the Census II and BuiltWith datasets complement each other, focusing on different aspects of OSS usage. It also correctly explains the importance of this complementary approach in reducing measurement error and enhancing the accuracy of measuring OSS value. The answer is concise and captures the essence of the reference answer without any mistakes.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the study contribute to the understanding of the value of open-source software (OSS) in the context of the 'productivity paradox' and what implications does it have for firms and policymakers?", "contexts": null, "response": "The study contributes to understanding the value of open-source software (OSS) in the context of the 'productivity paradox' by highlighting the significant cost savings and productivity enhancements that OSS provides at a societal level. It demonstrates that OSS contributes massively to the economy by reducing the need for firms to recreate software from scratch, thus enhancing productivity despite the paradox where IT investments sometimes show limited impact on productivity statistics. For firms, the study underscores the importance of OSS in their production processes and suggests that firms should not only use OSS but also contribute to its maintenance to ensure the health of the OSS ecosystem. For policymakers, the study emphasizes the growing importance of OSS to the economy and suggests that there should be more societal support for the creation and maintenance of OSS, beyond just securing the existing ecosystem. This support is crucial given that a small number of contributors are responsible for a large portion of the value created by OSS.", "passing": true, "feedback": "The generated answer is relevant and mostly correct, capturing the key points about the value of OSS in the context of the 'productivity paradox' and its implications for firms and policymakers. It highlights cost savings, productivity enhancements, and the importance of contributing to the OSS ecosystem. However, it lacks the specific mention of the dual approach (supply-side and demand-side) used in the study, which is a notable aspect of the reference answer.", "score": 4.5, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The study contributes to the understanding of the value of OSS in the context of the 'productivity paradox' by providing a comprehensive estimate of the value created by OSS, not only from the supply-side (cost to create) but also from the demand-side (usage by firms). This dual approach offers insights into the substantial cost-savings and productivity enhancements that OSS provides at a societal level, addressing the paradox where IT investments often show limited impact on productivity statistics. For firms, the study highlights the importance of OSS in production and encourages active contributions to OSS maintenance, emphasizing that such contributions are minimal compared to the costs firms would incur without OSS. For policymakers, the study underscores the growing economic importance of OSS and supports actions to bolster the OSS ecosystem, aligning with recent initiatives by entities like the European Commission and the U.S. government.", "contexts": null, "response": "The study contributes to the understanding of the value of OSS in the context of the 'productivity paradox' by offering a comprehensive estimate of OSS value from both the supply-side (cost to create) and the demand-side (usage by firms). This dual approach reveals significant cost-savings and productivity enhancements that OSS provides at a societal level, addressing the paradox where IT investments often show limited impact on productivity statistics. For firms, the study underscores the importance of OSS in production and encourages active contributions to OSS maintenance, noting that such contributions are minimal compared to the costs firms would face without OSS. For policymakers, the study highlights the growing economic importance of OSS and supports actions to strengthen the OSS ecosystem, aligning with recent initiatives by entities like the European Commission and the U.S. government.", "passing": true, "feedback": "The generated answer is highly relevant and correct, as it closely matches the reference answer in content and meaning. It accurately conveys the study's contributions to understanding the value of OSS in the context of the 'productivity paradox' and includes all key points regarding the supply-side and demand-side value, the importance for firms, and the implications for policymakers. The slight variations in wording do not affect the overall accuracy or relevance of the answer.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How do the two main data sources used in the study complement each other in estimating the value of open source software (OSS)?", "contexts": null, "response": "The two main data sources used in the study complement each other by focusing on different aspects of open source software (OSS) usage. The \"Census II of Free and Open Source Software - Application Libraries\" provides insights into OSS that is integrated into the software products a company sells, capturing internal usage. On the other hand, the BuiltWith dataset focuses on OSS used in a company's website, capturing outward-facing usage. By combining these datasets, the study reduces the chances of double-counting and provides a more comprehensive measurement of OSS usage, allowing for a more accurate estimation of its value.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately describes how the two data sources complement each other by focusing on different aspects of OSS usage, similar to the reference answer. It also mentions the reduction of double-counting and provides a comprehensive measurement of OSS usage, aligning well with the reference answer.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The study uses two complementary main data sources to estimate the value of OSS: the Census and BuiltWith. The Census is inward-facing and allows the identification of OSS code that goes into products firms create, capturing packaged software usage within firms. BuiltWith is outward-facing and identifies OSS code that consumers directly interact with through firm websites, capturing usage in websites that are consumer-facing. The overlap between the two datasets is minimal, with only 18 packages found in both, reducing concerns about double-counting. These datasets complement each other by capturing different dimensions of OSS usage, providing a comprehensive view of OSS's value in both internal firm operations and external consumer interactions.", "contexts": null, "response": "The study utilizes two main data sources to estimate the value of open source software (OSS): the Census and BuiltWith. The Census data is inward-facing, focusing on OSS code used within products created by firms, capturing internal software usage. BuiltWith data is outward-facing, identifying OSS code that consumers interact with on firm websites, capturing external consumer-facing usage. The overlap between these datasets is minimal, with only 18 packages appearing in both, which helps mitigate concerns about double-counting. Together, these datasets provide a comprehensive view of OSS's value in both internal firm operations and external consumer interactions.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately captures the key points from the reference answer, including the use of the Census and BuiltWith data sources, their respective focuses, the minimal overlap between the datasets, and the comprehensive view they provide of OSS's value. The language is clear and precise, maintaining the intended meaning of the reference answer.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: What was the primary purpose of the Census II of Free and Open Source Software conducted by the Linux Foundation and the Laboratory for Innovation Science at Harvard?", "contexts": null, "response": "The primary purpose of the Census II of Free and Open Source Software was to aggregate data from major software composition analysis firms to identify and observe the precise amount and type of internal OSS usage within firms. This was done to ensure compliance with OSS license agreements and to trace dependencies that reveal indirect OSS usage, providing a comprehensive view of OSS embedded in proprietary software.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately captures the primary purpose of the Census II of Free and Open Source Software, as described in the reference answer, including the aggregation of data from software composition analysis firms, ensuring compliance with OSS license agreements, and understanding internal and indirect OSS usage within proprietary software.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: The primary purpose of the Census II of Free and Open Source Software was to aggregate data from three major software composition analysis (SCA) firms to better understand the usage and dependencies of open source software (OSS) within proprietary software. This was done to ensure compliance with OSS license agreements and to provide a detailed understanding of the internal and indirect OSS usage by firms, particularly in the context of mergers and acquisitions.", "contexts": null, "response": "The primary purpose of the Census II of Free and Open Source Software was to aggregate data from major software composition analysis firms to understand the usage and dependencies of open source software within proprietary software. This effort aimed to ensure compliance with OSS license agreements and provide insights into the internal and indirect OSS usage by firms, especially in the context of mergers and acquisitions.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It conveys the same information as the reference answer with slight rephrasing but no loss of meaning or detail.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How did the researchers ensure the accuracy of the GitHub repository URLs matched to the OSS packages in the Census data?", "contexts": null, "response": "The researchers ensured the accuracy of the GitHub repository URLs matched to the OSS packages in the Census data by first attempting to obtain the URLs from libraries.io. For those URLs that did not match, they performed Google searches using the package name and \"GitHub Repository\" to find the best match. Additionally, they manually searched for URLs for the remaining unmatched packages. As a robustness check, they randomly selected 50 package-repository matches derived from the Google Search method and manually confirmed their accuracy.", "passing": true, "feedback": "The generated answer is relevant and mostly correct, capturing the main steps taken by the researchers to ensure accuracy, including using libraries.io, Google searches, and manual verification. However, it omits the \"Sanity Check\" step where they attempted to access all repository URLs to ensure they were working, which is a minor detail but part of the process.", "score": 4.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The researchers ensured the accuracy of the GitHub repository URLs matched to the OSS packages by performing several steps. Initially, they matched 1,657 packages to repositories using libraries.io. For unmatched packages, they used the Google API to search for the package name and 'GitHub Repository,' treating the first result as the best match, which added 174 more packages. They then manually searched for the remaining 169 packages. As a robustness check, they randomly selected 50 package-repository matches derived from the Google Search method and manually confirmed all matches to be correct, providing additional support for the automated matching method.", "contexts": null, "response": "The researchers ensured the accuracy of the GitHub repository URLs matched to the OSS packages through a multi-step process. Initially, they matched a significant number of packages using libraries.io. For those packages that remained unmatched, they employed the Google API to search for the package name along with 'GitHub Repository,' using the first result as the best match. This method added more packages to their list. For the remaining unmatched packages, they conducted manual searches. To verify the reliability of the Google Search method, they randomly selected a sample of package-repository matches and manually confirmed their accuracy, thereby supporting the effectiveness of the automated matching approach.", "passing": true, "feedback": "The generated answer is relevant and mostly correct, capturing the essence of the process described in the reference answer. However, it lacks specific details such as the exact numbers of packages matched at each step, which are present in the reference answer.", "score": 4.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How did the researchers ensure that their analysis of OSS usage was focused on the private sector, and what was the match rate achieved in this process?", "contexts": null, "response": "The researchers ensured their analysis of OSS usage was focused on the private sector by using outward-facing data from BuiltWith, which they matched to industry information from the Orbis and Compustat datasets. They achieved a match rate of 94.6% for BuiltWith websites with an industry through this process.", "passing": false, "feedback": "The generated answer is relevant to the user query as it addresses how the researchers focused on the private sector and mentions a match rate. However, it contains significant inaccuracies. The match rate of 94.6% is incorrect compared to the reference answer's 38.6%, and it does not mention the exclusion of non-commercial websites or the use of PitchBook. These discrepancies affect the correctness of the answer.", "score": 2.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The researchers ensured their analysis of OSS usage was focused on the private sector by matching the adopting domains of JavaScript-related OSS from BuiltWith with company websites recorded in Orbis, Compustat, and PitchBook, which are databases capturing registered businesses worldwide. This matching process resulted in a match rate of 38.6%, corresponding to around 3.4 million websites of distinct firms. This approach excluded OSS used by non-commercial websites, such as personal websites, from their analysis.", "contexts": null, "response": "The researchers ensured their analysis of OSS usage was focused on the private sector by matching the adopting domains of JavaScript-related OSS from BuiltWith with company websites recorded in Orbis, Compustat, and PitchBook, which are databases capturing registered businesses worldwide. This matching process resulted in a match rate of 38.6%, corresponding to around 3.4 million websites of distinct firms. This approach excluded OSS used by non-commercial websites, such as personal websites, from their analysis.", "passing": true, "feedback": "The generated answer is identical to the reference answer, making it fully relevant and correct in addressing the user query.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:**", "contexts": null, "response": "The analysis of the Lorenz curves in the figures indicates that a small percentage of programmers are responsible for generating the majority of value in both the supply and demand sides of open-source software (OSS) contributions. Specifically, the last five percent of programmers contribute over 93% of the supply side value and over 96% of the demand side value. This suggests a highly uneven distribution of contributions, with a few programmers significantly impacting a large number of repositories.", "passing": false, "feedback": "The generated answer is not relevant to the user query, which appears to be incomplete. The generated answer discusses Lorenz curves and open-source software contributions, which do not relate to the user's incomplete question.", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "What methodology is used to estimate the value of open-source software (OSS) in the context provided, and how does it account for the contributions of individual developers?", "contexts": null, "response": "The methodology used to estimate the value of open-source software (OSS) involves a labor market approach that considers both the supply and demand sides. The supply-side value is calculated by estimating the labor replacement cost of each OSS package using the Constructive Cost Model II (COCOMO II). This involves measuring the number of lines of code in each package and estimating the person-hours required to recreate it. The demand-side value is then determined by scaling the supply-side value based on the number of times firms use each package, while accounting for multiple usages within each firm.\n\nTo account for the contributions of individual developers, the methodology examines the inequality in the value creation process. It uses GHTorrent data to identify individual developer contributions in two ways: by their direct OSS value contributions and by the total number of repositories they contributed to. This helps to understand the concentration of contributions and whether a few developers are responsible for most of the value creation.", "passing": true, "feedback": "The generated answer accurately describes the methodology used to estimate the value of open-source software, including the labor market approach and the use of COCOMO II for calculating supply-side value. It also correctly explains how individual developer contributions are accounted for using GHTorrent data, aligning with the reference answer. The answer is relevant and fully correct.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:**", "contexts": null, "response": "The analysis of Lorenz curves in the study reveals a highly uneven distribution of contributions among programmers in the open-source software (OSS) community. A small fraction of programmers, specifically the last five percent, are responsible for generating the majority of both supply and demand side values. These programmers contribute significantly to a large number of repositories, indicating that their impact is not limited to a few high-value projects but spans across many. This suggests that a small group of contributors plays a crucial role in the OSS ecosystem, providing the bulk of the code that firms rely on for their own development efforts.", "passing": false, "feedback": "The generated answer is relevant to the user query as it discusses the distribution of contributions in the OSS community, which is a part of the methodology for estimating the value of OSS. However, it does not directly address the labor market approach or the calculation of labor replacement costs, which are key components of the reference answer. Additionally, the generated answer introduces the concept of Lorenz curves, which is not mentioned in the reference answer, and lacks details about the programming languages used in OSS. Therefore, while relevant, the generated answer is incomplete and partially correct.", "score": 3.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "The methodology used to estimate the value of OSS in the provided context is a labor market approach. This approach calculates the replacement value of an OSS package by determining how much it would cost to reproduce the package by hiring a programmer and paying them a competitive market wage. The supply-side value is estimated by counting the lines of code in each unique OSS package and summing these values to obtain the total value. Additionally, the methodology examines the inequality in the value creation process by identifying individual developer contributions through their OSS value contributions and the total number of repositories they contributed to. This helps to understand the concentration of contributions and whether many or few developers contribute to the total value measured.", "contexts": null, "response": "The methodology for estimating the value of OSS involves calculating the replacement cost of each package by determining the expense of hiring a programmer at a competitive market wage to reproduce the package. This is done by counting the lines of code in each unique OSS package and summing these values to obtain the total supply-side value. Additionally, the approach examines the inequality in value creation by analyzing individual developer contributions, both in terms of their OSS value contributions and the number of repositories they have contributed to. This analysis helps to understand the concentration of contributions and whether the total value is generated by many or few developers.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately describes the methodology used to estimate the value of OSS, including the calculation of replacement costs, the counting of lines of code for supply-side value, and the analysis of individual developer contributions. The explanation is clear and aligns well with the reference answer, covering all key aspects of the methodology.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the methodology described in the context account for the supply-side and demand-side values of Open Source Software (OSS), and what are the key assumptions made in this approach?", "contexts": null, "response": "The methodology for assessing the value of Open Source Software (OSS) involves both supply-side and demand-side evaluations. On the supply side, the approach calculates the labor replacement cost of each OSS package using the COCOMO II model to estimate the person-hours required to recreate the software from scratch. This involves measuring the lines of code and applying global wage data to estimate the labor costs. The demand-side value is determined by scaling the supply-side value based on the frequency of use by firms, while accounting for multiple usages within the same firm.\n\nKey assumptions in this approach include the idea that all OSS would need to be recreated by each firm using it if OSS did not exist, and that the concept of OSS would still exist, necessitating only a single rewrite of the code. Additionally, the methodology assumes that the value of OSS can be measured by the labor costs required to recreate it, and that the usage data accurately reflects the demand for OSS.", "passing": true, "feedback": "The generated answer is relevant and mostly correct, capturing the essence of the methodology by discussing both supply-side and demand-side evaluations using the COCOMO II model. It mentions key assumptions such as the need for recreation by firms and the use of global wage data. However, it lacks some specific details found in the reference answer, such as the absence of production and consumption externalities and the use of default parameter values in the COCOMO II model. These omissions prevent it from being a perfect score.", "score": 4.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The methodology described in the context calculates the supply-side value of OSS by estimating the cost to rewrite all widely-used OSS packages using the Constructive Cost Model II (COCOMO II). This model translates lines of code into dollar values, considering the effort in person-month units and using default parameter values for non-linear adjustment factors. The demand-side value is calculated by incorporating usage information for each package, ensuring that each firm replaces a package only once, treating it as a club good. Key assumptions include the exclusion of production and consumption externalities, meaning no spillover knowledge or public benefit is considered, and the assumption that programmers are identical replicas with no efficiency gains from learning. The global wage for programmers is calculated based on the base monthly salaries from the top 30 countries by GitHub developer counts, with bounds created using low-wage (India) and high-wage (USA) labor markets.", "contexts": null, "response": "The methodology estimates the supply-side value of open-source software (OSS) by calculating the cost to rewrite all widely-used OSS packages using the Constructive Cost Model II (COCOMO II). This model converts lines of code into dollar values, factoring in the effort required in person-month units and applying default parameter values for non-linear adjustment factors. The demand-side value is determined by incorporating usage information for each package, ensuring that each firm replaces a package only once, treating it as a club good. The approach excludes production and consumption externalities, meaning it does not account for spillover knowledge or public benefits, and assumes programmers are identical replicas without efficiency gains from learning. The global wage for programmers is derived from the base monthly salaries in the top 30 countries by GitHub developer counts, with bounds set using low-wage (India) and high-wage (USA) labor markets.", "passing": true, "feedback": "The generated answer is highly relevant and correct, closely matching the reference answer in content and detail. It accurately describes the methodology for calculating the supply-side and demand-side values of OSS, including the use of COCOMO II, the assumptions made, and the calculation of global wages for programmers.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the study measure the value contributions of developers to open-source software (OSS), and what graphical tool is used to understand the inequality in these contributions?", "contexts": null, "response": "The study measures the value contributions of developers to open-source software (OSS) by calculating each developer's proportional work contribution through their share of commits to a repository. This share is then multiplied by the repository's demand and supply values to derive the value-added contribution of the individual developer. The contributions are aggregated across all repositories for each developer. To understand the inequality in these contributions, the study uses Lorenz curves, which are a well-established tool for representing inequality, to graphically examine the dispersion of developer contribution values.", "passing": true, "feedback": "The generated answer accurately captures the method used to measure the value contributions of developers to OSS, including the calculation of proportional work contribution and the use of Lorenz curves to understand inequality. It is concise and correctly reflects the key points from the reference answer without any mistakes.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The study measures the value contributions of developers to OSS by calculating each developer's proportional work contribution at the repository level. This is done by determining their share of commits relative to the total number of commits for a repository. This share is then multiplied by the repository's demand and supply values to derive the value-added contribution of the individual contributor. These contributions are aggregated across all repositories for each developer. To understand the inequality in these contributions, the study uses Lorenz curves, which graphically represent the dispersion of developer contributions to OSS demand and supply. The Lorenz curves help illustrate the degree of inequality in value contributions among developers.", "contexts": null, "response": "The study measures the value contributions of developers to OSS by calculating each developer's proportional work contribution at the repository level. This is done by determining their share of commits relative to the total number of commits for a repository. This share is then multiplied by the repository's demand and supply values to derive the value-added contribution of the individual contributor. These contributions are aggregated across all repositories for each developer. To understand the inequality in these contributions, the study uses Lorenz curves, which graphically represent the dispersion of developer contributions to OSS demand and supply. The Lorenz curves help illustrate the degree of inequality in value contributions among developers.", "passing": true, "feedback": "The generated answer is identical to the reference answer, indicating that it is fully relevant and correct in addressing the user query.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the labor market approach using COCOMO II, what is the estimated investment required to reproduce all widely-used open-source software (OSS) using programmers from different income countries, and how does this compare to previous studies on the value of OSS?", "contexts": null, "response": "The labor market approach using COCOMO II estimates the investment required to reproduce all widely-used open-source software (OSS) by calculating the replacement value of each package. This involves determining the cost to hire programmers at competitive market wages to rewrite the software. The approach uses a global wage calculation, which includes base monthly salaries of software developers from the top 30 countries by GitHub developer counts. The study creates bounds by considering low-wage (India) and high-wage (USA) labor markets to understand how the value varies based on the pool of programmers. This method provides a comprehensive estimate of the investment needed, and it aligns with previous studies that have used similar methodologies to estimate the supply-side costs of OSS. However, the specific comparison to previous studies in terms of numerical values or differences in estimates is not detailed in the provided information.", "passing": false, "feedback": "The generated answer is relevant to the user query and correctly describes the labor market approach using COCOMO II to estimate the investment required to reproduce OSS. However, it lacks specific numerical estimates for the investment required, which are present in the reference answer. Additionally, it does not provide a detailed comparison to previous studies, which is a key part of the user query. These omissions result in a score of 3.0, as the answer is relevant but incomplete.", "score": 3.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The estimated investment required to reproduce all widely-used OSS using programmers at the average developer wage from India is $1.22 billion. If using the average developer wage from the United States, the investment would be $6.22 billion. Using a pool of programmers from across the world, weighed based on existing geographic contributions to OSS, the investment would be $4.15 billion. Previous studies, such as those by Robbins et al. (2021) and Blind et al. (2021), estimated the value of OSS created in the US to be $38 billion in 2019 and that created in the EU to be \u20ac1 billion in 2018. Wachs et al. (2022) indicated that roughly 50% of OSS contributions come from the US and EU combined, leading to a global value estimate of $78 billion.", "contexts": null, "response": "The estimated investment required to reproduce all widely-used OSS using programmers at the average developer wage from India is $1.22 billion. If using the average developer wage from the United States, the investment would be $6.22 billion. Using a pool of programmers from across the world, weighed based on existing geographic contributions to OSS, the investment would be $4.15 billion. Previous studies, such as those by Robbins et al. and Blind et al., estimated the value of OSS created in the US to be $38 billion in 2019 and that created in the EU to be \u20ac1 billion in 2018. Wachs et al. indicated that roughly 50% of OSS contributions come from the US and EU combined, leading to a global value estimate of $78 billion.", "passing": true, "feedback": "The generated answer is almost identical to the reference answer, with only minor differences such as the omission of the years and full author names in the citations. These differences do not significantly impact the relevance or correctness of the information provided.", "score": 4.5, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the context provided, how does the estimated supply-side value of widely used OSS compare to the total supply-side value of all OSS, and what does this indicate about the significance of widely used OSS?", "contexts": null, "response": "The estimated supply-side value of widely used open source software (OSS) ranges from $1.22 billion to $6.22 billion. This value is derived from considering the labor replacement cost of recreating widely used OSS packages. The focus on widely used OSS, rather than all OSS, indicates that these packages hold significant importance due to their extensive deployment and usage by firms. This approach helps to avoid overestimation by excluding OSS projects that are not practically used, thereby highlighting the critical role and substantial value of widely used OSS in the economy.", "passing": false, "feedback": "The generated answer provides a range for the supply-side value of widely used OSS, which is not consistent with the specific value given in the reference answer. It also does not compare this value to the total supply-side value of all OSS, which is a key part of the user query. While it discusses the significance of widely used OSS, it lacks the specific comparison and percentage that would make it fully relevant and correct.", "score": 2.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The estimated supply-side value of widely used OSS is $4.15 billion, which is approximately 5.5% of the total supply-side value of all OSS, estimated at $78 billion. This indicates that while widely used OSS represents a small fraction of the total supply-side value, it still holds significant importance due to its firm-oriented nature and widespread usage.", "contexts": null, "response": "The estimated supply-side value of widely used OSS is $4.15 billion, which is about 5.5% of the total supply-side value of all OSS, estimated at $78 billion. This suggests that while widely used OSS constitutes a small portion of the total supply-side value, it remains significant due to its firm-oriented nature and extensive usage.", "passing": true, "feedback": "The generated answer is nearly identical to the reference answer, with only minor wording differences that do not affect the meaning or correctness. It is relevant and fully correct.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the context provided, which programming language has the highest demand-side value according to the BuiltWith dataset, and how does this compare to its supply-side value?", "contexts": null, "response": "According to the BuiltWith dataset, JavaScript has the highest demand-side value. On the supply side, JavaScript also contributes significantly, being the primary driver of value in the BuiltWith sample. This indicates that JavaScript holds a strong position in both supply and demand within the BuiltWith dataset.", "passing": true, "feedback": "The generated answer correctly identifies JavaScript as having the highest demand-side value according to the BuiltWith dataset and notes its significant contribution on the supply side. However, it lacks the explicit mention that JavaScript also has the highest supply-side value, which is present in the reference answer. This slight omission makes the generated answer slightly less precise.", "score": 4.5, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** According to the BuiltWith dataset, JavaScript has the highest demand-side value. This is consistent with its supply-side value, where JavaScript also contributes the most value. This alignment serves as a sanity check since the BuiltWith sample focused on JavaScript packages to proxy for OSS. TypeScript follows JavaScript in both demand and supply-side values, reflecting its role as a superset of JavaScript.", "contexts": null, "response": "The statement is accurate. In the BuiltWith dataset, JavaScript indeed has the highest demand-side value, which aligns with its supply-side value where it also contributes the most. This consistency is expected since the BuiltWith sample focused on JavaScript packages. TypeScript follows JavaScript in both demand and supply-side values, reflecting its close relationship as a superset of JavaScript.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately reflects the information provided in the reference answer, maintaining the same key points and details.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the study's findings, which industry has the highest demand-side value for open source software (OSS), and how does this compare to other industries?", "contexts": null, "response": "The study does not specify which particular industry has the highest demand-side value for open source software (OSS). It highlights substantial heterogeneity in the value across different industries but does not provide a detailed comparison or ranking of industries in terms of their demand-side value for OSS.", "passing": false, "feedback": "The generated answer is incorrect and not relevant to the user query. It contradicts the reference answer by stating that the study does not specify which industry has the highest demand-side value for OSS, whereas the reference answer clearly identifies 'Professional, Scientific, and Technical Services' as the industry with the highest value.", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The industry with the highest demand-side value for open source software (OSS) is 'Professional, Scientific, and Technical Services,' with a usage value of around $43 billion. This is higher compared to 'Retail Trade' and 'Administrative and Support and Waste Management and Remediation Services,' which have usage values of $36 billion and $35 billion, respectively. In contrast, industries such as 'Mining, Quarrying, and Oil and Gas Extraction,' 'Utilities,' and 'Agriculture, Forestry, Fishing, and Hunting' constitute a much smaller portion of the demand-side value, reflecting the lesser role of software in these classical non-service sector industries.", "contexts": null, "response": "The industry with the highest demand-side value for open source software (OSS) is 'Professional, Scientific, and Technical Services,' with a usage value of around $43 billion. This is higher compared to 'Retail Trade' and 'Administrative and Support and Waste Management and Remediation Services,' which have usage values of $36 billion and $35 billion, respectively. In contrast, industries such as 'Mining, Quarrying, and Oil and Gas Extraction,' 'Utilities,' and 'Agriculture, Forestry, Fishing, and Hunting' constitute a much smaller portion of the demand-side value, reflecting the lesser role of software in these classical non-service sector industries.", "passing": true, "feedback": "The generated answer is identical to the reference answer and is fully relevant and correct in addressing the user query.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the demand-side value of Open Source Software (OSS) vary across different programming languages and industries, and what percentage of this value is generated by a small group of programmers?", "contexts": null, "response": "The demand-side value of Open Source Software (OSS) shows substantial variation across different programming languages and industries. The top six programming languages account for 84% of the demand-side value. Additionally, over 95% of the demand-side value is generated by only five percent of programmers, indicating that a small group of programmers contributes significantly to the overall value.", "passing": true, "feedback": "The generated answer is relevant and mostly correct, capturing the key points about the variation in demand-side value across programming languages and the concentration of value generation among a small group of programmers. However, it lacks the detail about the heterogeneity in value depending on whether the code is inward-facing or outward-facing, which is present in the reference answer.", "score": 4.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The demand-side value of OSS varies significantly across different programming languages and industries. The top six programming languages account for 84% of the demand-side value. Additionally, over 95% of the demand-side value is generated by only five percent of programmers. These high-value programmers contribute to a wide range of projects, not just a few widely used ones, indicating substantial heterogeneity in value contributions by programmers themselves.", "contexts": null, "response": "The demand-side value of open-source software (OSS) shows considerable variation across programming languages and industries. The top programming languages, such as Go, JavaScript, and TypeScript, contribute significantly to this value, with Go leading in usage-generated value. Industries like 'Professional, Scientific, and Technical Services' and 'Retail Trade' receive substantial benefits from OSS, while traditional non-service sectors like 'Mining' and 'Utilities' see less impact. This indicates that the value contributions from programmers are diverse, spanning numerous projects rather than being concentrated in a few popular ones.", "passing": false, "feedback": "The generated answer is relevant to the user query and provides additional context by naming specific programming languages and industries. However, it introduces new information not present in the reference answer, such as specific languages and industries, which may not be accurate or verified. This makes the answer relevant but potentially incorrect, warranting a score between 2 and 3.", "score": 3.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: Based on the context provided, what is the significance of open source software in the context of startup funding, as discussed in the work by Conti, Peukert, and Roche (2023)?", "contexts": null, "response": "Open source software plays a significant role in startup funding by potentially enhancing the attractiveness of startups to investors. The work by Conti, Peukert, and Roche (2023) suggests that open sourcing can be a strategic move for startups, as it may signal innovation and transparency, thereby increasing investor confidence and interest. This approach can help startups secure funding by demonstrating their commitment to open collaboration and technological advancement.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately captures the significance of open source software in the context of startup funding as discussed by Conti, Peukert, and Roche (2023). It highlights the role of open sourcing in attracting investors by signaling innovation and transparency, which aligns well with the reference answer.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: The work by Conti, Peukert, and Roche (2023) titled \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub\" suggests that open source software plays a significant role in startup funding. It implies that open sourcing can be a strategic move for startups to attract investors, as it may enhance transparency, collaboration, and innovation, thereby potentially increasing the startup's appeal to investors.", "contexts": null, "response": "The work by Conti, Peukert, and Roche suggests that open source software can be strategically beneficial for startups seeking funding. By open sourcing, startups may improve transparency and foster collaboration, which can enhance innovation and make them more attractive to investors.", "passing": true, "feedback": "The generated answer is relevant and correct. It captures the essence of the reference answer, mentioning the strategic benefits of open sourcing for startups in terms of transparency, collaboration, and innovation, which can attract investors. The slight rephrasing does not alter the meaning or accuracy.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: Based on the context provided, how does the article by Lifshitz-Assaf and Nagle (2021) in the Harvard Business Review Digital Articles contribute to the understanding of the role of open source in the digital economy?", "contexts": null, "response": "The article by Lifshitz-Assaf and Nagle (2021) in the Harvard Business Review Digital Articles emphasizes the critical role of open source software in the digital economy. It highlights the importance of measuring the value created by open source software to ensure its sustainability and continued contribution to economic growth. The article warns that without proper measurement and investment, open source software may face challenges similar to the \"tragedy of the commons,\" where resources are overused but underinvested in. This insight underscores the need for active participation and support from users and policymakers to maintain the health of the open source ecosystem, which is vital for the digital economy's future.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately captures the essence of the article by Lifshitz-Assaf and Nagle (2021) as described in the reference answer. It discusses the critical role of open source software in the digital economy, the importance of measuring its value, and the potential challenges it faces, such as the \"tragedy of the commons.\" Additionally, it highlights the need for active participation and support, aligning well with the reference answer's emphasis on safeguarding open source software.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: The article by Lifshitz-Assaf and Nagle (2021) in the Harvard Business Review Digital Articles discusses the critical role that open source software plays in the digital economy and offers insights on how to protect it. This contribution is significant as it highlights the foundational nature of open source in driving digital innovation and economic activities, while also addressing the challenges and strategies for safeguarding its sustainability and security.", "contexts": null, "response": "The article by Lifshitz-Assaf and Nagle (2021) in the Harvard Business Review Digital Articles emphasizes the essential role of open source software in the digital economy. It underscores the importance of open source as a key driver of digital innovation and economic activities. The article also discusses the challenges associated with maintaining the sustainability and security of open source software and offers strategies to protect this vital resource.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It captures the essence of the article by Lifshitz-Assaf and Nagle (2021) and accurately reflects the content and significance of the article as described in the reference answer. The wording is slightly different, but the meaning and key points are consistent with the reference.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the context provided, how has open source software been linked to firm productivity, and which study specifically addresses this relationship?", "contexts": null, "response": "The value of open source software (OSS) in relation to firm productivity is highlighted in the context. It is noted that OSS contributes significantly to the modern economy by providing a cost-saving and productivity enhancement. The study by Nagle (2019a) specifically addresses the relationship between open source software and firm productivity, indicating that OSS plays a crucial role in enhancing productivity within firms.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately identifies the study by Nagle (2019a) as addressing the relationship between open source software and firm productivity, and it provides additional context about the benefits of OSS, aligning well with the reference answer.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** Open source software has been linked to firm productivity through its potential to enhance innovation, reduce costs, and improve software quality. The study that specifically addresses this relationship is by Nagle, F. (2019a), titled \"Open source software and firm productivity,\" published in Management Science, 65(3), 1191-1215. This study explores how the adoption and integration of open source software can contribute to increased productivity within firms.", "contexts": null, "response": "Open source software is associated with firm productivity by fostering innovation, lowering costs, and enhancing software quality. The study by Nagle, F. (2019a) in Management Science examines how open source software adoption and integration can lead to productivity gains in firms.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It conveys the same information as the reference answer, maintaining the key points about the relationship between open source software and firm productivity, and correctly cites the study by Nagle, F. (2019a).", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the data provided in Table 2, what is the estimated labor-market value of open source software in the high wage scenario, and how does it compare to the low wage scenario?", "contexts": null, "response": "In the high wage scenario, the estimated labor-market value of open source software is $6.22 trillion for labor supply and $13.18 trillion for labor demand. In comparison, the low wage scenario estimates the labor-market value at $1.22 trillion for labor supply and $2.59 trillion for labor demand. This indicates that the high wage scenario values are significantly higher than those in the low wage scenario.", "passing": false, "feedback": "The generated answer is relevant to the user query but contains significant numerical errors. It incorrectly states the labor supply values as trillions instead of billions, which is a critical mistake. The comparison between the high and low wage scenarios is mentioned, but the numerical inaccuracies affect the overall correctness of the answer.", "score": 2.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** In the high wage scenario, the estimated labor-market value of open source software is $6.22 billion for labor supply and $13.18 trillion for labor demand. In comparison, the low wage scenario estimates the labor-market value at $1.22 billion for labor supply and $2.59 trillion for labor demand. This indicates that the labor-market value is significantly higher in the high wage scenario compared to the low wage scenario.", "contexts": null, "response": "In the high wage scenario, the estimated labor-market value of open source software is $9.59 billion for labor supply and $17.91 trillion for labor demand. In comparison, the low wage scenario estimates the labor-market value at $1.88 billion for labor supply and $3.52 trillion for labor demand. This indicates that the labor-market value is significantly higher in the high wage scenario compared to the low wage scenario.", "passing": false, "feedback": "The generated answer is relevant to the user query, as it addresses the labor-market value of open source software in both high and low wage scenarios. However, the figures provided in the generated answer do not match those in the reference answer, indicating inaccuracies in the data presented. This discrepancy affects the correctness of the answer, warranting a score of 2.0.", "score": 2.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the labor-market value of open source, what is the estimated difference in labor demand between the low wage and high wage scenarios?", "contexts": null, "response": "The estimated difference in labor demand between the low wage and high wage scenarios for open source using languages in buckets 1, 2, and 3 is $14.39 trillion ($17.91 trillion for the high wage scenario minus $3.52 trillion for the low wage scenario).", "passing": false, "feedback": "The generated answer provides a different set of figures and does not match the reference answer. It introduces new values and scenarios that are not mentioned in the user query or the reference answer, making it irrelevant to the original question.", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The estimated difference in labor demand between the low wage scenario ($2.59 Trillion) and the high wage scenario ($13.18 Trillion) is $10.59 Trillion.", "contexts": null, "response": "The estimated difference in labor demand between the low wage scenario ($2.59 trillion) and the high wage scenario ($13.18 trillion) is $10.59 trillion.", "passing": true, "feedback": "The generated answer is identical in content to the reference answer, with only minor differences in capitalization, which do not affect the correctness or relevance of the information provided.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** What are some examples of programming languages listed in the provided context information?", "contexts": null, "response": "Some examples of programming languages mentioned include Go, JavaScript, Java, C, Typescript, and Python.", "passing": false, "feedback": "The generated answer is not relevant to the user query as it does not list any of the programming languages mentioned in the provided context information. The reference answer provides a completely different set of languages.", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** Some examples of programming languages listed in the provided context information are ABNF, ACTIONSCRIPT, ADA, APPLESCRIPT, ARDUINO, ASPECTJ, ASPX-CS, ASPX-VB, AWK, C, C#, CHARMCI, CLOJURE, COFFEESCRIPT, COMMONLISP, CSS, CUDA, CYTHON, and D.", "contexts": null, "response": "Some examples of programming languages include Go, JavaScript, Java, C, and Python.", "passing": false, "feedback": "The generated answer is not relevant to the user query as it does not list the programming languages mentioned in the provided context information. Instead, it lists different programming languages.", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: What are some programming languages that start with the letter 'E' as listed in the provided context?", "contexts": null, "response": "The provided context does not list any programming languages that start with the letter 'E'.", "passing": false, "feedback": "The generated answer is incorrect as it states that there are no programming languages starting with 'E' in the provided context, while the reference answer lists several such languages.", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: The programming languages that start with the letter 'E' in the provided context are EASYTRIEVE, EC, ELIXIR, ELM, EMACSLISP, and ERLANG.", "contexts": null, "response": "The programming languages that start with the letter 'E' are EASYTRIEVE, EC, ELIXIR, ELM, EMACSLISP, and ERLANG.", "passing": true, "feedback": "The generated answer is relevant and fully correct, as it lists the same programming languages starting with 'E' as the reference answer. The slight difference in wording does not affect the correctness or relevance.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: What programming language in the provided list is known for its use in web development and is often used alongside HTML and CSS?", "contexts": null, "response": "JavaScript is known for its use in web development and is often used alongside HTML and CSS.", "passing": true, "feedback": "The generated answer is relevant and fully correct, as it accurately identifies JavaScript as the programming language known for its use in web development alongside HTML and CSS.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: JavaScript is the programming language in the provided list that is known for its use in web development and is often used alongside HTML and CSS.", "contexts": null, "response": "JavaScript is indeed widely recognized for its use in web development, often utilized alongside HTML and CSS to create interactive and dynamic web pages.", "passing": true, "feedback": "The generated answer is relevant and fully correct, providing a clear explanation of JavaScript's role in web development, similar to the reference answer.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: What programming languages from the provided list are known for their use in web development?", "contexts": null, "response": "JavaScript and TypeScript are known for their use in web development.", "passing": false, "feedback": "The generated answer is relevant as JavaScript and TypeScript are indeed known for their use in web development. However, it does not address the specific languages from the provided list in the reference answer, which includes PHP, Python, Ruby, Scala, and Swift. The generated answer is partially correct but incomplete.", "score": 3.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: From the provided list, the programming languages known for their use in web development include PHP, PERL, PYTHON, RUBY, and SCALA.", "contexts": null, "response": "Among the programming languages listed, Python and Ruby are known for their use in web development.", "passing": false, "feedback": "The generated answer is relevant but incomplete. It correctly identifies Python and Ruby as languages used in web development but omits PHP, PERL, and SCALA, which are also mentioned in the reference answer.", "score": 3.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the provided context, which programming languages are included in Bucket 1, and what is the estimated global labor-market value of open source using languages from Buckets 1 and 2?", "contexts": null, "response": "The context does not specify which programming languages are included in Bucket 1. However, the estimated global labor-market value of open source using languages from Buckets 1 and 2 is $4.18 billion for labor supply and $8.84 trillion for labor demand.", "passing": false, "feedback": "The generated answer correctly provides the estimated global labor-market value of open source using languages from Buckets 1 and 2, matching the reference answer. However, it incorrectly states that the context does not specify which programming languages are included in Bucket 1, which is a mistake.", "score": 3.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The programming languages included in Bucket 1 are SMALLTALK, SOLIDITY, STANDARD ML, SWIFT, SWIG, TADS 3, TCL, THRIFT, TRANSACT-SQL, TREETOP, TYPESCRIPT, VB.NET, VBSCRIPT, VCL, VIML, and WEB IDL. The estimated global labor-market value of open source using languages from Buckets 1 and 2 is $4.18 billion in labor supply and $8.84 trillion in labor demand.", "contexts": null, "response": "The estimated global labor-market value of open source using languages from Buckets 1 and 2 is $4.18 billion in labor supply and $8.84 trillion in labor demand.", "passing": false, "feedback": "The generated answer is partially relevant as it provides information about the estimated global labor-market value, which is part of the reference answer. However, it omits the list of programming languages included in Bucket 1, which is a significant portion of the user query.", "score": 2.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the labor-market value of open source using languages in buckets 1, 2, and 3, what is the estimated labor demand in the high wage scenario, and how does it compare to the low wage scenario?", "contexts": null, "response": "In the high wage scenario, the estimated labor demand for open source using languages in buckets 1, 2, and 3 is $17.91 trillion. In comparison, the labor demand in the low wage scenario is $3.52 trillion. This shows that the labor demand in the high wage scenario is significantly higher than in the low wage scenario.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It provides the same figures for the estimated labor demand in both the high and low wage scenarios as the reference answer and correctly highlights the significant difference between the two scenarios.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** In the high wage scenario, the estimated labor demand for open source using languages in buckets 1, 2, and 3 is $17.91 trillion. In comparison, the low wage scenario estimates the labor demand at $3.52 trillion. This shows that the high wage scenario's labor demand is significantly higher, reflecting the impact of using the US average wage compared to the Indian average wage for programmers in 2020.", "contexts": null, "response": "In the high wage scenario, the estimated labor demand for open source using languages in buckets 1, 2, and 3 is $17.91 trillion. In comparison, the low wage scenario estimates the labor demand at $3.52 trillion. This shows that the high wage scenario's labor demand is significantly higher, reflecting the impact of using the US average wage compared to the Indian average wage for programmers in 2020.", "passing": true, "feedback": "The generated answer is identical to the reference answer, making it fully relevant and correct in addressing the user query.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the goods market approach estimate the value of open-source software (OSS) compared to the labor market supply-side value, and why is there a differential between these estimates?", "contexts": null, "response": "The goods market approach estimates the value of open-source software (OSS) by considering the cost of replacing OSS with proprietary alternatives. This method involves creating a basket of proprietary software that serves as substitutes for OSS and calculating the average price of these proprietary equivalents. The goods market approach assumes a fixed price for selling a good multiple times, which is typically lower than the total value estimated from recreating all packages on the labor side. The differential between the goods market and labor market supply-side estimates arises because the goods market approach assumes a single firm reproduces the OSS and sells it at a pecuniary price, whereas the labor market approach considers the cost for all firms to recreate the OSS from scratch. This results in the goods market value being substantially smaller, as it reflects the profit a firm would make by producing the software once and selling it to many customers.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately explains the goods market approach and the labor market supply-side value, as well as the reasons for the differential between these estimates. The explanation aligns well with the reference answer, covering all key points without any mistakes.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The goods market approach estimates the value of OSS by creating a basket of equivalent substitute proprietary goods that are priced on the open market as stand-ins for OSS products. This method assumes a hypothetical scenario where OSS does not exist and must be recreated by a single firm, which then sells it at a fixed price. The differential between the goods market approach and the labor market supply-side value arises because the goods market approach assumes a fixed price for selling a good multiple times, which is usually lower than the total value estimated from recreating all packages on the labor side. The labor market supply-side value considers the cost it would take to pay programmers to write the software from scratch, which is typically higher than the price a firm would charge for selling the software to multiple customers.", "contexts": null, "response": "The goods market approach estimates the value of OSS by considering the cost of replacing free OSS with equivalent proprietary software that is sold on the open market. This method envisions a scenario where OSS is recreated by a single firm, which then sells it at a fixed price. The difference between this approach and the labor market supply-side value is due to the goods market approach assuming a fixed price for selling a product multiple times, which is generally lower than the cost of recreating all packages from scratch as estimated by the labor market approach. The labor market supply-side value accounts for the cost of hiring programmers to develop the software, which tends to be higher than the price a firm would charge for selling the software to multiple customers.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately explains the goods market approach and the labor market supply-side value, maintaining the same meaning as the reference answer. The differences in wording do not affect the correctness or clarity of the explanation.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:**", "contexts": null, "response": "The analysis of the Lorenz curves indicates that a small percentage of programmers are responsible for the majority of the value generated in both the supply and demand sides of open-source software (OSS) contributions. Specifically, the last five percent of programmers contribute over 93% of the supply side value and over 96% of the demand side value. This suggests a highly uneven distribution, where a few programmers are creating the bulk of OSS code that firms heavily rely on. Additionally, these top contributors are involved in a substantial number of repositories, indicating their significant impact is not limited to a few high-value projects.", "passing": false, "feedback": "The generated answer is not relevant to the user query, as it provides an analysis of Lorenz curves and open-source software contributions, which does not address the lack of a specific question in the user query.", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "What are the limitations of using a goods-market approach to estimate the value of open-source software (OSS), and why might a labor-market approach be preferred?", "contexts": null, "response": "The goods-market approach to estimating the value of open-source software (OSS) has several limitations. It requires numerous assumptions due to the lack of data, making it inherently more complex and potentially less accurate. This approach assumes a fixed price for selling a good multiple times, which is usually lower than the total value estimated from recreating all packages on the labor side. Additionally, the pricing strategy of proprietary software counterparts is sensitive to market demand, and the assumption that market demands for the basket software and sample OSS are similar may not hold true. The goods-market approach also involves a substantial underestimate of the value of OSS because it relies on scaling from the labor-market approach.\n\nIn contrast, a labor-market approach might be preferred because it directly calculates the labor replacement cost of each OSS package, providing a more straightforward and potentially more accurate estimation of value. This method considers the actual cost of recreating OSS at each firm, which can offer a clearer picture of its economic value. The labor-market approach also allows for a detailed analysis of value creation and contribution inequality among developers, which is not addressed by the goods-market approach.", "passing": true, "feedback": "The generated answer is relevant and fully correct. It accurately identifies the limitations of the goods-market approach, such as the need for numerous assumptions, data limitations, and issues with pricing strategies. It also correctly explains why a labor-market approach might be preferred, highlighting its focus on labor replacement costs and its ability to provide a more accurate estimation of value. The answer aligns well with the reference answer, covering all key points and providing a comprehensive explanation.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:**", "contexts": null, "response": "The analysis of Lorenz curves in the study highlights a significant concentration of value creation among a small fraction of programmers. Specifically, the last five percent of programmers are responsible for generating over 93% of the supply side value and over 96% of the demand side value. This indicates that a very small number of programmers are crucial in creating the majority of open-source software code, which is extensively used by firms. Additionally, the increase in the number of repositories for the top contributors suggests that their impact is not limited to a few high-value projects but extends across numerous repositories.", "passing": false, "feedback": "The generated answer is not relevant to the user query. The user query and reference answer focus on the challenges and limitations of estimating the value of open-source software using a goods-market approach, while the generated answer discusses the concentration of value creation among programmers in open-source software, which is unrelated to the topic of valuation methods.", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "The goods-market approach to estimating the value of OSS is limited by several factors. Firstly, it requires numerous assumptions, such as the assumption that market demands for proprietary software and OSS are similar, which may not be accurate. Additionally, this approach can lead to a substantial underestimate of OSS value because it does not account for the differences in the nature of the software being compared; proprietary software is often fully functional and stand-alone, whereas OSS may consist of smaller application libraries. Furthermore, the goods-market approach is sensitive to market demand and pricing strategies, which can vary significantly. Due to these complexities and the lack of comprehensive data, the goods-market approach is inherently flawed and can result in an \"orange to apples\" comparison. In contrast, the labor-market approach, which focuses on the cost of labor required to develop the software, is emphasized as it provides a more reliable estimate by considering the actual resources invested in creating OSS.", "contexts": null, "response": "The goods-market approach to estimating the value of OSS is limited by several factors. It relies on numerous assumptions, such as the similarity in market demands for proprietary software and OSS, which may not hold true. This approach can lead to a substantial underestimate of OSS value because it does not fully account for the differences in the nature of the software being compared; proprietary software is often fully functional and stand-alone, whereas OSS may consist of smaller application libraries. Additionally, the goods-market approach is sensitive to market demand and pricing strategies, which can vary significantly. Due to these complexities and the lack of comprehensive data, the goods-market approach can result in an \"orange to apples\" comparison. In contrast, the labor-market approach, which focuses on the cost of labor required to develop the software, is emphasized as it provides a more reliable estimate by considering the actual resources invested in creating OSS.", "passing": true, "feedback": "The generated answer is highly relevant and correct, closely matching the reference answer in content and structure. It accurately describes the limitations of the goods-market approach and the advantages of the labor-market approach in estimating the value of OSS.", "score": 5.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}], "faithfulness": [{"query": "**Question:**", "contexts": ["Working Paper 24-038", "## -- Figure 4 about here ---\n\nFigure 3 shows the Lorenz curves and the number of repositories that a fraction of programmers has contributed to for the supply side (Panel A) and the demand side (Panel B). A Lorenz curve that  lay  directly  on  the  45  degree  line  would  imply  a  very  even  distribution  of  values  across programmers. Instead, Panel A shows a Lorenz curve as a nearly flat line with a drastic increase for the final share of programmers. This implies that the distribution of the supply value is highly uneven and considerably more concentrated than the 80/20 standard. Indeed, the last five percent of programmers, or 3,000 programmers, generate over 93% of the supply side value. Similarly, Panel B shows - when accounting for usage - that those last five percent generate over 96% of the demand side value.  In  aggregate,  this  indicates  that  a  very  small  number  of  programmers  are creating the bulk of OSS code that is heavily relied upon by firms to create their own code. In both Panel A and Panel B we can also see a rise in the number of repositories for the last 10-15% of programmers that contribute  to  the  highest  value,  which  implies  that  the  uneven  value  that  is generated by few programmers is not just due to a few highly valuable repositories but by the contributions of this handful of contributors to a substantial number of repositories."], "response": "The analysis of the Lorenz curves indicates a highly uneven distribution of contributions among programmers. A small percentage of programmers are responsible for the majority of the value on both the supply and demand sides. Specifically, the last five percent of programmers generate over 93% of the supply side value and over 96% of the demand side value. This suggests that a few programmers are significantly contributing to a large number of repositories, which in turn are heavily relied upon by firms for creating their own code.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Based on the working paper \"The Value of Open Source Software\" by Manuel Hoffmann, Frank Nagle, and Yanuo Zhou, what is the estimated demand-side value of widely-used open source software (OSS), and how does it compare to the supply-side value?", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## Abstract\n\nThe  value  of  a  non-pecuniary  (free)  product  is  inherently  difficult  to  assess.  A  pervasive example is open source software (OSS), a global public good that plays a vital role in the economy and is foundational for most technology we use today. However, it is difficult to measure the value of OSS due to its non-pecuniary nature and lack of centralized usage tracking. Therefore, OSS remains largely unaccounted for in economic measures. Although prior studies have estimated the supply-side costs to recreate this software, a lack of data has hampered estimating the much larger demand-side (usage) value created by OSS. Therefore, to understand the complete economic and social value of widely-used OSS, we leverage unique global data from two complementary sources capturing  OSS  usage  by  millions  of  global  firms.  We  first  estimate  the  supply-side  value  by calculating the cost to recreate the most widely used OSS once. We then calculate the demandside value based on a replacement value for each firm that uses the software and would need to build it internally if OSS did not exist. We estimate the supply-side value of widely-used OSS is $4.15 billion, but that the demand-side value is much larger at $8.8 trillion. We find that firms would need to spend 3.5 times more on software than they currently do if OSS did not exist. The top six programming languages in our sample comprise 84% of the demand-side value of OSS. Further, 96% of the demand-side value is created by only 5% of OSS developers.\n\nJEL Classification:\n\nH4; O3; J0\n\nKeywords: Open-source software, global public good\n\nAcknowledgement: The authors are grateful for  financial  and  administrative  support  from  the Linux  Foundation  without  which  the  data  from  the  Census  would  not  have  otherwise  been available.  We  greatly  appreciate  the  support  of  the  Research  Computing  Services  at  Harvard Business School, the Laboratory for Innovation Science at Harvard, the Linux Foundation, and the software composition analysis data providers Snyk, the Synopsys Cybersecurity Research Center, and FOSSA. We thank Tianli Li and Misha Bouzinier for excellent research assistance. We are also  thankful  to  the  software  developer  Boris  Martinovic  as  well  as  Rich  Lander  and  Scott Hanselman from Microsoft for insights into the .NET ecosystem. We received helpful feedback from participants at the Harvard Business School Values and Valuations Conference, the Harvard Business School D  Research Day, and the 2023 Academy of Management Conference. 3\n\n- a Harvard Business School, Harvard University, 150 Western Avenue, Suite 6.220, Allston, MA 02134, E-Mail: mhoffmann@hbs.edu.\n- b Harvard Business School, Harvard University, Morgan 213, Soldiers Field, Boston, MA, 02134, E-Mail: fnagle@hbs.edu.\n- c Rotman School of Management, University of Toronto, 105 St. George Street, Toronto, ON, M5S 3E6, Canada, E-Mail: yanuo.zhou@rotman.utoronto.ca."], "response": "The estimated demand-side value of widely-used open source software (OSS) is $8.8 trillion. This value is significantly larger than the supply-side value, which is estimated at $4.15 billion.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:**", "contexts": ["Working Paper 24-038", "## -- Figure 4 about here ---\n\nFigure 3 shows the Lorenz curves and the number of repositories that a fraction of programmers has contributed to for the supply side (Panel A) and the demand side (Panel B). A Lorenz curve that  lay  directly  on  the  45  degree  line  would  imply  a  very  even  distribution  of  values  across programmers. Instead, Panel A shows a Lorenz curve as a nearly flat line with a drastic increase for the final share of programmers. This implies that the distribution of the supply value is highly uneven and considerably more concentrated than the 80/20 standard. Indeed, the last five percent of programmers, or 3,000 programmers, generate over 93% of the supply side value. Similarly, Panel B shows - when accounting for usage - that those last five percent generate over 96% of the demand side value.  In  aggregate,  this  indicates  that  a  very  small  number  of  programmers  are creating the bulk of OSS code that is heavily relied upon by firms to create their own code. In both Panel A and Panel B we can also see a rise in the number of repositories for the last 10-15% of programmers that contribute  to  the  highest  value,  which  implies  that  the  uneven  value  that  is generated by few programmers is not just due to a few highly valuable repositories but by the contributions of this handful of contributors to a substantial number of repositories."], "response": "The analysis of Lorenz curves in the context of programmer contributions to repositories reveals a highly uneven distribution of value. A small fraction of programmers, specifically the last five percent, are responsible for generating the majority of both supply and demand side values. This indicates that a limited number of programmers are significantly contributing to the creation of open-source software code, which is extensively utilized by firms. Additionally, these top contributors are involved in a substantial number of repositories, suggesting that their impact is not limited to a few high-value projects but spans across numerous repositories.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "The estimated demand-side value of widely-used open source software (OSS) is $8.8 trillion, which is significantly larger than the supply-side value, estimated at $4.15 billion. This indicates that firms would need to spend 3.5 times more on software than they currently do if OSS did not exist.", "contexts": ["## --- Table 1 about here ---\n\nTable  1  shows  descriptive  statistics  from  both  data  sets  separately.  The  inward-facing Census  (Panel  A)  contains  just  over  261.7  million  lines  of  code  with  72%  of  the  lines  being attributable to the top programming languages. The average package includes 142 thousand lines of code with a slightly lower average of 113 thousand lines of code for the subset of top languages. When considering the demand (usage) side, we observe that the Census packages were used over 2.7 million times while 92% of this usage is attributable to the top languages. The average package was used 1,472.4 times with a higher usage of around 1,497.5 for the top  languages.  For  the outward-facing  BuiltWith  data  we  find  similar  patterns,  but  at  different  levels.  The  packages included from BuiltWith include over 82 million lines of code, 71% of which are attributable to the  top  programming  languages.  The  average  package  within  the  BuiltWith  sample  has  111 thousand  lines  of  code  with  a  lower  average  of  around  80  thousand  lines  of  code  for  the  top languages. This is because our BuiltWith data primarily consists of JavaScript-based packages, which are often smaller than packages written in other languages. BuiltWith packages were used over 142 thousand times where 99.97% were attributable to the top languages. Next, we used these raw observations to calculate the value of all OSS through the labor market approach and estimated the value created from the supply and demand side.\n\n--- Table 2 about here ---\n\nTable 2 shows the estimates for the value of OSS based on the firm-relevant joint Census and BuiltWith sample. All estimates in Table 2 are based only on software languages classified in bucket  1  from  Table  A1,  which  are  the  most  likely  to  be  written  by  a  human  rather  than  a machine. 19 The first column contains estimates with wages from a low income country (India), the global  average  wage,  and  a  high  income  country  (United  States  of  America),  respectively  (as described above). To reproduce all widely-used OSS once (e.g., the idea of OSS still exists, but all current OSS is deleted and needs to be coded from scratch), using programmers at the average developer wage from India, it would require an investment of $1.22 billion. In contrast, if we use the average developer wage from the United States, then reproducing all widely-used OSS would require  an  investment  of  $6.22  billion.  Using  a  pool  of  programmers  from  across  the  world, weighed based on the existing geographic contributions to OSS as discussed above, would lead to an investment somewhere in between the low and high-income country, $4.15 billion. It is useful to compare these numbers to those from similar studies to understand differences in valuing all OSS (prior studies) versus that which is widely used (our study). Robbins et al. (2021) and Blind et al. (2021) use a method similar to ours and estimate that the value of OSS created in the US is $38 billion in 2019 and that created in the EU is \u20ac1 billion in 2018. Wachs et al. (2022) show that roughly 50% of OSS contributions come from the US and EU combined. In aggregate, that would lead these studies to give a global value of OSS of $78 billion. Thus, our middle estimate of a supply-side value of $4.15 billion for only firm-oriented and widely used OSS is a credible lowerbound and highlights the higher estimations of the total of supply-side value of OSS when not considering whether or not a given OSS package is widely used. This further indicates that the supply-side value of the most widely used OSS is roughly 5.5% of the supply-side value of all OSS.\n\nThe second column in Table 2 contains the demand side estimates based on the labor market approach. We find that if firms had to recreate all OSS packages they used (e.g., OSS itself no longer existed and every firm that used an OSS package had to recreate it), then the entire cost would amount to between $2.59 trillion to $13.18 trillion using labor from the low wage or high wage country only, respectively. A pool of programmers across the globe could recreate all of OSS that is being widely used for a cost of approximately $8.80 trillion. Interpreting this number is\n\n19 Tables in the appendix show the equivalent values from Table 2 when including software language buckets 1 and 2 (Table A3) and all three software language buckets (Table A4).\n\nslightly more complicated but still feasible. According to a Statista (2023) report, global software revenue in 2020 (the same year as our data) was $531.7 billion. However, this represents a flow, not a stock, of software. Relying on government estimates that software fully depreciates over three years, we can do a back of the envelope calculation and consider the purchase value of the full stock of prepackaged software used in 2020 as the aggregate of that sold from 2018 to 2020, which is $1.54 trillion. Further, this represents only the expenditure on prepackaged software and does  not  include  custom  purchased  or  in-house  developed  software.  Here,  the  best  obtainable estimates of private-sector investment in software overall come from the United States National Income and Product Accounts data (NIPA 2023). In 2020, the national account data shows that in the  US,  private  firms  spent  $479.2  billion  on  software,  of  which  45%  ($215.5  billion)  was prepackaged. If we assume this is a consistent ratio for the rest of the world, then the total amount firms spent on software being used in 2020 was $3.4 trillion (= $1.54 trillion/0.45). Combining this rough estimate with the demand side estimate of the value of OSS based on an average global wage ($8.8 trillion), this indicates firms would spend $12.2 trillion (=$3.4 trillion + $8.8 trillion), or three and a half times what they currently spend if they needed to pay in-house developers to write the OSS that they currently use for free.", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The estimated demand-side value of widely-used open source software (OSS) is indeed $8.8 trillion, which is significantly larger than the supply-side value of $4.15 billion. This suggests that if OSS did not exist, firms would need to spend approximately 3.5 times more on software than they currently do, highlighting the substantial cost savings and value that OSS provides to businesses.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the paper aim to address the challenge of measuring the value of open source software (OSS), and why is this measurement important?", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The paper aims to address the challenge of measuring the value of open source software (OSS) by estimating both the supply-side and demand-side values. It uses a labor market approach to calculate the labor replacement cost of recreating OSS packages, applying the Constructive Cost Model II (COCOMO II) to estimate the person-hours required to write the code from scratch. This supply-side value is then scaled by the number of times firms use each package to obtain a demand-side value. The measurement is important because OSS plays a critical role in the economy, serving as a modern example of 'the commons.' Understanding its value is crucial to ensuring its sustainability and avoiding the 'tragedy of the commons,' where shared resources are overused but underinvested in. Accurate measurement can inform better support and investment in OSS, which is vital for the health of the digital economy and the broader economy built upon it.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The paper aims to address the challenge of measuring the value of open source software (OSS) by providing estimates for both the price (p) and the quantity (q) of OSS using newly collected data from multiple sources. Traditionally, measuring the value of a good or service involves multiplying the price by the quantity sold. However, in the case of OSS, the price is generally zero since the source code is publicly available, and the quantity is unknown due to the lack of restrictions on how the code may be copied and reused. The measurement of OSS's value is important because OSS plays a critical role in the economy and represents a modern example of 'the commons,' which is at risk of the 'tragedy of the commons.' Understanding its value can help in managing and preserving this shared resource effectively.", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## Abstract\n\nThe  value  of  a  non-pecuniary  (free)  product  is  inherently  difficult  to  assess.  A  pervasive example is open source software (OSS), a global public good that plays a vital role in the economy and is foundational for most technology we use today. However, it is difficult to measure the value of OSS due to its non-pecuniary nature and lack of centralized usage tracking. Therefore, OSS remains largely unaccounted for in economic measures. Although prior studies have estimated the supply-side costs to recreate this software, a lack of data has hampered estimating the much larger demand-side (usage) value created by OSS. Therefore, to understand the complete economic and social value of widely-used OSS, we leverage unique global data from two complementary sources capturing  OSS  usage  by  millions  of  global  firms.  We  first  estimate  the  supply-side  value  by calculating the cost to recreate the most widely used OSS once. We then calculate the demandside value based on a replacement value for each firm that uses the software and would need to build it internally if OSS did not exist. We estimate the supply-side value of widely-used OSS is $4.15 billion, but that the demand-side value is much larger at $8.8 trillion. We find that firms would need to spend 3.5 times more on software than they currently do if OSS did not exist. The top six programming languages in our sample comprise 84% of the demand-side value of OSS. Further, 96% of the demand-side value is created by only 5% of OSS developers.\n\nJEL Classification:\n\nH4; O3; J0\n\nKeywords: Open-source software, global public good\n\nAcknowledgement: The authors are grateful for  financial  and  administrative  support  from  the Linux  Foundation  without  which  the  data  from  the  Census  would  not  have  otherwise  been available.  We  greatly  appreciate  the  support  of  the  Research  Computing  Services  at  Harvard Business School, the Laboratory for Innovation Science at Harvard, the Linux Foundation, and the software composition analysis data providers Snyk, the Synopsys Cybersecurity Research Center, and FOSSA. We thank Tianli Li and Misha Bouzinier for excellent research assistance. We are also  thankful  to  the  software  developer  Boris  Martinovic  as  well  as  Rich  Lander  and  Scott Hanselman from Microsoft for insights into the .NET ecosystem. We received helpful feedback from participants at the Harvard Business School Values and Valuations Conference, the Harvard Business School D  Research Day, and the 2023 Academy of Management Conference. 3\n\n- a Harvard Business School, Harvard University, 150 Western Avenue, Suite 6.220, Allston, MA 02134, E-Mail: mhoffmann@hbs.edu.\n- b Harvard Business School, Harvard University, Morgan 213, Soldiers Field, Boston, MA, 02134, E-Mail: fnagle@hbs.edu.\n- c Rotman School of Management, University of Toronto, 105 St. George Street, Toronto, ON, M5S 3E6, Canada, E-Mail: yanuo.zhou@rotman.utoronto.ca."], "response": "The paper seeks to measure the value of open source software (OSS) by estimating both the price and quantity of OSS using newly collected data. This is challenging because OSS is typically free, making its price zero, and its usage is difficult to track due to the lack of restrictions on copying and reuse. Understanding the value of OSS is crucial as it plays a vital role in the economy and exemplifies the concept of 'the commons,' which faces the risk of being overused and underinvested in. Accurately measuring its value can aid in better management and preservation of this important shared resource.", "passing": false, "feedback": "NO", "score": 0.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the concept of the \"tragedy of the commons\" relate to the challenges faced in measuring the value of open-source software (OSS), and what are the implications for the digital economy?", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The concept of the \"tragedy of the commons\" relates to the challenges in measuring the value of open-source software (OSS) by highlighting the risk that shared resources, like OSS, may be overused and underinvested in. This occurs because OSS is freely available and widely used, yet its value is difficult to quantify due to the lack of traditional pricing and usage data. The implications for the digital economy are significant, as OSS is a critical component of modern digital infrastructure. Without proper measurement and investment, the sustainability of OSS could be threatened, potentially impacting the broader economy that relies on it. Understanding and addressing these challenges is crucial to ensure the continued health and growth of the digital economy.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The \"tragedy of the commons\" refers to the overuse and underinvestment in shared resources, as individuals prioritize their own benefits over the collective good. This concept is applicable to open-source software (OSS) because, like shared grazing lands, OSS is a communal resource that is critical to the economy. However, its value is difficult to measure, which can lead to overuse and underinvestment. If the value of OSS is not accurately measured and maintained, it risks crumbling under its own success, similar to the tragedy of the commons. This has significant implications for the digital economy, as OSS is a foundational element that supports various economic activities. Therefore, accurately measuring the value of OSS is crucial to ensure its sustainability and the health of the broader economy.", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## Abstract\n\nThe  value  of  a  non-pecuniary  (free)  product  is  inherently  difficult  to  assess.  A  pervasive example is open source software (OSS), a global public good that plays a vital role in the economy and is foundational for most technology we use today. However, it is difficult to measure the value of OSS due to its non-pecuniary nature and lack of centralized usage tracking. Therefore, OSS remains largely unaccounted for in economic measures. Although prior studies have estimated the supply-side costs to recreate this software, a lack of data has hampered estimating the much larger demand-side (usage) value created by OSS. Therefore, to understand the complete economic and social value of widely-used OSS, we leverage unique global data from two complementary sources capturing  OSS  usage  by  millions  of  global  firms.  We  first  estimate  the  supply-side  value  by calculating the cost to recreate the most widely used OSS once. We then calculate the demandside value based on a replacement value for each firm that uses the software and would need to build it internally if OSS did not exist. We estimate the supply-side value of widely-used OSS is $4.15 billion, but that the demand-side value is much larger at $8.8 trillion. We find that firms would need to spend 3.5 times more on software than they currently do if OSS did not exist. The top six programming languages in our sample comprise 84% of the demand-side value of OSS. Further, 96% of the demand-side value is created by only 5% of OSS developers.\n\nJEL Classification:\n\nH4; O3; J0\n\nKeywords: Open-source software, global public good\n\nAcknowledgement: The authors are grateful for  financial  and  administrative  support  from  the Linux  Foundation  without  which  the  data  from  the  Census  would  not  have  otherwise  been available.  We  greatly  appreciate  the  support  of  the  Research  Computing  Services  at  Harvard Business School, the Laboratory for Innovation Science at Harvard, the Linux Foundation, and the software composition analysis data providers Snyk, the Synopsys Cybersecurity Research Center, and FOSSA. We thank Tianli Li and Misha Bouzinier for excellent research assistance. We are also  thankful  to  the  software  developer  Boris  Martinovic  as  well  as  Rich  Lander  and  Scott Hanselman from Microsoft for insights into the .NET ecosystem. We received helpful feedback from participants at the Harvard Business School Values and Valuations Conference, the Harvard Business School D  Research Day, and the 2023 Academy of Management Conference. 3\n\n- a Harvard Business School, Harvard University, 150 Western Avenue, Suite 6.220, Allston, MA 02134, E-Mail: mhoffmann@hbs.edu.\n- b Harvard Business School, Harvard University, Morgan 213, Soldiers Field, Boston, MA, 02134, E-Mail: fnagle@hbs.edu.\n- c Rotman School of Management, University of Toronto, 105 St. George Street, Toronto, ON, M5S 3E6, Canada, E-Mail: yanuo.zhou@rotman.utoronto.ca."], "response": "The \"tragedy of the commons\" describes a situation where shared resources are overused and underinvested in because individuals focus on their own benefits rather than the collective good. This concept is relevant to open-source software (OSS) because, like shared resources, OSS is a communal asset vital to the economy. Its value is challenging to measure, which can lead to overuse and insufficient investment. If OSS's value is not properly assessed and maintained, it risks deteriorating under its own success, akin to the tragedy of the commons. This poses significant challenges for the digital economy, as OSS is a crucial foundation for various economic activities. Therefore, accurately measuring OSS's value is essential to ensure its sustainability and the overall health of the economy.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How do the Census II and BuiltWith datasets complement each other in measuring the value of Open Source Software (OSS) usage, and why is this important for reducing measurement error?", "contexts": ["## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy.", "## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS."], "response": "The Census II and BuiltWith datasets complement each other by capturing different dimensions of Open Source Software (OSS) usage. The Census II dataset is inward-facing, focusing on OSS code used within products that firms create, while the BuiltWith dataset is outward-facing, identifying OSS code that consumers interact with through firm websites. This dual approach is important for reducing measurement error because it minimizes the risk of double-counting and ensures a more comprehensive understanding of OSS usage. By covering both internal and external applications of OSS, the combined datasets provide a more accurate estimate of the value of OSS, capturing its impact on both the supply and demand sides of the economy.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The Census II and BuiltWith datasets complement each other by focusing on different aspects of OSS usage. The Census II dataset aggregates data from software composition analysis (SCA) firms to capture OSS that is built into the software a company sells, while the BuiltWith dataset identifies OSS libraries used in a company's website technology. This complementary approach is important because it reduces the chances of double-counting OSS usage across datasets, thereby minimizing measurement error. By focusing on widely deployed and practically used OSS, rather than all available OSS projects, the study enhances the accuracy of measuring OSS value, avoiding overestimation that could occur if unused projects were valued equally with widely used ones.", "contexts": ["## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy.", "## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS."], "response": "The Census II and BuiltWith datasets complement each other by focusing on different dimensions of OSS usage. The Census II dataset captures OSS integrated into products that companies create, while the BuiltWith dataset identifies OSS libraries used in company websites. This approach minimizes the risk of double-counting OSS usage, thereby reducing measurement error. By concentrating on widely used OSS, the study provides a more accurate estimation of OSS value, avoiding overestimation that could result from including less utilized projects.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the study contribute to the understanding of the value of open-source software (OSS) in the context of the 'productivity paradox' and what implications does it have for firms and policymakers?", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The study contributes to understanding the value of open-source software (OSS) in the context of the 'productivity paradox' by highlighting the significant cost savings and productivity enhancements that OSS provides at a societal level. It demonstrates that OSS contributes massively to the economy by reducing the need for firms to recreate software from scratch, thus enhancing productivity despite the paradox where IT investments sometimes show limited impact on productivity statistics. For firms, the study underscores the importance of OSS in their production processes and suggests that firms should not only use OSS but also contribute to its maintenance to ensure the health of the OSS ecosystem. For policymakers, the study emphasizes the growing importance of OSS to the economy and suggests that there should be more societal support for the creation and maintenance of OSS, beyond just securing the existing ecosystem. This support is crucial given that a small number of contributors are responsible for a large portion of the value created by OSS.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The study contributes to the understanding of the value of OSS in the context of the 'productivity paradox' by providing a comprehensive estimate of the value created by OSS, not only from the supply-side (cost to create) but also from the demand-side (usage by firms). This dual approach offers insights into the substantial cost-savings and productivity enhancements that OSS provides at a societal level, addressing the paradox where IT investments often show limited impact on productivity statistics. For firms, the study highlights the importance of OSS in production and encourages active contributions to OSS maintenance, emphasizing that such contributions are minimal compared to the costs firms would incur without OSS. For policymakers, the study underscores the growing economic importance of OSS and supports actions to bolster the OSS ecosystem, aligning with recent initiatives by entities like the European Commission and the U.S. government.", "contexts": ["## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below.", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The study contributes to the understanding of the value of OSS in the context of the 'productivity paradox' by offering a comprehensive estimate of OSS value from both the supply-side (cost to create) and the demand-side (usage by firms). This dual approach reveals significant cost-savings and productivity enhancements that OSS provides at a societal level, addressing the paradox where IT investments often show limited impact on productivity statistics. For firms, the study underscores the importance of OSS in production and encourages active contributions to OSS maintenance, noting that such contributions are minimal compared to the costs firms would face without OSS. For policymakers, the study highlights the growing economic importance of OSS and supports actions to strengthen the OSS ecosystem, aligning with recent initiatives by entities like the European Commission and the U.S. government.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How do the two main data sources used in the study complement each other in estimating the value of open source software (OSS)?", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy."], "response": "The two main data sources used in the study complement each other by focusing on different aspects of open source software (OSS) usage. The \"Census II of Free and Open Source Software - Application Libraries\" provides insights into OSS that is integrated into the software products a company sells, capturing internal usage. On the other hand, the BuiltWith dataset focuses on OSS used in a company's website, capturing outward-facing usage. By combining these datasets, the study reduces the chances of double-counting and provides a more comprehensive measurement of OSS usage, allowing for a more accurate estimation of its value.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The study uses two complementary main data sources to estimate the value of OSS: the Census and BuiltWith. The Census is inward-facing and allows the identification of OSS code that goes into products firms create, capturing packaged software usage within firms. BuiltWith is outward-facing and identifies OSS code that consumers directly interact with through firm websites, capturing usage in websites that are consumer-facing. The overlap between the two datasets is minimal, with only 18 packages found in both, reducing concerns about double-counting. These datasets complement each other by capturing different dimensions of OSS usage, providing a comprehensive view of OSS's value in both internal firm operations and external consumer interactions.", "contexts": ["## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy.", "## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS."], "response": "The study utilizes two main data sources to estimate the value of open source software (OSS): the Census and BuiltWith. The Census data is inward-facing, focusing on OSS code used within products created by firms, capturing internal software usage. BuiltWith data is outward-facing, identifying OSS code that consumers interact with on firm websites, capturing external consumer-facing usage. The overlap between these datasets is minimal, with only 18 packages appearing in both, which helps mitigate concerns about double-counting. Together, these datasets provide a comprehensive view of OSS's value in both internal firm operations and external consumer interactions.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: What was the primary purpose of the Census II of Free and Open Source Software conducted by the Linux Foundation and the Laboratory for Innovation Science at Harvard?", "contexts": ["## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS.", "## Manuel Hoffmann\n\nHarvard Business School\n\nFrank Nagle\n\nHarvard Business School\n\nYanuo Zhou\n\nUniversity of Toronto\n\nWorking Paper 24-038\n\nCopyright \u00a9 2024 by Manuel Hoffmann, Frank Nagle, and Yanuo Zhou.\n\nWorking papers are in draft form. This working paper is distributed for purposes of comment and discussion only. It may not be reproduced without permission of the copyright holder. Copies of working papers are available from the author.\n\nThe authors are grateful for financial and administrative support from the Linux Foundation without which the data from the Census would not have otherwise been available. We greatly appreciate the support of the Research Computing Services at Harvard Business School, the Laboratory for Innovation Science at Harvard, the Linux Foundation, and the software composition analysis data providers Snyk, the Synopsys Cybersecurity Research Center, and FOSSA. We thank Tianli Li and Misha Bouzinier for excellent research assistance. We are also thankful to the software developer Boris Martinovic as well as Rich Lander and Scott Hanselman from Microsoft for insights into the .NET ecosystem. We received helpful feedback from participants at the Harvard Business School Values and Valuations Conference, the Harvard Business School D3 Research Day, and the 2023 Academy of Management Conference.\n\nFunding for this research was provided in part by Harvard Business School."], "response": "The primary purpose of the Census II of Free and Open Source Software was to aggregate data from major software composition analysis firms to identify and observe the precise amount and type of internal OSS usage within firms. This was done to ensure compliance with OSS license agreements and to trace dependencies that reveal indirect OSS usage, providing a comprehensive view of OSS embedded in proprietary software.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: The primary purpose of the Census II of Free and Open Source Software was to aggregate data from three major software composition analysis (SCA) firms to better understand the usage and dependencies of open source software (OSS) within proprietary software. This was done to ensure compliance with OSS license agreements and to provide a detailed understanding of the internal and indirect OSS usage by firms, particularly in the context of mergers and acquisitions.", "contexts": ["## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS.", "## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy."], "response": "The primary purpose of the Census II of Free and Open Source Software was to aggregate data from major software composition analysis firms to understand the usage and dependencies of open source software within proprietary software. This effort aimed to ensure compliance with OSS license agreements and provide insights into the internal and indirect OSS usage by firms, especially in the context of mergers and acquisitions.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How did the researchers ensure the accuracy of the GitHub repository URLs matched to the OSS packages in the Census data?", "contexts": ["## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS.", "## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy."], "response": "The researchers ensured the accuracy of the GitHub repository URLs matched to the OSS packages in the Census data by first attempting to obtain the URLs from libraries.io. For those URLs that did not match, they performed Google searches using the package name and \"GitHub Repository\" to find the best match. Additionally, they manually searched for URLs for the remaining unmatched packages. As a robustness check, they randomly selected 50 package-repository matches derived from the Google Search method and manually confirmed their accuracy.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The researchers ensured the accuracy of the GitHub repository URLs matched to the OSS packages by performing several steps. Initially, they matched 1,657 packages to repositories using libraries.io. For unmatched packages, they used the Google API to search for the package name and 'GitHub Repository,' treating the first result as the best match, which added 174 more packages. They then manually searched for the remaining 169 packages. As a robustness check, they randomly selected 50 package-repository matches derived from the Google Search method and manually confirmed all matches to be correct, providing additional support for the automated matching method.", "contexts": ["## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The researchers ensured the accuracy of the GitHub repository URLs matched to the OSS packages through a multi-step process. Initially, they matched a significant number of packages using libraries.io. For those packages that remained unmatched, they employed the Google API to search for the package name along with 'GitHub Repository,' using the first result as the best match. This method added more packages to their list. For the remaining unmatched packages, they conducted manual searches. To verify the reliability of the Google Search method, they randomly selected a sample of package-repository matches and manually confirmed their accuracy, thereby supporting the effectiveness of the automated matching approach.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How did the researchers ensure that their analysis of OSS usage was focused on the private sector, and what was the match rate achieved in this process?", "contexts": ["## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below.", "## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy."], "response": "The researchers ensured their analysis of OSS usage was focused on the private sector by using outward-facing data from BuiltWith, which they matched to industry information from the Orbis and Compustat datasets. They achieved a match rate of 94.6% for BuiltWith websites with an industry through this process.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The researchers ensured their analysis of OSS usage was focused on the private sector by matching the adopting domains of JavaScript-related OSS from BuiltWith with company websites recorded in Orbis, Compustat, and PitchBook, which are databases capturing registered businesses worldwide. This matching process resulted in a match rate of 38.6%, corresponding to around 3.4 million websites of distinct firms. This approach excluded OSS used by non-commercial websites, such as personal websites, from their analysis.", "contexts": ["## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy.", "## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS."], "response": "The researchers ensured their analysis of OSS usage was focused on the private sector by matching the adopting domains of JavaScript-related OSS from BuiltWith with company websites recorded in Orbis, Compustat, and PitchBook, which are databases capturing registered businesses worldwide. This matching process resulted in a match rate of 38.6%, corresponding to around 3.4 million websites of distinct firms. This approach excluded OSS used by non-commercial websites, such as personal websites, from their analysis.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:**", "contexts": ["Working Paper 24-038", "## -- Figure 4 about here ---\n\nFigure 3 shows the Lorenz curves and the number of repositories that a fraction of programmers has contributed to for the supply side (Panel A) and the demand side (Panel B). A Lorenz curve that  lay  directly  on  the  45  degree  line  would  imply  a  very  even  distribution  of  values  across programmers. Instead, Panel A shows a Lorenz curve as a nearly flat line with a drastic increase for the final share of programmers. This implies that the distribution of the supply value is highly uneven and considerably more concentrated than the 80/20 standard. Indeed, the last five percent of programmers, or 3,000 programmers, generate over 93% of the supply side value. Similarly, Panel B shows - when accounting for usage - that those last five percent generate over 96% of the demand side value.  In  aggregate,  this  indicates  that  a  very  small  number  of  programmers  are creating the bulk of OSS code that is heavily relied upon by firms to create their own code. In both Panel A and Panel B we can also see a rise in the number of repositories for the last 10-15% of programmers that contribute  to  the  highest  value,  which  implies  that  the  uneven  value  that  is generated by few programmers is not just due to a few highly valuable repositories but by the contributions of this handful of contributors to a substantial number of repositories."], "response": "The analysis of the Lorenz curves in the figures indicates that a small percentage of programmers are responsible for generating the majority of value in both the supply and demand sides of open-source software (OSS) contributions. Specifically, the last five percent of programmers contribute over 93% of the supply side value and over 96% of the demand side value. This suggests a highly uneven distribution of contributions, with a few programmers significantly impacting a large number of repositories.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "What methodology is used to estimate the value of open-source software (OSS) in the context provided, and how does it account for the contributions of individual developers?", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The methodology used to estimate the value of open-source software (OSS) involves a labor market approach that considers both the supply and demand sides. The supply-side value is calculated by estimating the labor replacement cost of each OSS package using the Constructive Cost Model II (COCOMO II). This involves measuring the number of lines of code in each package and estimating the person-hours required to recreate it. The demand-side value is then determined by scaling the supply-side value based on the number of times firms use each package, while accounting for multiple usages within each firm.\n\nTo account for the contributions of individual developers, the methodology examines the inequality in the value creation process. It uses GHTorrent data to identify individual developer contributions in two ways: by their direct OSS value contributions and by the total number of repositories they contributed to. This helps to understand the concentration of contributions and whether a few developers are responsible for most of the value creation.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:**", "contexts": ["Working Paper 24-038", "## -- Figure 4 about here ---\n\nFigure 3 shows the Lorenz curves and the number of repositories that a fraction of programmers has contributed to for the supply side (Panel A) and the demand side (Panel B). A Lorenz curve that  lay  directly  on  the  45  degree  line  would  imply  a  very  even  distribution  of  values  across programmers. Instead, Panel A shows a Lorenz curve as a nearly flat line with a drastic increase for the final share of programmers. This implies that the distribution of the supply value is highly uneven and considerably more concentrated than the 80/20 standard. Indeed, the last five percent of programmers, or 3,000 programmers, generate over 93% of the supply side value. Similarly, Panel B shows - when accounting for usage - that those last five percent generate over 96% of the demand side value.  In  aggregate,  this  indicates  that  a  very  small  number  of  programmers  are creating the bulk of OSS code that is heavily relied upon by firms to create their own code. In both Panel A and Panel B we can also see a rise in the number of repositories for the last 10-15% of programmers that contribute  to  the  highest  value,  which  implies  that  the  uneven  value  that  is generated by few programmers is not just due to a few highly valuable repositories but by the contributions of this handful of contributors to a substantial number of repositories."], "response": "The analysis of Lorenz curves in the study reveals a highly uneven distribution of contributions among programmers in the open-source software (OSS) community. A small fraction of programmers, specifically the last five percent, are responsible for generating the majority of both supply and demand side values. These programmers contribute significantly to a large number of repositories, indicating that their impact is not limited to a few high-value projects but spans across many. This suggests that a small group of contributors plays a crucial role in the OSS ecosystem, providing the bulk of the code that firms rely on for their own development efforts.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "The methodology used to estimate the value of OSS in the provided context is a labor market approach. This approach calculates the replacement value of an OSS package by determining how much it would cost to reproduce the package by hiring a programmer and paying them a competitive market wage. The supply-side value is estimated by counting the lines of code in each unique OSS package and summing these values to obtain the total value. Additionally, the methodology examines the inequality in the value creation process by identifying individual developer contributions through their OSS value contributions and the total number of repositories they contributed to. This helps to understand the concentration of contributions and whether many or few developers contribute to the total value measured.", "contexts": ["## 3.1 Labor market approach\n\nFor the labor market approach, we estimate the value of OSS by calculating the replacement value of a package. We ask how much it would cost to reproduce the package by hiring a programmer and paying them a competitive market wage. To estimate this supply-side value ( \ud835\udc49 ! \"#$%&amp; ) , we take the complete list of OSS packages discussed above, and then count the lines of code in each unique\n\n14 In an alternative version, we use a mixture of a labor and goods market approach that is more closely aligned with Greenstein and Nagle (2014) and Murciano-Goroff, et al (2021). However, applying this method in our setting requires numerous additional assumptions due to data constraints. For simplicity we call it the goods market approach for which we provide the details and statistics, as well as the limitations in Appendix A.\n\npackage. 15 For each unique package,  , we calculate the value and then sum over all these values i to obtain the total value:\n\n<!-- formula-not-decoded -->\n\nIn this calculation, we implicitly do not incorporate any production externalities since we assume that there is no spillover knowledge from one package to the next that would lower the cost of programming. 16 This methodology is similar to that used by other papers that estimate the supply-side costs of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021).\n\nWe then calculate the demand-side value of OSS by incorporating the usage information ( Q) for each package:\n\n<!-- formula-not-decoded -->\n\nHere, we do not incorporate consumption externalities, i.e., we do not allow a benefit to arise for the general public when a package has been created and we further make sure that each firm is only replacing a package they use once, since a replaced package can be used within a firm as a club good (e.g., see Cornes and Sandler, 1996). The value \ud835\udc49 ! \"#$%&amp; reflects the cost to rewrite all widely-used OSS once (e.g., the concept of OSS still exists, but all of these packages needed to be rewritten from scratch), while the value \ud835\udc49 + \"#$%&amp; reflects the cost for each firm that uses one of these OSS packages to pay a developer to rewrite those packages (e.g., OSS itself no longer exists).\n\nFor both the supply and demand models, we obtain the dollar-value for each package ( \ud835\udc43 ( ) via the Constructive Cost Model II, also abbreviated as COCOMO II (Boehm 1984, Boehm et al. 2009). The model has previously been used by the United States Department of Defense to estimate software project costs as well as in prior research estimating the value of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021). It is a highly flexible model that allows us to create non-linear transformations of lines of code to dollar-values. It uses the following modelling equation:\n\n15 We use only the pure lines of code excluding documentation lines and empty lines. Hence, we underestimate the true value of recreating each package.\n\n16 Similar to a representative agent model (e.g. see Williamson 2006), one may think of each package being reproduced by separate programmers who are identical replicas of each other (and therefore have the same skill level, but do not become more efficient via learning).\n\n<!-- formula-not-decoded -->\n\n( (\n\nwhere \ud835\udc3f represents the lines of codes in thousands and E the effort in person-month units for each project  . Consistent with Blind et al. (2021), we use the default parameter values for i \ud835\udefc , \ud835\udefd and \ud835\udf02. The parameters \ud835\udefc \ud835\udefd , are non-linear adjustment factors set to 2.94, and 1.0997 respectively . The parameter \ud835\udf02 is an effort-adjustment factor which can be modified to incorporate subjective assessments of product, hardware, personnel, and project attributes. Since we do not have a prior for each project, we set \ud835\udf02 to the default value of one. To obtain the price ( \ud835\udc43 ( ) of each OSS project, we  then  multiply  the  results  of  equation  (3)  by  the  weighted  global  wage  that  an  average programmer would obtain on the open market. To calculate a global wage, we include the base monthly salaries of software developers from Salary Expert for the top 30 countries in terms of their GitHub developer counts in 2021 (Wachs et al., 2022). 17 The weight of each country is its share of active GitHub contributors over the total contributors in the top 30 countries. We further create bounds by using a low-wage (India) and high-wage (USA) labor market for the wage to better understand how the value would vary by the pool of programmers used to recreate all of OSS. 18", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The methodology for estimating the value of OSS involves calculating the replacement cost of each package by determining the expense of hiring a programmer at a competitive market wage to reproduce the package. This is done by counting the lines of code in each unique OSS package and summing these values to obtain the total supply-side value. Additionally, the approach examines the inequality in value creation by analyzing individual developer contributions, both in terms of their OSS value contributions and the number of repositories they have contributed to. This analysis helps to understand the concentration of contributions and whether the total value is generated by many or few developers.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the methodology described in the context account for the supply-side and demand-side values of Open Source Software (OSS), and what are the key assumptions made in this approach?", "contexts": ["## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below.", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The methodology for assessing the value of Open Source Software (OSS) involves both supply-side and demand-side evaluations. On the supply side, the approach calculates the labor replacement cost of each OSS package using the COCOMO II model to estimate the person-hours required to recreate the software from scratch. This involves measuring the lines of code and applying global wage data to estimate the labor costs. The demand-side value is determined by scaling the supply-side value based on the frequency of use by firms, while accounting for multiple usages within the same firm.\n\nKey assumptions in this approach include the idea that all OSS would need to be recreated by each firm using it if OSS did not exist, and that the concept of OSS would still exist, necessitating only a single rewrite of the code. Additionally, the methodology assumes that the value of OSS can be measured by the labor costs required to recreate it, and that the usage data accurately reflects the demand for OSS.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The methodology described in the context calculates the supply-side value of OSS by estimating the cost to rewrite all widely-used OSS packages using the Constructive Cost Model II (COCOMO II). This model translates lines of code into dollar values, considering the effort in person-month units and using default parameter values for non-linear adjustment factors. The demand-side value is calculated by incorporating usage information for each package, ensuring that each firm replaces a package only once, treating it as a club good. Key assumptions include the exclusion of production and consumption externalities, meaning no spillover knowledge or public benefit is considered, and the assumption that programmers are identical replicas with no efficiency gains from learning. The global wage for programmers is calculated based on the base monthly salaries from the top 30 countries by GitHub developer counts, with bounds created using low-wage (India) and high-wage (USA) labor markets.", "contexts": ["## 3.1 Labor market approach\n\nFor the labor market approach, we estimate the value of OSS by calculating the replacement value of a package. We ask how much it would cost to reproduce the package by hiring a programmer and paying them a competitive market wage. To estimate this supply-side value ( \ud835\udc49 ! \"#$%&amp; ) , we take the complete list of OSS packages discussed above, and then count the lines of code in each unique\n\n14 In an alternative version, we use a mixture of a labor and goods market approach that is more closely aligned with Greenstein and Nagle (2014) and Murciano-Goroff, et al (2021). However, applying this method in our setting requires numerous additional assumptions due to data constraints. For simplicity we call it the goods market approach for which we provide the details and statistics, as well as the limitations in Appendix A.\n\npackage. 15 For each unique package,  , we calculate the value and then sum over all these values i to obtain the total value:\n\n<!-- formula-not-decoded -->\n\nIn this calculation, we implicitly do not incorporate any production externalities since we assume that there is no spillover knowledge from one package to the next that would lower the cost of programming. 16 This methodology is similar to that used by other papers that estimate the supply-side costs of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021).\n\nWe then calculate the demand-side value of OSS by incorporating the usage information ( Q) for each package:\n\n<!-- formula-not-decoded -->\n\nHere, we do not incorporate consumption externalities, i.e., we do not allow a benefit to arise for the general public when a package has been created and we further make sure that each firm is only replacing a package they use once, since a replaced package can be used within a firm as a club good (e.g., see Cornes and Sandler, 1996). The value \ud835\udc49 ! \"#$%&amp; reflects the cost to rewrite all widely-used OSS once (e.g., the concept of OSS still exists, but all of these packages needed to be rewritten from scratch), while the value \ud835\udc49 + \"#$%&amp; reflects the cost for each firm that uses one of these OSS packages to pay a developer to rewrite those packages (e.g., OSS itself no longer exists).\n\nFor both the supply and demand models, we obtain the dollar-value for each package ( \ud835\udc43 ( ) via the Constructive Cost Model II, also abbreviated as COCOMO II (Boehm 1984, Boehm et al. 2009). The model has previously been used by the United States Department of Defense to estimate software project costs as well as in prior research estimating the value of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021). It is a highly flexible model that allows us to create non-linear transformations of lines of code to dollar-values. It uses the following modelling equation:\n\n15 We use only the pure lines of code excluding documentation lines and empty lines. Hence, we underestimate the true value of recreating each package.\n\n16 Similar to a representative agent model (e.g. see Williamson 2006), one may think of each package being reproduced by separate programmers who are identical replicas of each other (and therefore have the same skill level, but do not become more efficient via learning).\n\n<!-- formula-not-decoded -->\n\n( (\n\nwhere \ud835\udc3f represents the lines of codes in thousands and E the effort in person-month units for each project  . Consistent with Blind et al. (2021), we use the default parameter values for i \ud835\udefc , \ud835\udefd and \ud835\udf02. The parameters \ud835\udefc \ud835\udefd , are non-linear adjustment factors set to 2.94, and 1.0997 respectively . The parameter \ud835\udf02 is an effort-adjustment factor which can be modified to incorporate subjective assessments of product, hardware, personnel, and project attributes. Since we do not have a prior for each project, we set \ud835\udf02 to the default value of one. To obtain the price ( \ud835\udc43 ( ) of each OSS project, we  then  multiply  the  results  of  equation  (3)  by  the  weighted  global  wage  that  an  average programmer would obtain on the open market. To calculate a global wage, we include the base monthly salaries of software developers from Salary Expert for the top 30 countries in terms of their GitHub developer counts in 2021 (Wachs et al., 2022). 17 The weight of each country is its share of active GitHub contributors over the total contributors in the top 30 countries. We further create bounds by using a low-wage (India) and high-wage (USA) labor market for the wage to better understand how the value would vary by the pool of programmers used to recreate all of OSS. 18", "## 4. Results\n\nAfter applying the labor market approach using COCOMO II, we obtain global estimates for the value of OSS. To calculate the overall value, we first need the underlying number of lines of code (to calculate the supply-side value) and then the usage statistics (for the demand-side value). Since there may be substantial heterogeneity in value by programming languages, we also show the top programming languages during our investigation period in the year 2020, as discussed above."], "response": "The methodology estimates the supply-side value of open-source software (OSS) by calculating the cost to rewrite all widely-used OSS packages using the Constructive Cost Model II (COCOMO II). This model converts lines of code into dollar values, factoring in the effort required in person-month units and applying default parameter values for non-linear adjustment factors. The demand-side value is determined by incorporating usage information for each package, ensuring that each firm replaces a package only once, treating it as a club good. The approach excludes production and consumption externalities, meaning it does not account for spillover knowledge or public benefits, and assumes programmers are identical replicas without efficiency gains from learning. The global wage for programmers is derived from the base monthly salaries in the top 30 countries by GitHub developer counts, with bounds set using low-wage (India) and high-wage (USA) labor markets.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the study measure the value contributions of developers to open-source software (OSS), and what graphical tool is used to understand the inequality in these contributions?", "contexts": ["## 3.2 Contribution Measurement\n\nTo better understand how value is created and whether it is created equally or unequally, we build up a graphical depiction in three steps. In the first step, we measure the value contributions by developers. In a second step, we obtain a measure for the number of repositories developers contribute to. Finally, we provide a graphical representation of both using the commonly known concept of the Lorenz curve to better understand the extent of inequality in contributions. We describe the details below.\n\nValue Contribution. We calculated the supply and demand values of OSS that each developer contributed. At the repository level, we quantified each developer's proportional work contribution by calculating their share of commits to the total number of commits for a repository. This share was subsequently multiplied with the repository's demand and supply values separately to derive\n\n17 There are 179 counties in Wachs et al. (2022), but the top 30 countries consist of over 88% of the global active contributors with each of the rest having less than 0.6% share. The top 30 countries are listed in Table A2.\n\n18 We choose the high- and low-wage reference countries based on a combination of the number of active GitHub developers and the average annual software developer base wage.\n\nthe value-added contribution of that individual contributor to the repository. Finally, we aggregate the value contributions across all repositories for each developer. The individual value contribution from a unique developer Dev , \ud835\udc49 -+./ , can be expressed as:\n\n<!-- formula-not-decoded -->\n\nwhere \ud835\udf0e ( +./ is the share of commits the focal developer made in repository  , and i \ud835\udc49 (-is the demand or supply value of the entire repository   specified in Equations (1) and (2), with i \ud835\udc57 \u2208 {\ud835\udc37, \ud835\udc46} , and N is the number of repositories in our main sample, i.e. Census and BuiltWith combined.\n\nRepository  Contribution. This  is  simply  the  number  of  repositories  a  given  developer contributes to, and it is expressed as follows:\n\n<!-- formula-not-decoded -->\n\nwhere   is the indicator function equal to 1 when the developer has a non-zero number of commits \ud835\udfd9 to  repository i .  This  measure  entails  the  variety  of  OSS  needs  being  addressed  by  individual developers. Jointly with the value contribution measure, they help us understand whether the value that is being generated overall is concentrated within a small number of developers. It may be generally more desirable for the whole OSS ecosystem and its diversity if individual developers participate in many repositories and not just a few.\n\nMeasuring  the  Dispersion  of  Contributions . To  graphically  examine  the  dispersion  of developer contribution values, we utilized Lorenz curves (Lorenz, 1905), with respect to both demand and supply side values. Lorenz curves are a well-established way to represent inequality and, as such, they allow us to better understand how dispersed developer contributions to OSS within the private economy are. Developers are systematically arranged in ascending order based on their contributions to OSS demand and supply, as delineated in Equation (7). Subsequently, these ranks were normalized to a scale ranging from 0 to 100 percentiles, serving as the x-axis values for the Lorenz Curves. The y-axis, on the other hand, presents the corresponding value contributions \ud835\udc49 -+./ . The graphical representation in the results section will elucidate the degree of inequality pertaining to the value contributions among developers. To supplement the analysis, we\n\nfurther investigated how dispersed the repository contribution, \ud835\udc41 +./ , is by plotting Equation (8). This enables us to ascertain whether any substantial value inequality stems from top contributors predominantly focusing on a narrow subset of exceptionally popular repositories, or alternatively, from their engagement with a broader spectrum of successful repositories.", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The study measures the value contributions of developers to open-source software (OSS) by calculating each developer's proportional work contribution through their share of commits to a repository. This share is then multiplied by the repository's demand and supply values to derive the value-added contribution of the individual developer. The contributions are aggregated across all repositories for each developer. To understand the inequality in these contributions, the study uses Lorenz curves, which are a well-established tool for representing inequality, to graphically examine the dispersion of developer contribution values.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The study measures the value contributions of developers to OSS by calculating each developer's proportional work contribution at the repository level. This is done by determining their share of commits relative to the total number of commits for a repository. This share is then multiplied by the repository's demand and supply values to derive the value-added contribution of the individual contributor. These contributions are aggregated across all repositories for each developer. To understand the inequality in these contributions, the study uses Lorenz curves, which graphically represent the dispersion of developer contributions to OSS demand and supply. The Lorenz curves help illustrate the degree of inequality in value contributions among developers.", "contexts": ["## 3.2 Contribution Measurement\n\nTo better understand how value is created and whether it is created equally or unequally, we build up a graphical depiction in three steps. In the first step, we measure the value contributions by developers. In a second step, we obtain a measure for the number of repositories developers contribute to. Finally, we provide a graphical representation of both using the commonly known concept of the Lorenz curve to better understand the extent of inequality in contributions. We describe the details below.\n\nValue Contribution. We calculated the supply and demand values of OSS that each developer contributed. At the repository level, we quantified each developer's proportional work contribution by calculating their share of commits to the total number of commits for a repository. This share was subsequently multiplied with the repository's demand and supply values separately to derive\n\n17 There are 179 counties in Wachs et al. (2022), but the top 30 countries consist of over 88% of the global active contributors with each of the rest having less than 0.6% share. The top 30 countries are listed in Table A2.\n\n18 We choose the high- and low-wage reference countries based on a combination of the number of active GitHub developers and the average annual software developer base wage.\n\nthe value-added contribution of that individual contributor to the repository. Finally, we aggregate the value contributions across all repositories for each developer. The individual value contribution from a unique developer Dev , \ud835\udc49 -+./ , can be expressed as:\n\n<!-- formula-not-decoded -->\n\nwhere \ud835\udf0e ( +./ is the share of commits the focal developer made in repository  , and i \ud835\udc49 (-is the demand or supply value of the entire repository   specified in Equations (1) and (2), with i \ud835\udc57 \u2208 {\ud835\udc37, \ud835\udc46} , and N is the number of repositories in our main sample, i.e. Census and BuiltWith combined.\n\nRepository  Contribution. This  is  simply  the  number  of  repositories  a  given  developer contributes to, and it is expressed as follows:\n\n<!-- formula-not-decoded -->\n\nwhere   is the indicator function equal to 1 when the developer has a non-zero number of commits \ud835\udfd9 to  repository i .  This  measure  entails  the  variety  of  OSS  needs  being  addressed  by  individual developers. Jointly with the value contribution measure, they help us understand whether the value that is being generated overall is concentrated within a small number of developers. It may be generally more desirable for the whole OSS ecosystem and its diversity if individual developers participate in many repositories and not just a few.\n\nMeasuring  the  Dispersion  of  Contributions . To  graphically  examine  the  dispersion  of developer contribution values, we utilized Lorenz curves (Lorenz, 1905), with respect to both demand and supply side values. Lorenz curves are a well-established way to represent inequality and, as such, they allow us to better understand how dispersed developer contributions to OSS within the private economy are. Developers are systematically arranged in ascending order based on their contributions to OSS demand and supply, as delineated in Equation (7). Subsequently, these ranks were normalized to a scale ranging from 0 to 100 percentiles, serving as the x-axis values for the Lorenz Curves. The y-axis, on the other hand, presents the corresponding value contributions \ud835\udc49 -+./ . The graphical representation in the results section will elucidate the degree of inequality pertaining to the value contributions among developers. To supplement the analysis, we\n\nfurther investigated how dispersed the repository contribution, \ud835\udc41 +./ , is by plotting Equation (8). This enables us to ascertain whether any substantial value inequality stems from top contributors predominantly focusing on a narrow subset of exceptionally popular repositories, or alternatively, from their engagement with a broader spectrum of successful repositories.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The study measures the value contributions of developers to OSS by calculating each developer's proportional work contribution at the repository level. This is done by determining their share of commits relative to the total number of commits for a repository. This share is then multiplied by the repository's demand and supply values to derive the value-added contribution of the individual contributor. These contributions are aggregated across all repositories for each developer. To understand the inequality in these contributions, the study uses Lorenz curves, which graphically represent the dispersion of developer contributions to OSS demand and supply. The Lorenz curves help illustrate the degree of inequality in value contributions among developers.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the labor market approach using COCOMO II, what is the estimated investment required to reproduce all widely-used open-source software (OSS) using programmers from different income countries, and how does this compare to previous studies on the value of OSS?", "contexts": ["## 4. Results\n\nAfter applying the labor market approach using COCOMO II, we obtain global estimates for the value of OSS. To calculate the overall value, we first need the underlying number of lines of code (to calculate the supply-side value) and then the usage statistics (for the demand-side value). Since there may be substantial heterogeneity in value by programming languages, we also show the top programming languages during our investigation period in the year 2020, as discussed above.", "## 3.1 Labor market approach\n\nFor the labor market approach, we estimate the value of OSS by calculating the replacement value of a package. We ask how much it would cost to reproduce the package by hiring a programmer and paying them a competitive market wage. To estimate this supply-side value ( \ud835\udc49 ! \"#$%&amp; ) , we take the complete list of OSS packages discussed above, and then count the lines of code in each unique\n\n14 In an alternative version, we use a mixture of a labor and goods market approach that is more closely aligned with Greenstein and Nagle (2014) and Murciano-Goroff, et al (2021). However, applying this method in our setting requires numerous additional assumptions due to data constraints. For simplicity we call it the goods market approach for which we provide the details and statistics, as well as the limitations in Appendix A.\n\npackage. 15 For each unique package,  , we calculate the value and then sum over all these values i to obtain the total value:\n\n<!-- formula-not-decoded -->\n\nIn this calculation, we implicitly do not incorporate any production externalities since we assume that there is no spillover knowledge from one package to the next that would lower the cost of programming. 16 This methodology is similar to that used by other papers that estimate the supply-side costs of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021).\n\nWe then calculate the demand-side value of OSS by incorporating the usage information ( Q) for each package:\n\n<!-- formula-not-decoded -->\n\nHere, we do not incorporate consumption externalities, i.e., we do not allow a benefit to arise for the general public when a package has been created and we further make sure that each firm is only replacing a package they use once, since a replaced package can be used within a firm as a club good (e.g., see Cornes and Sandler, 1996). The value \ud835\udc49 ! \"#$%&amp; reflects the cost to rewrite all widely-used OSS once (e.g., the concept of OSS still exists, but all of these packages needed to be rewritten from scratch), while the value \ud835\udc49 + \"#$%&amp; reflects the cost for each firm that uses one of these OSS packages to pay a developer to rewrite those packages (e.g., OSS itself no longer exists).\n\nFor both the supply and demand models, we obtain the dollar-value for each package ( \ud835\udc43 ( ) via the Constructive Cost Model II, also abbreviated as COCOMO II (Boehm 1984, Boehm et al. 2009). The model has previously been used by the United States Department of Defense to estimate software project costs as well as in prior research estimating the value of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021). It is a highly flexible model that allows us to create non-linear transformations of lines of code to dollar-values. It uses the following modelling equation:\n\n15 We use only the pure lines of code excluding documentation lines and empty lines. Hence, we underestimate the true value of recreating each package.\n\n16 Similar to a representative agent model (e.g. see Williamson 2006), one may think of each package being reproduced by separate programmers who are identical replicas of each other (and therefore have the same skill level, but do not become more efficient via learning).\n\n<!-- formula-not-decoded -->\n\n( (\n\nwhere \ud835\udc3f represents the lines of codes in thousands and E the effort in person-month units for each project  . Consistent with Blind et al. (2021), we use the default parameter values for i \ud835\udefc , \ud835\udefd and \ud835\udf02. The parameters \ud835\udefc \ud835\udefd , are non-linear adjustment factors set to 2.94, and 1.0997 respectively . The parameter \ud835\udf02 is an effort-adjustment factor which can be modified to incorporate subjective assessments of product, hardware, personnel, and project attributes. Since we do not have a prior for each project, we set \ud835\udf02 to the default value of one. To obtain the price ( \ud835\udc43 ( ) of each OSS project, we  then  multiply  the  results  of  equation  (3)  by  the  weighted  global  wage  that  an  average programmer would obtain on the open market. To calculate a global wage, we include the base monthly salaries of software developers from Salary Expert for the top 30 countries in terms of their GitHub developer counts in 2021 (Wachs et al., 2022). 17 The weight of each country is its share of active GitHub contributors over the total contributors in the top 30 countries. We further create bounds by using a low-wage (India) and high-wage (USA) labor market for the wage to better understand how the value would vary by the pool of programmers used to recreate all of OSS. 18"], "response": "The labor market approach using COCOMO II estimates the investment required to reproduce all widely-used open-source software (OSS) by calculating the replacement value of each package. This involves determining the cost to hire programmers at competitive market wages to rewrite the software. The approach uses a global wage calculation, which includes base monthly salaries of software developers from the top 30 countries by GitHub developer counts. The study creates bounds by considering low-wage (India) and high-wage (USA) labor markets to understand how the value varies based on the pool of programmers. This method provides a comprehensive estimate of the investment needed, and it aligns with previous studies that have used similar methodologies to estimate the supply-side costs of OSS. However, the specific comparison to previous studies in terms of numerical values or differences in estimates is not detailed in the provided information.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The estimated investment required to reproduce all widely-used OSS using programmers at the average developer wage from India is $1.22 billion. If using the average developer wage from the United States, the investment would be $6.22 billion. Using a pool of programmers from across the world, weighed based on existing geographic contributions to OSS, the investment would be $4.15 billion. Previous studies, such as those by Robbins et al. (2021) and Blind et al. (2021), estimated the value of OSS created in the US to be $38 billion in 2019 and that created in the EU to be \u20ac1 billion in 2018. Wachs et al. (2022) indicated that roughly 50% of OSS contributions come from the US and EU combined, leading to a global value estimate of $78 billion.", "contexts": ["## --- Table 1 about here ---\n\nTable  1  shows  descriptive  statistics  from  both  data  sets  separately.  The  inward-facing Census  (Panel  A)  contains  just  over  261.7  million  lines  of  code  with  72%  of  the  lines  being attributable to the top programming languages. The average package includes 142 thousand lines of code with a slightly lower average of 113 thousand lines of code for the subset of top languages. When considering the demand (usage) side, we observe that the Census packages were used over 2.7 million times while 92% of this usage is attributable to the top languages. The average package was used 1,472.4 times with a higher usage of around 1,497.5 for the top  languages.  For  the outward-facing  BuiltWith  data  we  find  similar  patterns,  but  at  different  levels.  The  packages included from BuiltWith include over 82 million lines of code, 71% of which are attributable to the  top  programming  languages.  The  average  package  within  the  BuiltWith  sample  has  111 thousand  lines  of  code  with  a  lower  average  of  around  80  thousand  lines  of  code  for  the  top languages. This is because our BuiltWith data primarily consists of JavaScript-based packages, which are often smaller than packages written in other languages. BuiltWith packages were used over 142 thousand times where 99.97% were attributable to the top languages. Next, we used these raw observations to calculate the value of all OSS through the labor market approach and estimated the value created from the supply and demand side.\n\n--- Table 2 about here ---\n\nTable 2 shows the estimates for the value of OSS based on the firm-relevant joint Census and BuiltWith sample. All estimates in Table 2 are based only on software languages classified in bucket  1  from  Table  A1,  which  are  the  most  likely  to  be  written  by  a  human  rather  than  a machine. 19 The first column contains estimates with wages from a low income country (India), the global  average  wage,  and  a  high  income  country  (United  States  of  America),  respectively  (as described above). To reproduce all widely-used OSS once (e.g., the idea of OSS still exists, but all current OSS is deleted and needs to be coded from scratch), using programmers at the average developer wage from India, it would require an investment of $1.22 billion. In contrast, if we use the average developer wage from the United States, then reproducing all widely-used OSS would require  an  investment  of  $6.22  billion.  Using  a  pool  of  programmers  from  across  the  world, weighed based on the existing geographic contributions to OSS as discussed above, would lead to an investment somewhere in between the low and high-income country, $4.15 billion. It is useful to compare these numbers to those from similar studies to understand differences in valuing all OSS (prior studies) versus that which is widely used (our study). Robbins et al. (2021) and Blind et al. (2021) use a method similar to ours and estimate that the value of OSS created in the US is $38 billion in 2019 and that created in the EU is \u20ac1 billion in 2018. Wachs et al. (2022) show that roughly 50% of OSS contributions come from the US and EU combined. In aggregate, that would lead these studies to give a global value of OSS of $78 billion. Thus, our middle estimate of a supply-side value of $4.15 billion for only firm-oriented and widely used OSS is a credible lowerbound and highlights the higher estimations of the total of supply-side value of OSS when not considering whether or not a given OSS package is widely used. This further indicates that the supply-side value of the most widely used OSS is roughly 5.5% of the supply-side value of all OSS.\n\nThe second column in Table 2 contains the demand side estimates based on the labor market approach. We find that if firms had to recreate all OSS packages they used (e.g., OSS itself no longer existed and every firm that used an OSS package had to recreate it), then the entire cost would amount to between $2.59 trillion to $13.18 trillion using labor from the low wage or high wage country only, respectively. A pool of programmers across the globe could recreate all of OSS that is being widely used for a cost of approximately $8.80 trillion. Interpreting this number is\n\n19 Tables in the appendix show the equivalent values from Table 2 when including software language buckets 1 and 2 (Table A3) and all three software language buckets (Table A4).\n\nslightly more complicated but still feasible. According to a Statista (2023) report, global software revenue in 2020 (the same year as our data) was $531.7 billion. However, this represents a flow, not a stock, of software. Relying on government estimates that software fully depreciates over three years, we can do a back of the envelope calculation and consider the purchase value of the full stock of prepackaged software used in 2020 as the aggregate of that sold from 2018 to 2020, which is $1.54 trillion. Further, this represents only the expenditure on prepackaged software and does  not  include  custom  purchased  or  in-house  developed  software.  Here,  the  best  obtainable estimates of private-sector investment in software overall come from the United States National Income and Product Accounts data (NIPA 2023). In 2020, the national account data shows that in the  US,  private  firms  spent  $479.2  billion  on  software,  of  which  45%  ($215.5  billion)  was prepackaged. If we assume this is a consistent ratio for the rest of the world, then the total amount firms spent on software being used in 2020 was $3.4 trillion (= $1.54 trillion/0.45). Combining this rough estimate with the demand side estimate of the value of OSS based on an average global wage ($8.8 trillion), this indicates firms would spend $12.2 trillion (=$3.4 trillion + $8.8 trillion), or three and a half times what they currently spend if they needed to pay in-house developers to write the OSS that they currently use for free.", "## 3.1 Labor market approach\n\nFor the labor market approach, we estimate the value of OSS by calculating the replacement value of a package. We ask how much it would cost to reproduce the package by hiring a programmer and paying them a competitive market wage. To estimate this supply-side value ( \ud835\udc49 ! \"#$%&amp; ) , we take the complete list of OSS packages discussed above, and then count the lines of code in each unique\n\n14 In an alternative version, we use a mixture of a labor and goods market approach that is more closely aligned with Greenstein and Nagle (2014) and Murciano-Goroff, et al (2021). However, applying this method in our setting requires numerous additional assumptions due to data constraints. For simplicity we call it the goods market approach for which we provide the details and statistics, as well as the limitations in Appendix A.\n\npackage. 15 For each unique package,  , we calculate the value and then sum over all these values i to obtain the total value:\n\n<!-- formula-not-decoded -->\n\nIn this calculation, we implicitly do not incorporate any production externalities since we assume that there is no spillover knowledge from one package to the next that would lower the cost of programming. 16 This methodology is similar to that used by other papers that estimate the supply-side costs of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021).\n\nWe then calculate the demand-side value of OSS by incorporating the usage information ( Q) for each package:\n\n<!-- formula-not-decoded -->\n\nHere, we do not incorporate consumption externalities, i.e., we do not allow a benefit to arise for the general public when a package has been created and we further make sure that each firm is only replacing a package they use once, since a replaced package can be used within a firm as a club good (e.g., see Cornes and Sandler, 1996). The value \ud835\udc49 ! \"#$%&amp; reflects the cost to rewrite all widely-used OSS once (e.g., the concept of OSS still exists, but all of these packages needed to be rewritten from scratch), while the value \ud835\udc49 + \"#$%&amp; reflects the cost for each firm that uses one of these OSS packages to pay a developer to rewrite those packages (e.g., OSS itself no longer exists).\n\nFor both the supply and demand models, we obtain the dollar-value for each package ( \ud835\udc43 ( ) via the Constructive Cost Model II, also abbreviated as COCOMO II (Boehm 1984, Boehm et al. 2009). The model has previously been used by the United States Department of Defense to estimate software project costs as well as in prior research estimating the value of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021). It is a highly flexible model that allows us to create non-linear transformations of lines of code to dollar-values. It uses the following modelling equation:\n\n15 We use only the pure lines of code excluding documentation lines and empty lines. Hence, we underestimate the true value of recreating each package.\n\n16 Similar to a representative agent model (e.g. see Williamson 2006), one may think of each package being reproduced by separate programmers who are identical replicas of each other (and therefore have the same skill level, but do not become more efficient via learning).\n\n<!-- formula-not-decoded -->\n\n( (\n\nwhere \ud835\udc3f represents the lines of codes in thousands and E the effort in person-month units for each project  . Consistent with Blind et al. (2021), we use the default parameter values for i \ud835\udefc , \ud835\udefd and \ud835\udf02. The parameters \ud835\udefc \ud835\udefd , are non-linear adjustment factors set to 2.94, and 1.0997 respectively . The parameter \ud835\udf02 is an effort-adjustment factor which can be modified to incorporate subjective assessments of product, hardware, personnel, and project attributes. Since we do not have a prior for each project, we set \ud835\udf02 to the default value of one. To obtain the price ( \ud835\udc43 ( ) of each OSS project, we  then  multiply  the  results  of  equation  (3)  by  the  weighted  global  wage  that  an  average programmer would obtain on the open market. To calculate a global wage, we include the base monthly salaries of software developers from Salary Expert for the top 30 countries in terms of their GitHub developer counts in 2021 (Wachs et al., 2022). 17 The weight of each country is its share of active GitHub contributors over the total contributors in the top 30 countries. We further create bounds by using a low-wage (India) and high-wage (USA) labor market for the wage to better understand how the value would vary by the pool of programmers used to recreate all of OSS. 18"], "response": "The estimated investment required to reproduce all widely-used OSS using programmers at the average developer wage from India is $1.22 billion. If using the average developer wage from the United States, the investment would be $6.22 billion. Using a pool of programmers from across the world, weighed based on existing geographic contributions to OSS, the investment would be $4.15 billion. Previous studies, such as those by Robbins et al. and Blind et al., estimated the value of OSS created in the US to be $38 billion in 2019 and that created in the EU to be \u20ac1 billion in 2018. Wachs et al. indicated that roughly 50% of OSS contributions come from the US and EU combined, leading to a global value estimate of $78 billion.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the context provided, how does the estimated supply-side value of widely used OSS compare to the total supply-side value of all OSS, and what does this indicate about the significance of widely used OSS?", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The estimated supply-side value of widely used open source software (OSS) ranges from $1.22 billion to $6.22 billion. This value is derived from considering the labor replacement cost of recreating widely used OSS packages. The focus on widely used OSS, rather than all OSS, indicates that these packages hold significant importance due to their extensive deployment and usage by firms. This approach helps to avoid overestimation by excluding OSS projects that are not practically used, thereby highlighting the critical role and substantial value of widely used OSS in the economy.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The estimated supply-side value of widely used OSS is $4.15 billion, which is approximately 5.5% of the total supply-side value of all OSS, estimated at $78 billion. This indicates that while widely used OSS represents a small fraction of the total supply-side value, it still holds significant importance due to its firm-oriented nature and widespread usage.", "contexts": ["## --- Table 1 about here ---\n\nTable  1  shows  descriptive  statistics  from  both  data  sets  separately.  The  inward-facing Census  (Panel  A)  contains  just  over  261.7  million  lines  of  code  with  72%  of  the  lines  being attributable to the top programming languages. The average package includes 142 thousand lines of code with a slightly lower average of 113 thousand lines of code for the subset of top languages. When considering the demand (usage) side, we observe that the Census packages were used over 2.7 million times while 92% of this usage is attributable to the top languages. The average package was used 1,472.4 times with a higher usage of around 1,497.5 for the top  languages.  For  the outward-facing  BuiltWith  data  we  find  similar  patterns,  but  at  different  levels.  The  packages included from BuiltWith include over 82 million lines of code, 71% of which are attributable to the  top  programming  languages.  The  average  package  within  the  BuiltWith  sample  has  111 thousand  lines  of  code  with  a  lower  average  of  around  80  thousand  lines  of  code  for  the  top languages. This is because our BuiltWith data primarily consists of JavaScript-based packages, which are often smaller than packages written in other languages. BuiltWith packages were used over 142 thousand times where 99.97% were attributable to the top languages. Next, we used these raw observations to calculate the value of all OSS through the labor market approach and estimated the value created from the supply and demand side.\n\n--- Table 2 about here ---\n\nTable 2 shows the estimates for the value of OSS based on the firm-relevant joint Census and BuiltWith sample. All estimates in Table 2 are based only on software languages classified in bucket  1  from  Table  A1,  which  are  the  most  likely  to  be  written  by  a  human  rather  than  a machine. 19 The first column contains estimates with wages from a low income country (India), the global  average  wage,  and  a  high  income  country  (United  States  of  America),  respectively  (as described above). To reproduce all widely-used OSS once (e.g., the idea of OSS still exists, but all current OSS is deleted and needs to be coded from scratch), using programmers at the average developer wage from India, it would require an investment of $1.22 billion. In contrast, if we use the average developer wage from the United States, then reproducing all widely-used OSS would require  an  investment  of  $6.22  billion.  Using  a  pool  of  programmers  from  across  the  world, weighed based on the existing geographic contributions to OSS as discussed above, would lead to an investment somewhere in between the low and high-income country, $4.15 billion. It is useful to compare these numbers to those from similar studies to understand differences in valuing all OSS (prior studies) versus that which is widely used (our study). Robbins et al. (2021) and Blind et al. (2021) use a method similar to ours and estimate that the value of OSS created in the US is $38 billion in 2019 and that created in the EU is \u20ac1 billion in 2018. Wachs et al. (2022) show that roughly 50% of OSS contributions come from the US and EU combined. In aggregate, that would lead these studies to give a global value of OSS of $78 billion. Thus, our middle estimate of a supply-side value of $4.15 billion for only firm-oriented and widely used OSS is a credible lowerbound and highlights the higher estimations of the total of supply-side value of OSS when not considering whether or not a given OSS package is widely used. This further indicates that the supply-side value of the most widely used OSS is roughly 5.5% of the supply-side value of all OSS.\n\nThe second column in Table 2 contains the demand side estimates based on the labor market approach. We find that if firms had to recreate all OSS packages they used (e.g., OSS itself no longer existed and every firm that used an OSS package had to recreate it), then the entire cost would amount to between $2.59 trillion to $13.18 trillion using labor from the low wage or high wage country only, respectively. A pool of programmers across the globe could recreate all of OSS that is being widely used for a cost of approximately $8.80 trillion. Interpreting this number is\n\n19 Tables in the appendix show the equivalent values from Table 2 when including software language buckets 1 and 2 (Table A3) and all three software language buckets (Table A4).\n\nslightly more complicated but still feasible. According to a Statista (2023) report, global software revenue in 2020 (the same year as our data) was $531.7 billion. However, this represents a flow, not a stock, of software. Relying on government estimates that software fully depreciates over three years, we can do a back of the envelope calculation and consider the purchase value of the full stock of prepackaged software used in 2020 as the aggregate of that sold from 2018 to 2020, which is $1.54 trillion. Further, this represents only the expenditure on prepackaged software and does  not  include  custom  purchased  or  in-house  developed  software.  Here,  the  best  obtainable estimates of private-sector investment in software overall come from the United States National Income and Product Accounts data (NIPA 2023). In 2020, the national account data shows that in the  US,  private  firms  spent  $479.2  billion  on  software,  of  which  45%  ($215.5  billion)  was prepackaged. If we assume this is a consistent ratio for the rest of the world, then the total amount firms spent on software being used in 2020 was $3.4 trillion (= $1.54 trillion/0.45). Combining this rough estimate with the demand side estimate of the value of OSS based on an average global wage ($8.8 trillion), this indicates firms would spend $12.2 trillion (=$3.4 trillion + $8.8 trillion), or three and a half times what they currently spend if they needed to pay in-house developers to write the OSS that they currently use for free.", "## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy."], "response": "The estimated supply-side value of widely used OSS is $4.15 billion, which is about 5.5% of the total supply-side value of all OSS, estimated at $78 billion. This suggests that while widely used OSS constitutes a small portion of the total supply-side value, it remains significant due to its firm-oriented nature and extensive usage.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the context provided, which programming language has the highest demand-side value according to the BuiltWith dataset, and how does this compare to its supply-side value?", "contexts": ["## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there.", "## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python."], "response": "According to the BuiltWith dataset, JavaScript has the highest demand-side value. On the supply side, JavaScript also contributes significantly, being the primary driver of value in the BuiltWith sample. This indicates that JavaScript holds a strong position in both supply and demand within the BuiltWith dataset.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** According to the BuiltWith dataset, JavaScript has the highest demand-side value. This is consistent with its supply-side value, where JavaScript also contributes the most value. This alignment serves as a sanity check since the BuiltWith sample focused on JavaScript packages to proxy for OSS. TypeScript follows JavaScript in both demand and supply-side values, reflecting its role as a superset of JavaScript.", "contexts": ["## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there.", "## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python."], "response": "The statement is accurate. In the BuiltWith dataset, JavaScript indeed has the highest demand-side value, which aligns with its supply-side value where it also contributes the most. This consistency is expected since the BuiltWith sample focused on JavaScript packages. TypeScript follows JavaScript in both demand and supply-side values, reflecting its close relationship as a superset of JavaScript.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the study's findings, which industry has the highest demand-side value for open source software (OSS), and how does this compare to other industries?", "contexts": ["## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy.", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The study does not specify which particular industry has the highest demand-side value for open source software (OSS). It highlights substantial heterogeneity in the value across different industries but does not provide a detailed comparison or ranking of industries in terms of their demand-side value for OSS.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The industry with the highest demand-side value for open source software (OSS) is 'Professional, Scientific, and Technical Services,' with a usage value of around $43 billion. This is higher compared to 'Retail Trade' and 'Administrative and Support and Waste Management and Remediation Services,' which have usage values of $36 billion and $35 billion, respectively. In contrast, industries such as 'Mining, Quarrying, and Oil and Gas Extraction,' 'Utilities,' and 'Agriculture, Forestry, Fishing, and Hunting' constitute a much smaller portion of the demand-side value, reflecting the lesser role of software in these classical non-service sector industries.", "contexts": ["## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy.", "## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there."], "response": "The industry with the highest demand-side value for open source software (OSS) is 'Professional, Scientific, and Technical Services,' with a usage value of around $43 billion. This is higher compared to 'Retail Trade' and 'Administrative and Support and Waste Management and Remediation Services,' which have usage values of $36 billion and $35 billion, respectively. In contrast, industries such as 'Mining, Quarrying, and Oil and Gas Extraction,' 'Utilities,' and 'Agriculture, Forestry, Fishing, and Hunting' constitute a much smaller portion of the demand-side value, reflecting the lesser role of software in these classical non-service sector industries.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the demand-side value of Open Source Software (OSS) vary across different programming languages and industries, and what percentage of this value is generated by a small group of programmers?", "contexts": ["## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy.", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The demand-side value of Open Source Software (OSS) shows substantial variation across different programming languages and industries. The top six programming languages account for 84% of the demand-side value. Additionally, over 95% of the demand-side value is generated by only five percent of programmers, indicating that a small group of programmers contributes significantly to the overall value.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The demand-side value of OSS varies significantly across different programming languages and industries. The top six programming languages account for 84% of the demand-side value. Additionally, over 95% of the demand-side value is generated by only five percent of programmers. These high-value programmers contribute to a wide range of projects, not just a few widely used ones, indicating substantial heterogeneity in value contributions by programmers themselves.", "contexts": ["## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there.", "## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python."], "response": "The demand-side value of open-source software (OSS) shows considerable variation across programming languages and industries. The top programming languages, such as Go, JavaScript, and TypeScript, contribute significantly to this value, with Go leading in usage-generated value. Industries like 'Professional, Scientific, and Technical Services' and 'Retail Trade' receive substantial benefits from OSS, while traditional non-service sectors like 'Mining' and 'Utilities' see less impact. This indicates that the value contributions from programmers are diverse, spanning numerous projects rather than being concentrated in a few popular ones.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: Based on the context provided, what is the significance of open source software in the context of startup funding, as discussed in the work by Conti, Peukert, and Roche (2023)?", "contexts": ["## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1).", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "Open source software plays a significant role in startup funding by potentially enhancing the attractiveness of startups to investors. The work by Conti, Peukert, and Roche (2023) suggests that open sourcing can be a strategic move for startups, as it may signal innovation and transparency, thereby increasing investor confidence and interest. This approach can help startups secure funding by demonstrating their commitment to open collaboration and technological advancement.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: The work by Conti, Peukert, and Roche (2023) titled \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub\" suggests that open source software plays a significant role in startup funding. It implies that open sourcing can be a strategic move for startups to attract investors, as it may enhance transparency, collaboration, and innovation, thereby potentially increasing the startup's appeal to investors.", "contexts": ["## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1).", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The work by Conti, Peukert, and Roche suggests that open source software can be strategically beneficial for startups seeking funding. By open sourcing, startups may improve transparency and foster collaboration, which can enhance innovation and make them more attractive to investors.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: Based on the context provided, how does the article by Lifshitz-Assaf and Nagle (2021) in the Harvard Business Review Digital Articles contribute to the understanding of the role of open source in the digital economy?", "contexts": ["## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1).", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The article by Lifshitz-Assaf and Nagle (2021) in the Harvard Business Review Digital Articles emphasizes the critical role of open source software in the digital economy. It highlights the importance of measuring the value created by open source software to ensure its sustainability and continued contribution to economic growth. The article warns that without proper measurement and investment, open source software may face challenges similar to the \"tragedy of the commons,\" where resources are overused but underinvested in. This insight underscores the need for active participation and support from users and policymakers to maintain the health of the open source ecosystem, which is vital for the digital economy's future.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: The article by Lifshitz-Assaf and Nagle (2021) in the Harvard Business Review Digital Articles discusses the critical role that open source software plays in the digital economy and offers insights on how to protect it. This contribution is significant as it highlights the foundational nature of open source in driving digital innovation and economic activities, while also addressing the challenges and strategies for safeguarding its sustainability and security.", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1)."], "response": "The article by Lifshitz-Assaf and Nagle (2021) in the Harvard Business Review Digital Articles emphasizes the essential role of open source software in the digital economy. It underscores the importance of open source as a key driver of digital innovation and economic activities. The article also discusses the challenges associated with maintaining the sustainability and security of open source software and offers strategies to protect this vital resource.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the context provided, how has open source software been linked to firm productivity, and which study specifically addresses this relationship?", "contexts": ["## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1).", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The value of open source software (OSS) in relation to firm productivity is highlighted in the context. It is noted that OSS contributes significantly to the modern economy by providing a cost-saving and productivity enhancement. The study by Nagle (2019a) specifically addresses the relationship between open source software and firm productivity, indicating that OSS plays a crucial role in enhancing productivity within firms.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** Open source software has been linked to firm productivity through its potential to enhance innovation, reduce costs, and improve software quality. The study that specifically addresses this relationship is by Nagle, F. (2019a), titled \"Open source software and firm productivity,\" published in Management Science, 65(3), 1191-1215. This study explores how the adoption and integration of open source software can contribute to increased productivity within firms.", "contexts": ["## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1).", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "Open source software is associated with firm productivity by fostering innovation, lowering costs, and enhancing software quality. The study by Nagle, F. (2019a) in Management Science examines how open source software adoption and integration can lead to productivity gains in firms.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the data provided in Table 2, what is the estimated labor-market value of open source software in the high wage scenario, and how does it compare to the low wage scenario?", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1)."], "response": "In the high wage scenario, the estimated labor-market value of open source software is $6.22 trillion for labor supply and $13.18 trillion for labor demand. In comparison, the low wage scenario estimates the labor-market value at $1.22 trillion for labor supply and $2.59 trillion for labor demand. This indicates that the high wage scenario values are significantly higher than those in the low wage scenario.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** In the high wage scenario, the estimated labor-market value of open source software is $6.22 billion for labor supply and $13.18 trillion for labor demand. In comparison, the low wage scenario estimates the labor-market value at $1.22 billion for labor supply and $2.59 trillion for labor demand. This indicates that the labor-market value is significantly higher in the high wage scenario compared to the low wage scenario.", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## --- Table 1 about here ---\n\nTable  1  shows  descriptive  statistics  from  both  data  sets  separately.  The  inward-facing Census  (Panel  A)  contains  just  over  261.7  million  lines  of  code  with  72%  of  the  lines  being attributable to the top programming languages. The average package includes 142 thousand lines of code with a slightly lower average of 113 thousand lines of code for the subset of top languages. When considering the demand (usage) side, we observe that the Census packages were used over 2.7 million times while 92% of this usage is attributable to the top languages. The average package was used 1,472.4 times with a higher usage of around 1,497.5 for the top  languages.  For  the outward-facing  BuiltWith  data  we  find  similar  patterns,  but  at  different  levels.  The  packages included from BuiltWith include over 82 million lines of code, 71% of which are attributable to the  top  programming  languages.  The  average  package  within  the  BuiltWith  sample  has  111 thousand  lines  of  code  with  a  lower  average  of  around  80  thousand  lines  of  code  for  the  top languages. This is because our BuiltWith data primarily consists of JavaScript-based packages, which are often smaller than packages written in other languages. BuiltWith packages were used over 142 thousand times where 99.97% were attributable to the top languages. Next, we used these raw observations to calculate the value of all OSS through the labor market approach and estimated the value created from the supply and demand side.\n\n--- Table 2 about here ---\n\nTable 2 shows the estimates for the value of OSS based on the firm-relevant joint Census and BuiltWith sample. All estimates in Table 2 are based only on software languages classified in bucket  1  from  Table  A1,  which  are  the  most  likely  to  be  written  by  a  human  rather  than  a machine. 19 The first column contains estimates with wages from a low income country (India), the global  average  wage,  and  a  high  income  country  (United  States  of  America),  respectively  (as described above). To reproduce all widely-used OSS once (e.g., the idea of OSS still exists, but all current OSS is deleted and needs to be coded from scratch), using programmers at the average developer wage from India, it would require an investment of $1.22 billion. In contrast, if we use the average developer wage from the United States, then reproducing all widely-used OSS would require  an  investment  of  $6.22  billion.  Using  a  pool  of  programmers  from  across  the  world, weighed based on the existing geographic contributions to OSS as discussed above, would lead to an investment somewhere in between the low and high-income country, $4.15 billion. It is useful to compare these numbers to those from similar studies to understand differences in valuing all OSS (prior studies) versus that which is widely used (our study). Robbins et al. (2021) and Blind et al. (2021) use a method similar to ours and estimate that the value of OSS created in the US is $38 billion in 2019 and that created in the EU is \u20ac1 billion in 2018. Wachs et al. (2022) show that roughly 50% of OSS contributions come from the US and EU combined. In aggregate, that would lead these studies to give a global value of OSS of $78 billion. Thus, our middle estimate of a supply-side value of $4.15 billion for only firm-oriented and widely used OSS is a credible lowerbound and highlights the higher estimations of the total of supply-side value of OSS when not considering whether or not a given OSS package is widely used. This further indicates that the supply-side value of the most widely used OSS is roughly 5.5% of the supply-side value of all OSS.\n\nThe second column in Table 2 contains the demand side estimates based on the labor market approach. We find that if firms had to recreate all OSS packages they used (e.g., OSS itself no longer existed and every firm that used an OSS package had to recreate it), then the entire cost would amount to between $2.59 trillion to $13.18 trillion using labor from the low wage or high wage country only, respectively. A pool of programmers across the globe could recreate all of OSS that is being widely used for a cost of approximately $8.80 trillion. Interpreting this number is\n\n19 Tables in the appendix show the equivalent values from Table 2 when including software language buckets 1 and 2 (Table A3) and all three software language buckets (Table A4).\n\nslightly more complicated but still feasible. According to a Statista (2023) report, global software revenue in 2020 (the same year as our data) was $531.7 billion. However, this represents a flow, not a stock, of software. Relying on government estimates that software fully depreciates over three years, we can do a back of the envelope calculation and consider the purchase value of the full stock of prepackaged software used in 2020 as the aggregate of that sold from 2018 to 2020, which is $1.54 trillion. Further, this represents only the expenditure on prepackaged software and does  not  include  custom  purchased  or  in-house  developed  software.  Here,  the  best  obtainable estimates of private-sector investment in software overall come from the United States National Income and Product Accounts data (NIPA 2023). In 2020, the national account data shows that in the  US,  private  firms  spent  $479.2  billion  on  software,  of  which  45%  ($215.5  billion)  was prepackaged. If we assume this is a consistent ratio for the rest of the world, then the total amount firms spent on software being used in 2020 was $3.4 trillion (= $1.54 trillion/0.45). Combining this rough estimate with the demand side estimate of the value of OSS based on an average global wage ($8.8 trillion), this indicates firms would spend $12.2 trillion (=$3.4 trillion + $8.8 trillion), or three and a half times what they currently spend if they needed to pay in-house developers to write the OSS that they currently use for free."], "response": "In the high wage scenario, the estimated labor-market value of open source software is $9.59 billion for labor supply and $17.91 trillion for labor demand. In comparison, the low wage scenario estimates the labor-market value at $1.88 billion for labor supply and $3.52 trillion for labor demand. This indicates that the labor-market value is significantly higher in the high wage scenario compared to the low wage scenario.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the labor-market value of open source, what is the estimated difference in labor demand between the low wage and high wage scenarios?", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## 3.1 Labor market approach\n\nFor the labor market approach, we estimate the value of OSS by calculating the replacement value of a package. We ask how much it would cost to reproduce the package by hiring a programmer and paying them a competitive market wage. To estimate this supply-side value ( \ud835\udc49 ! \"#$%&amp; ) , we take the complete list of OSS packages discussed above, and then count the lines of code in each unique\n\n14 In an alternative version, we use a mixture of a labor and goods market approach that is more closely aligned with Greenstein and Nagle (2014) and Murciano-Goroff, et al (2021). However, applying this method in our setting requires numerous additional assumptions due to data constraints. For simplicity we call it the goods market approach for which we provide the details and statistics, as well as the limitations in Appendix A.\n\npackage. 15 For each unique package,  , we calculate the value and then sum over all these values i to obtain the total value:\n\n<!-- formula-not-decoded -->\n\nIn this calculation, we implicitly do not incorporate any production externalities since we assume that there is no spillover knowledge from one package to the next that would lower the cost of programming. 16 This methodology is similar to that used by other papers that estimate the supply-side costs of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021).\n\nWe then calculate the demand-side value of OSS by incorporating the usage information ( Q) for each package:\n\n<!-- formula-not-decoded -->\n\nHere, we do not incorporate consumption externalities, i.e., we do not allow a benefit to arise for the general public when a package has been created and we further make sure that each firm is only replacing a package they use once, since a replaced package can be used within a firm as a club good (e.g., see Cornes and Sandler, 1996). The value \ud835\udc49 ! \"#$%&amp; reflects the cost to rewrite all widely-used OSS once (e.g., the concept of OSS still exists, but all of these packages needed to be rewritten from scratch), while the value \ud835\udc49 + \"#$%&amp; reflects the cost for each firm that uses one of these OSS packages to pay a developer to rewrite those packages (e.g., OSS itself no longer exists).\n\nFor both the supply and demand models, we obtain the dollar-value for each package ( \ud835\udc43 ( ) via the Constructive Cost Model II, also abbreviated as COCOMO II (Boehm 1984, Boehm et al. 2009). The model has previously been used by the United States Department of Defense to estimate software project costs as well as in prior research estimating the value of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021). It is a highly flexible model that allows us to create non-linear transformations of lines of code to dollar-values. It uses the following modelling equation:\n\n15 We use only the pure lines of code excluding documentation lines and empty lines. Hence, we underestimate the true value of recreating each package.\n\n16 Similar to a representative agent model (e.g. see Williamson 2006), one may think of each package being reproduced by separate programmers who are identical replicas of each other (and therefore have the same skill level, but do not become more efficient via learning).\n\n<!-- formula-not-decoded -->\n\n( (\n\nwhere \ud835\udc3f represents the lines of codes in thousands and E the effort in person-month units for each project  . Consistent with Blind et al. (2021), we use the default parameter values for i \ud835\udefc , \ud835\udefd and \ud835\udf02. The parameters \ud835\udefc \ud835\udefd , are non-linear adjustment factors set to 2.94, and 1.0997 respectively . The parameter \ud835\udf02 is an effort-adjustment factor which can be modified to incorporate subjective assessments of product, hardware, personnel, and project attributes. Since we do not have a prior for each project, we set \ud835\udf02 to the default value of one. To obtain the price ( \ud835\udc43 ( ) of each OSS project, we  then  multiply  the  results  of  equation  (3)  by  the  weighted  global  wage  that  an  average programmer would obtain on the open market. To calculate a global wage, we include the base monthly salaries of software developers from Salary Expert for the top 30 countries in terms of their GitHub developer counts in 2021 (Wachs et al., 2022). 17 The weight of each country is its share of active GitHub contributors over the total contributors in the top 30 countries. We further create bounds by using a low-wage (India) and high-wage (USA) labor market for the wage to better understand how the value would vary by the pool of programmers used to recreate all of OSS. 18"], "response": "The estimated difference in labor demand between the low wage and high wage scenarios for open source using languages in buckets 1, 2, and 3 is $14.39 trillion ($17.91 trillion for the high wage scenario minus $3.52 trillion for the low wage scenario).", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The estimated difference in labor demand between the low wage scenario ($2.59 Trillion) and the high wage scenario ($13.18 Trillion) is $10.59 Trillion.", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## --- Table 1 about here ---\n\nTable  1  shows  descriptive  statistics  from  both  data  sets  separately.  The  inward-facing Census  (Panel  A)  contains  just  over  261.7  million  lines  of  code  with  72%  of  the  lines  being attributable to the top programming languages. The average package includes 142 thousand lines of code with a slightly lower average of 113 thousand lines of code for the subset of top languages. When considering the demand (usage) side, we observe that the Census packages were used over 2.7 million times while 92% of this usage is attributable to the top languages. The average package was used 1,472.4 times with a higher usage of around 1,497.5 for the top  languages.  For  the outward-facing  BuiltWith  data  we  find  similar  patterns,  but  at  different  levels.  The  packages included from BuiltWith include over 82 million lines of code, 71% of which are attributable to the  top  programming  languages.  The  average  package  within  the  BuiltWith  sample  has  111 thousand  lines  of  code  with  a  lower  average  of  around  80  thousand  lines  of  code  for  the  top languages. This is because our BuiltWith data primarily consists of JavaScript-based packages, which are often smaller than packages written in other languages. BuiltWith packages were used over 142 thousand times where 99.97% were attributable to the top languages. Next, we used these raw observations to calculate the value of all OSS through the labor market approach and estimated the value created from the supply and demand side.\n\n--- Table 2 about here ---\n\nTable 2 shows the estimates for the value of OSS based on the firm-relevant joint Census and BuiltWith sample. All estimates in Table 2 are based only on software languages classified in bucket  1  from  Table  A1,  which  are  the  most  likely  to  be  written  by  a  human  rather  than  a machine. 19 The first column contains estimates with wages from a low income country (India), the global  average  wage,  and  a  high  income  country  (United  States  of  America),  respectively  (as described above). To reproduce all widely-used OSS once (e.g., the idea of OSS still exists, but all current OSS is deleted and needs to be coded from scratch), using programmers at the average developer wage from India, it would require an investment of $1.22 billion. In contrast, if we use the average developer wage from the United States, then reproducing all widely-used OSS would require  an  investment  of  $6.22  billion.  Using  a  pool  of  programmers  from  across  the  world, weighed based on the existing geographic contributions to OSS as discussed above, would lead to an investment somewhere in between the low and high-income country, $4.15 billion. It is useful to compare these numbers to those from similar studies to understand differences in valuing all OSS (prior studies) versus that which is widely used (our study). Robbins et al. (2021) and Blind et al. (2021) use a method similar to ours and estimate that the value of OSS created in the US is $38 billion in 2019 and that created in the EU is \u20ac1 billion in 2018. Wachs et al. (2022) show that roughly 50% of OSS contributions come from the US and EU combined. In aggregate, that would lead these studies to give a global value of OSS of $78 billion. Thus, our middle estimate of a supply-side value of $4.15 billion for only firm-oriented and widely used OSS is a credible lowerbound and highlights the higher estimations of the total of supply-side value of OSS when not considering whether or not a given OSS package is widely used. This further indicates that the supply-side value of the most widely used OSS is roughly 5.5% of the supply-side value of all OSS.\n\nThe second column in Table 2 contains the demand side estimates based on the labor market approach. We find that if firms had to recreate all OSS packages they used (e.g., OSS itself no longer existed and every firm that used an OSS package had to recreate it), then the entire cost would amount to between $2.59 trillion to $13.18 trillion using labor from the low wage or high wage country only, respectively. A pool of programmers across the globe could recreate all of OSS that is being widely used for a cost of approximately $8.80 trillion. Interpreting this number is\n\n19 Tables in the appendix show the equivalent values from Table 2 when including software language buckets 1 and 2 (Table A3) and all three software language buckets (Table A4).\n\nslightly more complicated but still feasible. According to a Statista (2023) report, global software revenue in 2020 (the same year as our data) was $531.7 billion. However, this represents a flow, not a stock, of software. Relying on government estimates that software fully depreciates over three years, we can do a back of the envelope calculation and consider the purchase value of the full stock of prepackaged software used in 2020 as the aggregate of that sold from 2018 to 2020, which is $1.54 trillion. Further, this represents only the expenditure on prepackaged software and does  not  include  custom  purchased  or  in-house  developed  software.  Here,  the  best  obtainable estimates of private-sector investment in software overall come from the United States National Income and Product Accounts data (NIPA 2023). In 2020, the national account data shows that in the  US,  private  firms  spent  $479.2  billion  on  software,  of  which  45%  ($215.5  billion)  was prepackaged. If we assume this is a consistent ratio for the rest of the world, then the total amount firms spent on software being used in 2020 was $3.4 trillion (= $1.54 trillion/0.45). Combining this rough estimate with the demand side estimate of the value of OSS based on an average global wage ($8.8 trillion), this indicates firms would spend $12.2 trillion (=$3.4 trillion + $8.8 trillion), or three and a half times what they currently spend if they needed to pay in-house developers to write the OSS that they currently use for free."], "response": "The estimated difference in labor demand between the low wage scenario ($2.59 trillion) and the high wage scenario ($13.18 trillion) is $10.59 trillion.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** What are some examples of programming languages listed in the provided context information?", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there."], "response": "Some examples of programming languages mentioned include Go, JavaScript, Java, C, Typescript, and Python.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** Some examples of programming languages listed in the provided context information are ABNF, ACTIONSCRIPT, ADA, APPLESCRIPT, ARDUINO, ASPECTJ, ASPX-CS, ASPX-VB, AWK, C, C#, CHARMCI, CLOJURE, COFFEESCRIPT, COMMONLISP, CSS, CUDA, CYTHON, and D.", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## Online Appendix\n\nTable A1 Languages within each bucket\n\n| Type                                      | Language             |\n|-------------------------------------------|----------------------|\n| Panel A: Bucket 1 - Languages             |                      |\n| Mark-Up Language                          | BIBTEX               |\n| Mark-Up Language                          | COLDFUSION HTML      |\n| Mark-Up Language                          | DOCBOOK XML          |\n| Mark-Up Language                          | HAML                 |\n| Mark-Up Language                          | HTML                 |\n| Mark-Up Language                          | HXML                 |\n| Mark-Up Language                          | JAVAEE XML           |\n| Mark-Up Language                          | MARKDOWN             |\n| Mark-Up Language                          | MASON                |\n| Mark-Up Language                          | MXML                 |\n| Mark-Up Language                          | RELAX-NG COMPACT     |\n| Mark-Up Language                          | RHTML                |\n| Mark-Up Language                          | TEX                  |\n| Mark-Up Language                          | XML                  |\n| Mark-Up Language                          | XQUERY               |\n| Mark-Up Language                          | YAML                 |\n| Programming Language                      | ABNF                 |\n| Programming Language                      | ACTIONSCRIPT         |\n| Programming Language                      | ADA                  |\n| Programming Language                      | APPLESCRIPT          |\n| Programming Language                      | ARDUINO              |\n| Programming Language                      | ASPECTJ              |\n| Programming Language                      | ASPX-CS              |\n| Programming Language                      | ASPX-VB              |\n| Programming Language                      | AWK                  |\n| Programming Language                      | C                    |\n| Programming Language                      | C#                   |\n| Programming Language                      | CHARMCI              |\n| Programming Language                      | CLOJURE              |\n| Programming Language                      | COFFEESCRIPT         |\n| Programming Language                      | COMMONLISP           |\n| Programming Language                      | CSS                  |\n| Programming Language                      | CUDA                 |\n| Programming Language                      | CYTHON               |\n| Programming Language                      | D                    |\n| Programming Language                      | DART                 |\n| Programming Language                      | DELPHI               |\n| Programming Language                      | EASYTRIEVE           |\n| Programming Language                      | EC                   |\n| Programming Language                      | ELIXIR               |\n| Programming Language                      | ELM                  |\n| Programming Language                      | EMACSLISP            |\n| Programming Language                      | ERLANG               |\n| Programming Language                      | F# FISH              |\n| Programming Language Programming Language | FORTH                |\n| Programming Language Programming Language | FORTRAN FORTRANFIXED |\n\n| Programming Language                      | GAP              |\n|-------------------------------------------|------------------|\n| Programming Language                      | GHERKIN          |\n| Programming Language                      | GLSL             |\n| Programming Language                      | GO               |\n| Programming Language                      | GRAPHVIZ         |\n| Programming Language                      | GROOVY           |\n| Programming Language                      | HASKELL          |\n| Programming Language                      | HAXE             |\n| Programming Language                      | IDL              |\n| Programming Language                      | JAVA             |\n| Programming Language                      | JAVA SERVER PAGE |\n| Programming Language                      | JAVASCRIPT       |\n| Programming Language                      | KOTLIN           |\n| Programming Language                      | LESSCSS          |\n| Programming Language                      | LIQUID           |\n| Programming Language                      | LIVESCRIPT       |\n| Programming Language                      | LLVM             |\n| Programming Language                      | LOGOS            |\n| Programming Language                      | LUA              |\n| Programming Language                      | MATHEMATICA      |\n| Programming Language                      | MINISCRIPT       |\n| Programming Language                      | MODULA-2         |\n| Programming Language                      | NASM             |\n| Programming Language                      | NIX              |\n| Programming Language                      | OBJECTIVE-C      |\n| Programming Language                      | OBJECTIVE-J      |\n| Programming Language                      | OCAML            |\n| Programming Language Programming Language | OPENEDGE ABL     |\n|                                           | PAWN             |\n| Programming Language                      | PERL             |\n| Programming Language Programming          | PHP PL/PGSQL     |\n| Programming Language                      | POSTSCRIPT       |\n| Programming Language                      | POVRAY           |\n| Programming Language                      | PROLOG           |\n| Programming Language                      | PROPERTIES       |\n| Programming Language                      | PUPPET           |\n| Programming Language                      | PYTHON           |\n| Programming Language                      | REASONML         |\n| Programming Language                      | REBOL            |\n| Programming Language                      | REDCODE          |\n| Programming Language                      | REXX             |\n| Programming Language                      | RUBY             |\n| Programming Language                      | RUST             |\n| Programming Language                      | S                |\n| Programming Language                      | SASS             |\n| Programming Language                      | SCALA            |\n| Programming Language                      | SCILAB           |\n| Programming Language                      | SCSS             |\n| Programming Language                      | SLIM             |\n| Programming Language                      | SMALLTALK        |\n| Programming Language                      | SOLIDITY         |\n|                                           | STANDARD ML      |\n| Programming Language Programming          | SWIFT            |\n| Programming Language                      | SWIG             |\n| Programming Language                      | TADS 3           |\n\nProgramming Language\n\nTCL\n\nProgramming Language\n\nTHRIFT\n\nProgramming Language\n\nTRANSACT-SQL\n\nProgramming Language\n\nTREETOP\n\nProgramming Language\n\nTYPESCRIPT\n\nProgramming Language\n\nVB.NET\n\nProgramming Language\n\nVBSCRIPT\n\nProgramming Language\n\nVCL\n\nProgramming Language\n\nVIML\n\nProgramming Language\n\nWEB IDL"], "response": "Some examples of programming languages include Go, JavaScript, Java, C, and Python.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: What are some programming languages that start with the letter 'E' as listed in the provided context?", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there."], "response": "The provided context does not list any programming languages that start with the letter 'E'.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: The programming languages that start with the letter 'E' in the provided context are EASYTRIEVE, EC, ELIXIR, ELM, EMACSLISP, and ERLANG.", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## Online Appendix\n\nTable A1 Languages within each bucket\n\n| Type                                      | Language             |\n|-------------------------------------------|----------------------|\n| Panel A: Bucket 1 - Languages             |                      |\n| Mark-Up Language                          | BIBTEX               |\n| Mark-Up Language                          | COLDFUSION HTML      |\n| Mark-Up Language                          | DOCBOOK XML          |\n| Mark-Up Language                          | HAML                 |\n| Mark-Up Language                          | HTML                 |\n| Mark-Up Language                          | HXML                 |\n| Mark-Up Language                          | JAVAEE XML           |\n| Mark-Up Language                          | MARKDOWN             |\n| Mark-Up Language                          | MASON                |\n| Mark-Up Language                          | MXML                 |\n| Mark-Up Language                          | RELAX-NG COMPACT     |\n| Mark-Up Language                          | RHTML                |\n| Mark-Up Language                          | TEX                  |\n| Mark-Up Language                          | XML                  |\n| Mark-Up Language                          | XQUERY               |\n| Mark-Up Language                          | YAML                 |\n| Programming Language                      | ABNF                 |\n| Programming Language                      | ACTIONSCRIPT         |\n| Programming Language                      | ADA                  |\n| Programming Language                      | APPLESCRIPT          |\n| Programming Language                      | ARDUINO              |\n| Programming Language                      | ASPECTJ              |\n| Programming Language                      | ASPX-CS              |\n| Programming Language                      | ASPX-VB              |\n| Programming Language                      | AWK                  |\n| Programming Language                      | C                    |\n| Programming Language                      | C#                   |\n| Programming Language                      | CHARMCI              |\n| Programming Language                      | CLOJURE              |\n| Programming Language                      | COFFEESCRIPT         |\n| Programming Language                      | COMMONLISP           |\n| Programming Language                      | CSS                  |\n| Programming Language                      | CUDA                 |\n| Programming Language                      | CYTHON               |\n| Programming Language                      | D                    |\n| Programming Language                      | DART                 |\n| Programming Language                      | DELPHI               |\n| Programming Language                      | EASYTRIEVE           |\n| Programming Language                      | EC                   |\n| Programming Language                      | ELIXIR               |\n| Programming Language                      | ELM                  |\n| Programming Language                      | EMACSLISP            |\n| Programming Language                      | ERLANG               |\n| Programming Language                      | F# FISH              |\n| Programming Language Programming Language | FORTH                |\n| Programming Language Programming Language | FORTRAN FORTRANFIXED |\n\n| Programming Language                      | GAP              |\n|-------------------------------------------|------------------|\n| Programming Language                      | GHERKIN          |\n| Programming Language                      | GLSL             |\n| Programming Language                      | GO               |\n| Programming Language                      | GRAPHVIZ         |\n| Programming Language                      | GROOVY           |\n| Programming Language                      | HASKELL          |\n| Programming Language                      | HAXE             |\n| Programming Language                      | IDL              |\n| Programming Language                      | JAVA             |\n| Programming Language                      | JAVA SERVER PAGE |\n| Programming Language                      | JAVASCRIPT       |\n| Programming Language                      | KOTLIN           |\n| Programming Language                      | LESSCSS          |\n| Programming Language                      | LIQUID           |\n| Programming Language                      | LIVESCRIPT       |\n| Programming Language                      | LLVM             |\n| Programming Language                      | LOGOS            |\n| Programming Language                      | LUA              |\n| Programming Language                      | MATHEMATICA      |\n| Programming Language                      | MINISCRIPT       |\n| Programming Language                      | MODULA-2         |\n| Programming Language                      | NASM             |\n| Programming Language                      | NIX              |\n| Programming Language                      | OBJECTIVE-C      |\n| Programming Language                      | OBJECTIVE-J      |\n| Programming Language                      | OCAML            |\n| Programming Language Programming Language | OPENEDGE ABL     |\n|                                           | PAWN             |\n| Programming Language                      | PERL             |\n| Programming Language Programming          | PHP PL/PGSQL     |\n| Programming Language                      | POSTSCRIPT       |\n| Programming Language                      | POVRAY           |\n| Programming Language                      | PROLOG           |\n| Programming Language                      | PROPERTIES       |\n| Programming Language                      | PUPPET           |\n| Programming Language                      | PYTHON           |\n| Programming Language                      | REASONML         |\n| Programming Language                      | REBOL            |\n| Programming Language                      | REDCODE          |\n| Programming Language                      | REXX             |\n| Programming Language                      | RUBY             |\n| Programming Language                      | RUST             |\n| Programming Language                      | S                |\n| Programming Language                      | SASS             |\n| Programming Language                      | SCALA            |\n| Programming Language                      | SCILAB           |\n| Programming Language                      | SCSS             |\n| Programming Language                      | SLIM             |\n| Programming Language                      | SMALLTALK        |\n| Programming Language                      | SOLIDITY         |\n|                                           | STANDARD ML      |\n| Programming Language Programming          | SWIFT            |\n| Programming Language                      | SWIG             |\n| Programming Language                      | TADS 3           |\n\nProgramming Language\n\nTCL\n\nProgramming Language\n\nTHRIFT\n\nProgramming Language\n\nTRANSACT-SQL\n\nProgramming Language\n\nTREETOP\n\nProgramming Language\n\nTYPESCRIPT\n\nProgramming Language\n\nVB.NET\n\nProgramming Language\n\nVBSCRIPT\n\nProgramming Language\n\nVCL\n\nProgramming Language\n\nVIML\n\nProgramming Language\n\nWEB IDL"], "response": "The programming languages that start with the letter 'E' are EASYTRIEVE, EC, ELIXIR, ELM, EMACSLISP, and ERLANG.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: What programming language in the provided list is known for its use in web development and is often used alongside HTML and CSS?", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there."], "response": "JavaScript is known for its use in web development and is often used alongside HTML and CSS.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: JavaScript is the programming language in the provided list that is known for its use in web development and is often used alongside HTML and CSS.", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there."], "response": "JavaScript is indeed widely recognized for its use in web development, often utilized alongside HTML and CSS to create interactive and dynamic web pages.", "passing": false, "feedback": "NO", "score": 0.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: What programming languages from the provided list are known for their use in web development?", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there."], "response": "JavaScript and TypeScript are known for their use in web development.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: From the provided list, the programming languages known for their use in web development include PHP, PERL, PYTHON, RUBY, and SCALA.", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there."], "response": "Among the programming languages listed, Python and Ruby are known for their use in web development.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the provided context, which programming languages are included in Bucket 1, and what is the estimated global labor-market value of open source using languages from Buckets 1 and 2?", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1)."], "response": "The context does not specify which programming languages are included in Bucket 1. However, the estimated global labor-market value of open source using languages from Buckets 1 and 2 is $4.18 billion for labor supply and $8.84 trillion for labor demand.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The programming languages included in Bucket 1 are SMALLTALK, SOLIDITY, STANDARD ML, SWIFT, SWIG, TADS 3, TCL, THRIFT, TRANSACT-SQL, TREETOP, TYPESCRIPT, VB.NET, VBSCRIPT, VCL, VIML, and WEB IDL. The estimated global labor-market value of open source using languages from Buckets 1 and 2 is $4.18 billion in labor supply and $8.84 trillion in labor demand.", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python."], "response": "The estimated global labor-market value of open source using languages from Buckets 1 and 2 is $4.18 billion in labor supply and $8.84 trillion in labor demand.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the labor-market value of open source using languages in buckets 1, 2, and 3, what is the estimated labor demand in the high wage scenario, and how does it compare to the low wage scenario?", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1)."], "response": "In the high wage scenario, the estimated labor demand for open source using languages in buckets 1, 2, and 3 is $17.91 trillion. In comparison, the labor demand in the low wage scenario is $3.52 trillion. This shows that the labor demand in the high wage scenario is significantly higher than in the low wage scenario.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** In the high wage scenario, the estimated labor demand for open source using languages in buckets 1, 2, and 3 is $17.91 trillion. In comparison, the low wage scenario estimates the labor demand at $3.52 trillion. This shows that the high wage scenario's labor demand is significantly higher, reflecting the impact of using the US average wage compared to the Indian average wage for programmers in 2020.", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## --- Table 1 about here ---\n\nTable  1  shows  descriptive  statistics  from  both  data  sets  separately.  The  inward-facing Census  (Panel  A)  contains  just  over  261.7  million  lines  of  code  with  72%  of  the  lines  being attributable to the top programming languages. The average package includes 142 thousand lines of code with a slightly lower average of 113 thousand lines of code for the subset of top languages. When considering the demand (usage) side, we observe that the Census packages were used over 2.7 million times while 92% of this usage is attributable to the top languages. The average package was used 1,472.4 times with a higher usage of around 1,497.5 for the top  languages.  For  the outward-facing  BuiltWith  data  we  find  similar  patterns,  but  at  different  levels.  The  packages included from BuiltWith include over 82 million lines of code, 71% of which are attributable to the  top  programming  languages.  The  average  package  within  the  BuiltWith  sample  has  111 thousand  lines  of  code  with  a  lower  average  of  around  80  thousand  lines  of  code  for  the  top languages. This is because our BuiltWith data primarily consists of JavaScript-based packages, which are often smaller than packages written in other languages. BuiltWith packages were used over 142 thousand times where 99.97% were attributable to the top languages. Next, we used these raw observations to calculate the value of all OSS through the labor market approach and estimated the value created from the supply and demand side.\n\n--- Table 2 about here ---\n\nTable 2 shows the estimates for the value of OSS based on the firm-relevant joint Census and BuiltWith sample. All estimates in Table 2 are based only on software languages classified in bucket  1  from  Table  A1,  which  are  the  most  likely  to  be  written  by  a  human  rather  than  a machine. 19 The first column contains estimates with wages from a low income country (India), the global  average  wage,  and  a  high  income  country  (United  States  of  America),  respectively  (as described above). To reproduce all widely-used OSS once (e.g., the idea of OSS still exists, but all current OSS is deleted and needs to be coded from scratch), using programmers at the average developer wage from India, it would require an investment of $1.22 billion. In contrast, if we use the average developer wage from the United States, then reproducing all widely-used OSS would require  an  investment  of  $6.22  billion.  Using  a  pool  of  programmers  from  across  the  world, weighed based on the existing geographic contributions to OSS as discussed above, would lead to an investment somewhere in between the low and high-income country, $4.15 billion. It is useful to compare these numbers to those from similar studies to understand differences in valuing all OSS (prior studies) versus that which is widely used (our study). Robbins et al. (2021) and Blind et al. (2021) use a method similar to ours and estimate that the value of OSS created in the US is $38 billion in 2019 and that created in the EU is \u20ac1 billion in 2018. Wachs et al. (2022) show that roughly 50% of OSS contributions come from the US and EU combined. In aggregate, that would lead these studies to give a global value of OSS of $78 billion. Thus, our middle estimate of a supply-side value of $4.15 billion for only firm-oriented and widely used OSS is a credible lowerbound and highlights the higher estimations of the total of supply-side value of OSS when not considering whether or not a given OSS package is widely used. This further indicates that the supply-side value of the most widely used OSS is roughly 5.5% of the supply-side value of all OSS.\n\nThe second column in Table 2 contains the demand side estimates based on the labor market approach. We find that if firms had to recreate all OSS packages they used (e.g., OSS itself no longer existed and every firm that used an OSS package had to recreate it), then the entire cost would amount to between $2.59 trillion to $13.18 trillion using labor from the low wage or high wage country only, respectively. A pool of programmers across the globe could recreate all of OSS that is being widely used for a cost of approximately $8.80 trillion. Interpreting this number is\n\n19 Tables in the appendix show the equivalent values from Table 2 when including software language buckets 1 and 2 (Table A3) and all three software language buckets (Table A4).\n\nslightly more complicated but still feasible. According to a Statista (2023) report, global software revenue in 2020 (the same year as our data) was $531.7 billion. However, this represents a flow, not a stock, of software. Relying on government estimates that software fully depreciates over three years, we can do a back of the envelope calculation and consider the purchase value of the full stock of prepackaged software used in 2020 as the aggregate of that sold from 2018 to 2020, which is $1.54 trillion. Further, this represents only the expenditure on prepackaged software and does  not  include  custom  purchased  or  in-house  developed  software.  Here,  the  best  obtainable estimates of private-sector investment in software overall come from the United States National Income and Product Accounts data (NIPA 2023). In 2020, the national account data shows that in the  US,  private  firms  spent  $479.2  billion  on  software,  of  which  45%  ($215.5  billion)  was prepackaged. If we assume this is a consistent ratio for the rest of the world, then the total amount firms spent on software being used in 2020 was $3.4 trillion (= $1.54 trillion/0.45). Combining this rough estimate with the demand side estimate of the value of OSS based on an average global wage ($8.8 trillion), this indicates firms would spend $12.2 trillion (=$3.4 trillion + $8.8 trillion), or three and a half times what they currently spend if they needed to pay in-house developers to write the OSS that they currently use for free."], "response": "In the high wage scenario, the estimated labor demand for open source using languages in buckets 1, 2, and 3 is $17.91 trillion. In comparison, the low wage scenario estimates the labor demand at $3.52 trillion. This shows that the high wage scenario's labor demand is significantly higher, reflecting the impact of using the US average wage compared to the Indian average wage for programmers in 2020.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the goods market approach estimate the value of open-source software (OSS) compared to the labor market supply-side value, and why is there a differential between these estimates?", "contexts": ["## Appendix A) Goods-Market Valuation Approach\n\nAs an alternate estimation method, instead of using the labor replacement cost, we use a goods replacement value approach. We identify several OSS packages that have similar closed-source, pecuniary alternatives and consider the costs if all commercial users of the free OSS had to replace that software with a pecuniary alternative (similar to the calculations Greenstein and Nagle (2014) and Murciano-Goroff et al. (2021) performed for web servers). We can then use this alternate value of p , combined with the q values from above to estimate a goods replacement value of OSS. This method builds on suggestions from Nordhaus (2006, p. 146) who says '\u2026the price of market and nonmarket goods and services should be imputed on the basis of the comparable market goods and services.' We do not expect the estimates from the two methods to be similar. Quite the contrary, the value of those two methods varies substantially since the latter goods-market approach assumes a fixed price to sell a good multiple times and that fixed price is usually lower than the total value estimated from recreating all packages on the labor side. The differential between these estimates is  essentially the result of a firm stepping in to reproduce the missing OSS packages and then selling them for a pecuniary price rather than all firms needing to reproduce those packages from scratch themselves.\n\nWith the goods market approach, the thought experiment is still that we live in a world where OSS does not exist, but it has to be recreated via one firm that then charges a price for a good that is currently free. To value OSS via the goods market approach, we created a basket of equivalent substitute proprietary goods that are priced on the open market as a stand-in for an OSS product.  This  methodology  is  consistent  with  that  used  in  the  prior  literature  (Greenstein  and Nagle, 2014; Murciano-Goroff et al., 2021) although both of those studies only used a single good rather than a basket since they were focused on only one type of OSS (web servers). Since there is no readily available database for proprietary equivalents of OSS, we conduct a search based on subjective  perception  of  popularity  of  OSS  and  we  then  search  for  pecuniary,  closed-source substitutes for them. The resulting basket of 20 OSS packages with proprietary substitutes is a good representation of the diversity of OSS. The software ranges from media and design software to statistical analysis programs, to database management and web server software. 21\n\n21 Table A5 shows the basket of OSS and their proprietary equivalents that we used. To create this basket, we looked for proprietary software that had an OSS equivalent that was similar in its overall function and feature set, and sought to identify pairs of software that, in aggregate, captured a broad and representative set of the types of OSS that exist.\n\nBased on our OSS equivalent substitute proprietary goods basket we then obtain prices for each proprietary software equivalent and we calculated the COCOMO labor market supply-side value for each OSS product in the basket which we use as a proxy - for lack of the code from the proprietary software - for the COCOMO labor supply side value of the proprietary software (e.g., the cost it would take to pay a programmer to write that proprietary software from scratch). We then calculate the average COCOMO labor supply-side value of the basket, \ud835\udc49 !,1#23.4 ,  and  the average price for the basket, \ud835\udc43 !,1#23.4 . 22 Since, we know the labor market supply-side value of all OSS, \ud835\udc49 ! \"#$%&amp; , we can setup the following equation and obtain the price of OSS, \ud835\udc43 ! for the goodsmarket for all OSS via a simple scaling transformation:\n\n<!-- formula-not-decoded -->\n\nThis results in the following goods-market supply-side value:\n\n<!-- formula-not-decoded -->\n\n<!-- formula-not-decoded -->\n\nWe can then obtain the equivalent demand-side goods-market values as follows:\n\n<!-- formula-not-decoded -->\n\nFrom the goods market side, we consider the equivalent price that a firm would charge if it produced all existing widely used OSS and then sold it as a product to customers.\n\nTable A6, column 3 shows that the value on the demand side ranges between $177 million and $244 million across the different buckets independent of the country of origin from which programmers are hired. Naturally, the goods-market value will be substantially smaller than the labor demand value since this imaginary firm will make a profit at a comparatively low price by producing the software once and then selling it to many customers. Further, while Greenstein and Nagle (2014) as well as Murciano-Goroff et al. (2021) focus on one particular type of software only (web servers), we attempt to expand on their approach to many goods. However, the data limitations become a stronger constraint in this context which makes it inherently more difficult\n\n22 We obtained the average price of the goods-market proprietary basket by using a 3 years lifespan of software, i.e. 1/(1-0.66), so the depreciation factor is 0.33. This is consistent with the United States Internal Revenue Service (IRS) rules for depreciating software, which states 'If you can depreciate the cost of computer software, use the straight line method over a useful life of 36 months.' https://www.irs.gov/publications/p946#en\\_US\\_2022\\_publink1000107354.\n\nto  estimate  the  value  through  this  approach  while  requiring  substantially  more  assumptions. Instead of a pure goods-market approach, this requires assistance from the labor-market approach in terms of scaling for the estimate, which ultimately leads to a substantial underestimate of the value of OSS. Further, the pricing strategy of the proprietary software counterparts is sensitive to the  market  demand.  With  the  goods-market  approach  extending  to  multiple  goods,  the  strong implicit assumption is that the market demands for our basket software and our sample OSS are similar, so they lead to commensurate prices.\n\nAn alternative and even more simplified goods-market back-of-the-envelope calculation that does not account for lines of code and relies on no scaling from the labor market approach would simply be to multiply a price of a reference good with the usage. We can take the minimum, average, and maximum prices of the basket of proprietary goods as captured in the reference price vector p = (69.99, 1610.17, 5800) and simply multiply it with usage from the combined Census and BuiltWith sample (Table 1). Based on those imputed proprietary price assumptions, the goods market demand side value would range from $0.2 - $16.5 trillion (minimum price - maximum price)  with  the  mean  price  resulting  in  a  value  estimate  of  $4.5  trillion.  However,  while  this estimate creates slightly more variance than the labor market approach, it is inherently flawed by simply assuming that the imputed prices are identical for each open source product based on the reference price. We further think this very simple back-of-the-envelope is an orange to apples comparison since the goods in our basket are fully functional, stand-alone software packages, while the packages in the Census and BuiltWith datasets are comprised of application libraries, which are generally smaller than such stand-alone packages.\n\nGiven all the complexities and assumptions one has to make due to lack of data for a goodsmarket approach, we place stronger emphasis on the labor cost approach highlighted in the main body but we include this method here for completeness.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The goods market approach estimates the value of open-source software (OSS) by considering the cost of replacing OSS with proprietary alternatives. This method involves creating a basket of proprietary software that serves as substitutes for OSS and calculating the average price of these proprietary equivalents. The goods market approach assumes a fixed price for selling a good multiple times, which is typically lower than the total value estimated from recreating all packages on the labor side. The differential between the goods market and labor market supply-side estimates arises because the goods market approach assumes a single firm reproduces the OSS and sells it at a pecuniary price, whereas the labor market approach considers the cost for all firms to recreate the OSS from scratch. This results in the goods market value being substantially smaller, as it reflects the profit a firm would make by producing the software once and selling it to many customers.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The goods market approach estimates the value of OSS by creating a basket of equivalent substitute proprietary goods that are priced on the open market as stand-ins for OSS products. This method assumes a hypothetical scenario where OSS does not exist and must be recreated by a single firm, which then sells it at a fixed price. The differential between the goods market approach and the labor market supply-side value arises because the goods market approach assumes a fixed price for selling a good multiple times, which is usually lower than the total value estimated from recreating all packages on the labor side. The labor market supply-side value considers the cost it would take to pay programmers to write the software from scratch, which is typically higher than the price a firm would charge for selling the software to multiple customers.", "contexts": ["## Appendix A) Goods-Market Valuation Approach\n\nAs an alternate estimation method, instead of using the labor replacement cost, we use a goods replacement value approach. We identify several OSS packages that have similar closed-source, pecuniary alternatives and consider the costs if all commercial users of the free OSS had to replace that software with a pecuniary alternative (similar to the calculations Greenstein and Nagle (2014) and Murciano-Goroff et al. (2021) performed for web servers). We can then use this alternate value of p , combined with the q values from above to estimate a goods replacement value of OSS. This method builds on suggestions from Nordhaus (2006, p. 146) who says '\u2026the price of market and nonmarket goods and services should be imputed on the basis of the comparable market goods and services.' We do not expect the estimates from the two methods to be similar. Quite the contrary, the value of those two methods varies substantially since the latter goods-market approach assumes a fixed price to sell a good multiple times and that fixed price is usually lower than the total value estimated from recreating all packages on the labor side. The differential between these estimates is  essentially the result of a firm stepping in to reproduce the missing OSS packages and then selling them for a pecuniary price rather than all firms needing to reproduce those packages from scratch themselves.\n\nWith the goods market approach, the thought experiment is still that we live in a world where OSS does not exist, but it has to be recreated via one firm that then charges a price for a good that is currently free. To value OSS via the goods market approach, we created a basket of equivalent substitute proprietary goods that are priced on the open market as a stand-in for an OSS product.  This  methodology  is  consistent  with  that  used  in  the  prior  literature  (Greenstein  and Nagle, 2014; Murciano-Goroff et al., 2021) although both of those studies only used a single good rather than a basket since they were focused on only one type of OSS (web servers). Since there is no readily available database for proprietary equivalents of OSS, we conduct a search based on subjective  perception  of  popularity  of  OSS  and  we  then  search  for  pecuniary,  closed-source substitutes for them. The resulting basket of 20 OSS packages with proprietary substitutes is a good representation of the diversity of OSS. The software ranges from media and design software to statistical analysis programs, to database management and web server software. 21\n\n21 Table A5 shows the basket of OSS and their proprietary equivalents that we used. To create this basket, we looked for proprietary software that had an OSS equivalent that was similar in its overall function and feature set, and sought to identify pairs of software that, in aggregate, captured a broad and representative set of the types of OSS that exist.\n\nBased on our OSS equivalent substitute proprietary goods basket we then obtain prices for each proprietary software equivalent and we calculated the COCOMO labor market supply-side value for each OSS product in the basket which we use as a proxy - for lack of the code from the proprietary software - for the COCOMO labor supply side value of the proprietary software (e.g., the cost it would take to pay a programmer to write that proprietary software from scratch). We then calculate the average COCOMO labor supply-side value of the basket, \ud835\udc49 !,1#23.4 ,  and  the average price for the basket, \ud835\udc43 !,1#23.4 . 22 Since, we know the labor market supply-side value of all OSS, \ud835\udc49 ! \"#$%&amp; , we can setup the following equation and obtain the price of OSS, \ud835\udc43 ! for the goodsmarket for all OSS via a simple scaling transformation:\n\n<!-- formula-not-decoded -->\n\nThis results in the following goods-market supply-side value:\n\n<!-- formula-not-decoded -->\n\n<!-- formula-not-decoded -->\n\nWe can then obtain the equivalent demand-side goods-market values as follows:\n\n<!-- formula-not-decoded -->\n\nFrom the goods market side, we consider the equivalent price that a firm would charge if it produced all existing widely used OSS and then sold it as a product to customers.\n\nTable A6, column 3 shows that the value on the demand side ranges between $177 million and $244 million across the different buckets independent of the country of origin from which programmers are hired. Naturally, the goods-market value will be substantially smaller than the labor demand value since this imaginary firm will make a profit at a comparatively low price by producing the software once and then selling it to many customers. Further, while Greenstein and Nagle (2014) as well as Murciano-Goroff et al. (2021) focus on one particular type of software only (web servers), we attempt to expand on their approach to many goods. However, the data limitations become a stronger constraint in this context which makes it inherently more difficult\n\n22 We obtained the average price of the goods-market proprietary basket by using a 3 years lifespan of software, i.e. 1/(1-0.66), so the depreciation factor is 0.33. This is consistent with the United States Internal Revenue Service (IRS) rules for depreciating software, which states 'If you can depreciate the cost of computer software, use the straight line method over a useful life of 36 months.' https://www.irs.gov/publications/p946#en\\_US\\_2022\\_publink1000107354.\n\nto  estimate  the  value  through  this  approach  while  requiring  substantially  more  assumptions. Instead of a pure goods-market approach, this requires assistance from the labor-market approach in terms of scaling for the estimate, which ultimately leads to a substantial underestimate of the value of OSS. Further, the pricing strategy of the proprietary software counterparts is sensitive to the  market  demand.  With  the  goods-market  approach  extending  to  multiple  goods,  the  strong implicit assumption is that the market demands for our basket software and our sample OSS are similar, so they lead to commensurate prices.\n\nAn alternative and even more simplified goods-market back-of-the-envelope calculation that does not account for lines of code and relies on no scaling from the labor market approach would simply be to multiply a price of a reference good with the usage. We can take the minimum, average, and maximum prices of the basket of proprietary goods as captured in the reference price vector p = (69.99, 1610.17, 5800) and simply multiply it with usage from the combined Census and BuiltWith sample (Table 1). Based on those imputed proprietary price assumptions, the goods market demand side value would range from $0.2 - $16.5 trillion (minimum price - maximum price)  with  the  mean  price  resulting  in  a  value  estimate  of  $4.5  trillion.  However,  while  this estimate creates slightly more variance than the labor market approach, it is inherently flawed by simply assuming that the imputed prices are identical for each open source product based on the reference price. We further think this very simple back-of-the-envelope is an orange to apples comparison since the goods in our basket are fully functional, stand-alone software packages, while the packages in the Census and BuiltWith datasets are comprised of application libraries, which are generally smaller than such stand-alone packages.\n\nGiven all the complexities and assumptions one has to make due to lack of data for a goodsmarket approach, we place stronger emphasis on the labor cost approach highlighted in the main body but we include this method here for completeness.", "## 3.1 Labor market approach\n\nFor the labor market approach, we estimate the value of OSS by calculating the replacement value of a package. We ask how much it would cost to reproduce the package by hiring a programmer and paying them a competitive market wage. To estimate this supply-side value ( \ud835\udc49 ! \"#$%&amp; ) , we take the complete list of OSS packages discussed above, and then count the lines of code in each unique\n\n14 In an alternative version, we use a mixture of a labor and goods market approach that is more closely aligned with Greenstein and Nagle (2014) and Murciano-Goroff, et al (2021). However, applying this method in our setting requires numerous additional assumptions due to data constraints. For simplicity we call it the goods market approach for which we provide the details and statistics, as well as the limitations in Appendix A.\n\npackage. 15 For each unique package,  , we calculate the value and then sum over all these values i to obtain the total value:\n\n<!-- formula-not-decoded -->\n\nIn this calculation, we implicitly do not incorporate any production externalities since we assume that there is no spillover knowledge from one package to the next that would lower the cost of programming. 16 This methodology is similar to that used by other papers that estimate the supply-side costs of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021).\n\nWe then calculate the demand-side value of OSS by incorporating the usage information ( Q) for each package:\n\n<!-- formula-not-decoded -->\n\nHere, we do not incorporate consumption externalities, i.e., we do not allow a benefit to arise for the general public when a package has been created and we further make sure that each firm is only replacing a package they use once, since a replaced package can be used within a firm as a club good (e.g., see Cornes and Sandler, 1996). The value \ud835\udc49 ! \"#$%&amp; reflects the cost to rewrite all widely-used OSS once (e.g., the concept of OSS still exists, but all of these packages needed to be rewritten from scratch), while the value \ud835\udc49 + \"#$%&amp; reflects the cost for each firm that uses one of these OSS packages to pay a developer to rewrite those packages (e.g., OSS itself no longer exists).\n\nFor both the supply and demand models, we obtain the dollar-value for each package ( \ud835\udc43 ( ) via the Constructive Cost Model II, also abbreviated as COCOMO II (Boehm 1984, Boehm et al. 2009). The model has previously been used by the United States Department of Defense to estimate software project costs as well as in prior research estimating the value of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021). It is a highly flexible model that allows us to create non-linear transformations of lines of code to dollar-values. It uses the following modelling equation:\n\n15 We use only the pure lines of code excluding documentation lines and empty lines. Hence, we underestimate the true value of recreating each package.\n\n16 Similar to a representative agent model (e.g. see Williamson 2006), one may think of each package being reproduced by separate programmers who are identical replicas of each other (and therefore have the same skill level, but do not become more efficient via learning).\n\n<!-- formula-not-decoded -->\n\n( (\n\nwhere \ud835\udc3f represents the lines of codes in thousands and E the effort in person-month units for each project  . Consistent with Blind et al. (2021), we use the default parameter values for i \ud835\udefc , \ud835\udefd and \ud835\udf02. The parameters \ud835\udefc \ud835\udefd , are non-linear adjustment factors set to 2.94, and 1.0997 respectively . The parameter \ud835\udf02 is an effort-adjustment factor which can be modified to incorporate subjective assessments of product, hardware, personnel, and project attributes. Since we do not have a prior for each project, we set \ud835\udf02 to the default value of one. To obtain the price ( \ud835\udc43 ( ) of each OSS project, we  then  multiply  the  results  of  equation  (3)  by  the  weighted  global  wage  that  an  average programmer would obtain on the open market. To calculate a global wage, we include the base monthly salaries of software developers from Salary Expert for the top 30 countries in terms of their GitHub developer counts in 2021 (Wachs et al., 2022). 17 The weight of each country is its share of active GitHub contributors over the total contributors in the top 30 countries. We further create bounds by using a low-wage (India) and high-wage (USA) labor market for the wage to better understand how the value would vary by the pool of programmers used to recreate all of OSS. 18"], "response": "The goods market approach estimates the value of OSS by considering the cost of replacing free OSS with equivalent proprietary software that is sold on the open market. This method envisions a scenario where OSS is recreated by a single firm, which then sells it at a fixed price. The difference between this approach and the labor market supply-side value is due to the goods market approach assuming a fixed price for selling a product multiple times, which is generally lower than the cost of recreating all packages from scratch as estimated by the labor market approach. The labor market supply-side value accounts for the cost of hiring programmers to develop the software, which tends to be higher than the price a firm would charge for selling the software to multiple customers.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:**", "contexts": ["Working Paper 24-038", "## -- Figure 4 about here ---\n\nFigure 3 shows the Lorenz curves and the number of repositories that a fraction of programmers has contributed to for the supply side (Panel A) and the demand side (Panel B). A Lorenz curve that  lay  directly  on  the  45  degree  line  would  imply  a  very  even  distribution  of  values  across programmers. Instead, Panel A shows a Lorenz curve as a nearly flat line with a drastic increase for the final share of programmers. This implies that the distribution of the supply value is highly uneven and considerably more concentrated than the 80/20 standard. Indeed, the last five percent of programmers, or 3,000 programmers, generate over 93% of the supply side value. Similarly, Panel B shows - when accounting for usage - that those last five percent generate over 96% of the demand side value.  In  aggregate,  this  indicates  that  a  very  small  number  of  programmers  are creating the bulk of OSS code that is heavily relied upon by firms to create their own code. In both Panel A and Panel B we can also see a rise in the number of repositories for the last 10-15% of programmers that contribute  to  the  highest  value,  which  implies  that  the  uneven  value  that  is generated by few programmers is not just due to a few highly valuable repositories but by the contributions of this handful of contributors to a substantial number of repositories."], "response": "The analysis of the Lorenz curves indicates that a small percentage of programmers are responsible for the majority of the value generated in both the supply and demand sides of open-source software (OSS) contributions. Specifically, the last five percent of programmers contribute over 93% of the supply side value and over 96% of the demand side value. This suggests a highly uneven distribution, where a few programmers are creating the bulk of OSS code that firms heavily rely on. Additionally, these top contributors are involved in a substantial number of repositories, indicating their significant impact is not limited to a few high-value projects.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "What are the limitations of using a goods-market approach to estimate the value of open-source software (OSS), and why might a labor-market approach be preferred?", "contexts": ["## Appendix A) Goods-Market Valuation Approach\n\nAs an alternate estimation method, instead of using the labor replacement cost, we use a goods replacement value approach. We identify several OSS packages that have similar closed-source, pecuniary alternatives and consider the costs if all commercial users of the free OSS had to replace that software with a pecuniary alternative (similar to the calculations Greenstein and Nagle (2014) and Murciano-Goroff et al. (2021) performed for web servers). We can then use this alternate value of p , combined with the q values from above to estimate a goods replacement value of OSS. This method builds on suggestions from Nordhaus (2006, p. 146) who says '\u2026the price of market and nonmarket goods and services should be imputed on the basis of the comparable market goods and services.' We do not expect the estimates from the two methods to be similar. Quite the contrary, the value of those two methods varies substantially since the latter goods-market approach assumes a fixed price to sell a good multiple times and that fixed price is usually lower than the total value estimated from recreating all packages on the labor side. The differential between these estimates is  essentially the result of a firm stepping in to reproduce the missing OSS packages and then selling them for a pecuniary price rather than all firms needing to reproduce those packages from scratch themselves.\n\nWith the goods market approach, the thought experiment is still that we live in a world where OSS does not exist, but it has to be recreated via one firm that then charges a price for a good that is currently free. To value OSS via the goods market approach, we created a basket of equivalent substitute proprietary goods that are priced on the open market as a stand-in for an OSS product.  This  methodology  is  consistent  with  that  used  in  the  prior  literature  (Greenstein  and Nagle, 2014; Murciano-Goroff et al., 2021) although both of those studies only used a single good rather than a basket since they were focused on only one type of OSS (web servers). Since there is no readily available database for proprietary equivalents of OSS, we conduct a search based on subjective  perception  of  popularity  of  OSS  and  we  then  search  for  pecuniary,  closed-source substitutes for them. The resulting basket of 20 OSS packages with proprietary substitutes is a good representation of the diversity of OSS. The software ranges from media and design software to statistical analysis programs, to database management and web server software. 21\n\n21 Table A5 shows the basket of OSS and their proprietary equivalents that we used. To create this basket, we looked for proprietary software that had an OSS equivalent that was similar in its overall function and feature set, and sought to identify pairs of software that, in aggregate, captured a broad and representative set of the types of OSS that exist.\n\nBased on our OSS equivalent substitute proprietary goods basket we then obtain prices for each proprietary software equivalent and we calculated the COCOMO labor market supply-side value for each OSS product in the basket which we use as a proxy - for lack of the code from the proprietary software - for the COCOMO labor supply side value of the proprietary software (e.g., the cost it would take to pay a programmer to write that proprietary software from scratch). We then calculate the average COCOMO labor supply-side value of the basket, \ud835\udc49 !,1#23.4 ,  and  the average price for the basket, \ud835\udc43 !,1#23.4 . 22 Since, we know the labor market supply-side value of all OSS, \ud835\udc49 ! \"#$%&amp; , we can setup the following equation and obtain the price of OSS, \ud835\udc43 ! for the goodsmarket for all OSS via a simple scaling transformation:\n\n<!-- formula-not-decoded -->\n\nThis results in the following goods-market supply-side value:\n\n<!-- formula-not-decoded -->\n\n<!-- formula-not-decoded -->\n\nWe can then obtain the equivalent demand-side goods-market values as follows:\n\n<!-- formula-not-decoded -->\n\nFrom the goods market side, we consider the equivalent price that a firm would charge if it produced all existing widely used OSS and then sold it as a product to customers.\n\nTable A6, column 3 shows that the value on the demand side ranges between $177 million and $244 million across the different buckets independent of the country of origin from which programmers are hired. Naturally, the goods-market value will be substantially smaller than the labor demand value since this imaginary firm will make a profit at a comparatively low price by producing the software once and then selling it to many customers. Further, while Greenstein and Nagle (2014) as well as Murciano-Goroff et al. (2021) focus on one particular type of software only (web servers), we attempt to expand on their approach to many goods. However, the data limitations become a stronger constraint in this context which makes it inherently more difficult\n\n22 We obtained the average price of the goods-market proprietary basket by using a 3 years lifespan of software, i.e. 1/(1-0.66), so the depreciation factor is 0.33. This is consistent with the United States Internal Revenue Service (IRS) rules for depreciating software, which states 'If you can depreciate the cost of computer software, use the straight line method over a useful life of 36 months.' https://www.irs.gov/publications/p946#en\\_US\\_2022\\_publink1000107354.\n\nto  estimate  the  value  through  this  approach  while  requiring  substantially  more  assumptions. Instead of a pure goods-market approach, this requires assistance from the labor-market approach in terms of scaling for the estimate, which ultimately leads to a substantial underestimate of the value of OSS. Further, the pricing strategy of the proprietary software counterparts is sensitive to the  market  demand.  With  the  goods-market  approach  extending  to  multiple  goods,  the  strong implicit assumption is that the market demands for our basket software and our sample OSS are similar, so they lead to commensurate prices.\n\nAn alternative and even more simplified goods-market back-of-the-envelope calculation that does not account for lines of code and relies on no scaling from the labor market approach would simply be to multiply a price of a reference good with the usage. We can take the minimum, average, and maximum prices of the basket of proprietary goods as captured in the reference price vector p = (69.99, 1610.17, 5800) and simply multiply it with usage from the combined Census and BuiltWith sample (Table 1). Based on those imputed proprietary price assumptions, the goods market demand side value would range from $0.2 - $16.5 trillion (minimum price - maximum price)  with  the  mean  price  resulting  in  a  value  estimate  of  $4.5  trillion.  However,  while  this estimate creates slightly more variance than the labor market approach, it is inherently flawed by simply assuming that the imputed prices are identical for each open source product based on the reference price. We further think this very simple back-of-the-envelope is an orange to apples comparison since the goods in our basket are fully functional, stand-alone software packages, while the packages in the Census and BuiltWith datasets are comprised of application libraries, which are generally smaller than such stand-alone packages.\n\nGiven all the complexities and assumptions one has to make due to lack of data for a goodsmarket approach, we place stronger emphasis on the labor cost approach highlighted in the main body but we include this method here for completeness.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The goods-market approach to estimating the value of open-source software (OSS) has several limitations. It requires numerous assumptions due to the lack of data, making it inherently more complex and potentially less accurate. This approach assumes a fixed price for selling a good multiple times, which is usually lower than the total value estimated from recreating all packages on the labor side. Additionally, the pricing strategy of proprietary software counterparts is sensitive to market demand, and the assumption that market demands for the basket software and sample OSS are similar may not hold true. The goods-market approach also involves a substantial underestimate of the value of OSS because it relies on scaling from the labor-market approach.\n\nIn contrast, a labor-market approach might be preferred because it directly calculates the labor replacement cost of each OSS package, providing a more straightforward and potentially more accurate estimation of value. This method considers the actual cost of recreating OSS at each firm, which can offer a clearer picture of its economic value. The labor-market approach also allows for a detailed analysis of value creation and contribution inequality among developers, which is not addressed by the goods-market approach.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:**", "contexts": ["Working Paper 24-038", "## -- Figure 4 about here ---\n\nFigure 3 shows the Lorenz curves and the number of repositories that a fraction of programmers has contributed to for the supply side (Panel A) and the demand side (Panel B). A Lorenz curve that  lay  directly  on  the  45  degree  line  would  imply  a  very  even  distribution  of  values  across programmers. Instead, Panel A shows a Lorenz curve as a nearly flat line with a drastic increase for the final share of programmers. This implies that the distribution of the supply value is highly uneven and considerably more concentrated than the 80/20 standard. Indeed, the last five percent of programmers, or 3,000 programmers, generate over 93% of the supply side value. Similarly, Panel B shows - when accounting for usage - that those last five percent generate over 96% of the demand side value.  In  aggregate,  this  indicates  that  a  very  small  number  of  programmers  are creating the bulk of OSS code that is heavily relied upon by firms to create their own code. In both Panel A and Panel B we can also see a rise in the number of repositories for the last 10-15% of programmers that contribute  to  the  highest  value,  which  implies  that  the  uneven  value  that  is generated by few programmers is not just due to a few highly valuable repositories but by the contributions of this handful of contributors to a substantial number of repositories."], "response": "The analysis of Lorenz curves in the study highlights a significant concentration of value creation among a small fraction of programmers. Specifically, the last five percent of programmers are responsible for generating over 93% of the supply side value and over 96% of the demand side value. This indicates that a very small number of programmers are crucial in creating the majority of open-source software code, which is extensively used by firms. Additionally, the increase in the number of repositories for the top contributors suggests that their impact is not limited to a few high-value projects but extends across numerous repositories.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "The goods-market approach to estimating the value of OSS is limited by several factors. Firstly, it requires numerous assumptions, such as the assumption that market demands for proprietary software and OSS are similar, which may not be accurate. Additionally, this approach can lead to a substantial underestimate of OSS value because it does not account for the differences in the nature of the software being compared; proprietary software is often fully functional and stand-alone, whereas OSS may consist of smaller application libraries. Furthermore, the goods-market approach is sensitive to market demand and pricing strategies, which can vary significantly. Due to these complexities and the lack of comprehensive data, the goods-market approach is inherently flawed and can result in an \"orange to apples\" comparison. In contrast, the labor-market approach, which focuses on the cost of labor required to develop the software, is emphasized as it provides a more reliable estimate by considering the actual resources invested in creating OSS.", "contexts": ["## Appendix A) Goods-Market Valuation Approach\n\nAs an alternate estimation method, instead of using the labor replacement cost, we use a goods replacement value approach. We identify several OSS packages that have similar closed-source, pecuniary alternatives and consider the costs if all commercial users of the free OSS had to replace that software with a pecuniary alternative (similar to the calculations Greenstein and Nagle (2014) and Murciano-Goroff et al. (2021) performed for web servers). We can then use this alternate value of p , combined with the q values from above to estimate a goods replacement value of OSS. This method builds on suggestions from Nordhaus (2006, p. 146) who says '\u2026the price of market and nonmarket goods and services should be imputed on the basis of the comparable market goods and services.' We do not expect the estimates from the two methods to be similar. Quite the contrary, the value of those two methods varies substantially since the latter goods-market approach assumes a fixed price to sell a good multiple times and that fixed price is usually lower than the total value estimated from recreating all packages on the labor side. The differential between these estimates is  essentially the result of a firm stepping in to reproduce the missing OSS packages and then selling them for a pecuniary price rather than all firms needing to reproduce those packages from scratch themselves.\n\nWith the goods market approach, the thought experiment is still that we live in a world where OSS does not exist, but it has to be recreated via one firm that then charges a price for a good that is currently free. To value OSS via the goods market approach, we created a basket of equivalent substitute proprietary goods that are priced on the open market as a stand-in for an OSS product.  This  methodology  is  consistent  with  that  used  in  the  prior  literature  (Greenstein  and Nagle, 2014; Murciano-Goroff et al., 2021) although both of those studies only used a single good rather than a basket since they were focused on only one type of OSS (web servers). Since there is no readily available database for proprietary equivalents of OSS, we conduct a search based on subjective  perception  of  popularity  of  OSS  and  we  then  search  for  pecuniary,  closed-source substitutes for them. The resulting basket of 20 OSS packages with proprietary substitutes is a good representation of the diversity of OSS. The software ranges from media and design software to statistical analysis programs, to database management and web server software. 21\n\n21 Table A5 shows the basket of OSS and their proprietary equivalents that we used. To create this basket, we looked for proprietary software that had an OSS equivalent that was similar in its overall function and feature set, and sought to identify pairs of software that, in aggregate, captured a broad and representative set of the types of OSS that exist.\n\nBased on our OSS equivalent substitute proprietary goods basket we then obtain prices for each proprietary software equivalent and we calculated the COCOMO labor market supply-side value for each OSS product in the basket which we use as a proxy - for lack of the code from the proprietary software - for the COCOMO labor supply side value of the proprietary software (e.g., the cost it would take to pay a programmer to write that proprietary software from scratch). We then calculate the average COCOMO labor supply-side value of the basket, \ud835\udc49 !,1#23.4 ,  and  the average price for the basket, \ud835\udc43 !,1#23.4 . 22 Since, we know the labor market supply-side value of all OSS, \ud835\udc49 ! \"#$%&amp; , we can setup the following equation and obtain the price of OSS, \ud835\udc43 ! for the goodsmarket for all OSS via a simple scaling transformation:\n\n<!-- formula-not-decoded -->\n\nThis results in the following goods-market supply-side value:\n\n<!-- formula-not-decoded -->\n\n<!-- formula-not-decoded -->\n\nWe can then obtain the equivalent demand-side goods-market values as follows:\n\n<!-- formula-not-decoded -->\n\nFrom the goods market side, we consider the equivalent price that a firm would charge if it produced all existing widely used OSS and then sold it as a product to customers.\n\nTable A6, column 3 shows that the value on the demand side ranges between $177 million and $244 million across the different buckets independent of the country of origin from which programmers are hired. Naturally, the goods-market value will be substantially smaller than the labor demand value since this imaginary firm will make a profit at a comparatively low price by producing the software once and then selling it to many customers. Further, while Greenstein and Nagle (2014) as well as Murciano-Goroff et al. (2021) focus on one particular type of software only (web servers), we attempt to expand on their approach to many goods. However, the data limitations become a stronger constraint in this context which makes it inherently more difficult\n\n22 We obtained the average price of the goods-market proprietary basket by using a 3 years lifespan of software, i.e. 1/(1-0.66), so the depreciation factor is 0.33. This is consistent with the United States Internal Revenue Service (IRS) rules for depreciating software, which states 'If you can depreciate the cost of computer software, use the straight line method over a useful life of 36 months.' https://www.irs.gov/publications/p946#en\\_US\\_2022\\_publink1000107354.\n\nto  estimate  the  value  through  this  approach  while  requiring  substantially  more  assumptions. Instead of a pure goods-market approach, this requires assistance from the labor-market approach in terms of scaling for the estimate, which ultimately leads to a substantial underestimate of the value of OSS. Further, the pricing strategy of the proprietary software counterparts is sensitive to the  market  demand.  With  the  goods-market  approach  extending  to  multiple  goods,  the  strong implicit assumption is that the market demands for our basket software and our sample OSS are similar, so they lead to commensurate prices.\n\nAn alternative and even more simplified goods-market back-of-the-envelope calculation that does not account for lines of code and relies on no scaling from the labor market approach would simply be to multiply a price of a reference good with the usage. We can take the minimum, average, and maximum prices of the basket of proprietary goods as captured in the reference price vector p = (69.99, 1610.17, 5800) and simply multiply it with usage from the combined Census and BuiltWith sample (Table 1). Based on those imputed proprietary price assumptions, the goods market demand side value would range from $0.2 - $16.5 trillion (minimum price - maximum price)  with  the  mean  price  resulting  in  a  value  estimate  of  $4.5  trillion.  However,  while  this estimate creates slightly more variance than the labor market approach, it is inherently flawed by simply assuming that the imputed prices are identical for each open source product based on the reference price. We further think this very simple back-of-the-envelope is an orange to apples comparison since the goods in our basket are fully functional, stand-alone software packages, while the packages in the Census and BuiltWith datasets are comprised of application libraries, which are generally smaller than such stand-alone packages.\n\nGiven all the complexities and assumptions one has to make due to lack of data for a goodsmarket approach, we place stronger emphasis on the labor cost approach highlighted in the main body but we include this method here for completeness.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The goods-market approach to estimating the value of OSS is limited by several factors. It relies on numerous assumptions, such as the similarity in market demands for proprietary software and OSS, which may not hold true. This approach can lead to a substantial underestimate of OSS value because it does not fully account for the differences in the nature of the software being compared; proprietary software is often fully functional and stand-alone, whereas OSS may consist of smaller application libraries. Additionally, the goods-market approach is sensitive to market demand and pricing strategies, which can vary significantly. Due to these complexities and the lack of comprehensive data, the goods-market approach can result in an \"orange to apples\" comparison. In contrast, the labor-market approach, which focuses on the cost of labor required to develop the software, is emphasized as it provides a more reliable estimate by considering the actual resources invested in creating OSS.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}], "relevancy": [{"query": "**Question:**", "contexts": ["Working Paper 24-038", "## -- Figure 4 about here ---\n\nFigure 3 shows the Lorenz curves and the number of repositories that a fraction of programmers has contributed to for the supply side (Panel A) and the demand side (Panel B). A Lorenz curve that  lay  directly  on  the  45  degree  line  would  imply  a  very  even  distribution  of  values  across programmers. Instead, Panel A shows a Lorenz curve as a nearly flat line with a drastic increase for the final share of programmers. This implies that the distribution of the supply value is highly uneven and considerably more concentrated than the 80/20 standard. Indeed, the last five percent of programmers, or 3,000 programmers, generate over 93% of the supply side value. Similarly, Panel B shows - when accounting for usage - that those last five percent generate over 96% of the demand side value.  In  aggregate,  this  indicates  that  a  very  small  number  of  programmers  are creating the bulk of OSS code that is heavily relied upon by firms to create their own code. In both Panel A and Panel B we can also see a rise in the number of repositories for the last 10-15% of programmers that contribute  to  the  highest  value,  which  implies  that  the  uneven  value  that  is generated by few programmers is not just due to a few highly valuable repositories but by the contributions of this handful of contributors to a substantial number of repositories."], "response": "The analysis of the Lorenz curves indicates a highly uneven distribution of contributions among programmers. A small percentage of programmers are responsible for the majority of the value on both the supply and demand sides. Specifically, the last five percent of programmers generate over 93% of the supply side value and over 96% of the demand side value. This suggests that a few programmers are significantly contributing to a large number of repositories, which in turn are heavily relied upon by firms for creating their own code.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Based on the working paper \"The Value of Open Source Software\" by Manuel Hoffmann, Frank Nagle, and Yanuo Zhou, what is the estimated demand-side value of widely-used open source software (OSS), and how does it compare to the supply-side value?", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## Abstract\n\nThe  value  of  a  non-pecuniary  (free)  product  is  inherently  difficult  to  assess.  A  pervasive example is open source software (OSS), a global public good that plays a vital role in the economy and is foundational for most technology we use today. However, it is difficult to measure the value of OSS due to its non-pecuniary nature and lack of centralized usage tracking. Therefore, OSS remains largely unaccounted for in economic measures. Although prior studies have estimated the supply-side costs to recreate this software, a lack of data has hampered estimating the much larger demand-side (usage) value created by OSS. Therefore, to understand the complete economic and social value of widely-used OSS, we leverage unique global data from two complementary sources capturing  OSS  usage  by  millions  of  global  firms.  We  first  estimate  the  supply-side  value  by calculating the cost to recreate the most widely used OSS once. We then calculate the demandside value based on a replacement value for each firm that uses the software and would need to build it internally if OSS did not exist. We estimate the supply-side value of widely-used OSS is $4.15 billion, but that the demand-side value is much larger at $8.8 trillion. We find that firms would need to spend 3.5 times more on software than they currently do if OSS did not exist. The top six programming languages in our sample comprise 84% of the demand-side value of OSS. Further, 96% of the demand-side value is created by only 5% of OSS developers.\n\nJEL Classification:\n\nH4; O3; J0\n\nKeywords: Open-source software, global public good\n\nAcknowledgement: The authors are grateful for  financial  and  administrative  support  from  the Linux  Foundation  without  which  the  data  from  the  Census  would  not  have  otherwise  been available.  We  greatly  appreciate  the  support  of  the  Research  Computing  Services  at  Harvard Business School, the Laboratory for Innovation Science at Harvard, the Linux Foundation, and the software composition analysis data providers Snyk, the Synopsys Cybersecurity Research Center, and FOSSA. We thank Tianli Li and Misha Bouzinier for excellent research assistance. We are also  thankful  to  the  software  developer  Boris  Martinovic  as  well  as  Rich  Lander  and  Scott Hanselman from Microsoft for insights into the .NET ecosystem. We received helpful feedback from participants at the Harvard Business School Values and Valuations Conference, the Harvard Business School D  Research Day, and the 2023 Academy of Management Conference. 3\n\n- a Harvard Business School, Harvard University, 150 Western Avenue, Suite 6.220, Allston, MA 02134, E-Mail: mhoffmann@hbs.edu.\n- b Harvard Business School, Harvard University, Morgan 213, Soldiers Field, Boston, MA, 02134, E-Mail: fnagle@hbs.edu.\n- c Rotman School of Management, University of Toronto, 105 St. George Street, Toronto, ON, M5S 3E6, Canada, E-Mail: yanuo.zhou@rotman.utoronto.ca."], "response": "The estimated demand-side value of widely-used open source software (OSS) is $8.8 trillion. This value is significantly larger than the supply-side value, which is estimated at $4.15 billion.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:**", "contexts": ["Working Paper 24-038", "## -- Figure 4 about here ---\n\nFigure 3 shows the Lorenz curves and the number of repositories that a fraction of programmers has contributed to for the supply side (Panel A) and the demand side (Panel B). A Lorenz curve that  lay  directly  on  the  45  degree  line  would  imply  a  very  even  distribution  of  values  across programmers. Instead, Panel A shows a Lorenz curve as a nearly flat line with a drastic increase for the final share of programmers. This implies that the distribution of the supply value is highly uneven and considerably more concentrated than the 80/20 standard. Indeed, the last five percent of programmers, or 3,000 programmers, generate over 93% of the supply side value. Similarly, Panel B shows - when accounting for usage - that those last five percent generate over 96% of the demand side value.  In  aggregate,  this  indicates  that  a  very  small  number  of  programmers  are creating the bulk of OSS code that is heavily relied upon by firms to create their own code. In both Panel A and Panel B we can also see a rise in the number of repositories for the last 10-15% of programmers that contribute  to  the  highest  value,  which  implies  that  the  uneven  value  that  is generated by few programmers is not just due to a few highly valuable repositories but by the contributions of this handful of contributors to a substantial number of repositories."], "response": "The analysis of Lorenz curves in the context of programmer contributions to repositories reveals a highly uneven distribution of value. A small fraction of programmers, specifically the last five percent, are responsible for generating the majority of both supply and demand side values. This indicates that a limited number of programmers are significantly contributing to the creation of open-source software code, which is extensively utilized by firms. Additionally, these top contributors are involved in a substantial number of repositories, suggesting that their impact is not limited to a few high-value projects but spans across numerous repositories.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "The estimated demand-side value of widely-used open source software (OSS) is $8.8 trillion, which is significantly larger than the supply-side value, estimated at $4.15 billion. This indicates that firms would need to spend 3.5 times more on software than they currently do if OSS did not exist.", "contexts": ["## --- Table 1 about here ---\n\nTable  1  shows  descriptive  statistics  from  both  data  sets  separately.  The  inward-facing Census  (Panel  A)  contains  just  over  261.7  million  lines  of  code  with  72%  of  the  lines  being attributable to the top programming languages. The average package includes 142 thousand lines of code with a slightly lower average of 113 thousand lines of code for the subset of top languages. When considering the demand (usage) side, we observe that the Census packages were used over 2.7 million times while 92% of this usage is attributable to the top languages. The average package was used 1,472.4 times with a higher usage of around 1,497.5 for the top  languages.  For  the outward-facing  BuiltWith  data  we  find  similar  patterns,  but  at  different  levels.  The  packages included from BuiltWith include over 82 million lines of code, 71% of which are attributable to the  top  programming  languages.  The  average  package  within  the  BuiltWith  sample  has  111 thousand  lines  of  code  with  a  lower  average  of  around  80  thousand  lines  of  code  for  the  top languages. This is because our BuiltWith data primarily consists of JavaScript-based packages, which are often smaller than packages written in other languages. BuiltWith packages were used over 142 thousand times where 99.97% were attributable to the top languages. Next, we used these raw observations to calculate the value of all OSS through the labor market approach and estimated the value created from the supply and demand side.\n\n--- Table 2 about here ---\n\nTable 2 shows the estimates for the value of OSS based on the firm-relevant joint Census and BuiltWith sample. All estimates in Table 2 are based only on software languages classified in bucket  1  from  Table  A1,  which  are  the  most  likely  to  be  written  by  a  human  rather  than  a machine. 19 The first column contains estimates with wages from a low income country (India), the global  average  wage,  and  a  high  income  country  (United  States  of  America),  respectively  (as described above). To reproduce all widely-used OSS once (e.g., the idea of OSS still exists, but all current OSS is deleted and needs to be coded from scratch), using programmers at the average developer wage from India, it would require an investment of $1.22 billion. In contrast, if we use the average developer wage from the United States, then reproducing all widely-used OSS would require  an  investment  of  $6.22  billion.  Using  a  pool  of  programmers  from  across  the  world, weighed based on the existing geographic contributions to OSS as discussed above, would lead to an investment somewhere in between the low and high-income country, $4.15 billion. It is useful to compare these numbers to those from similar studies to understand differences in valuing all OSS (prior studies) versus that which is widely used (our study). Robbins et al. (2021) and Blind et al. (2021) use a method similar to ours and estimate that the value of OSS created in the US is $38 billion in 2019 and that created in the EU is \u20ac1 billion in 2018. Wachs et al. (2022) show that roughly 50% of OSS contributions come from the US and EU combined. In aggregate, that would lead these studies to give a global value of OSS of $78 billion. Thus, our middle estimate of a supply-side value of $4.15 billion for only firm-oriented and widely used OSS is a credible lowerbound and highlights the higher estimations of the total of supply-side value of OSS when not considering whether or not a given OSS package is widely used. This further indicates that the supply-side value of the most widely used OSS is roughly 5.5% of the supply-side value of all OSS.\n\nThe second column in Table 2 contains the demand side estimates based on the labor market approach. We find that if firms had to recreate all OSS packages they used (e.g., OSS itself no longer existed and every firm that used an OSS package had to recreate it), then the entire cost would amount to between $2.59 trillion to $13.18 trillion using labor from the low wage or high wage country only, respectively. A pool of programmers across the globe could recreate all of OSS that is being widely used for a cost of approximately $8.80 trillion. Interpreting this number is\n\n19 Tables in the appendix show the equivalent values from Table 2 when including software language buckets 1 and 2 (Table A3) and all three software language buckets (Table A4).\n\nslightly more complicated but still feasible. According to a Statista (2023) report, global software revenue in 2020 (the same year as our data) was $531.7 billion. However, this represents a flow, not a stock, of software. Relying on government estimates that software fully depreciates over three years, we can do a back of the envelope calculation and consider the purchase value of the full stock of prepackaged software used in 2020 as the aggregate of that sold from 2018 to 2020, which is $1.54 trillion. Further, this represents only the expenditure on prepackaged software and does  not  include  custom  purchased  or  in-house  developed  software.  Here,  the  best  obtainable estimates of private-sector investment in software overall come from the United States National Income and Product Accounts data (NIPA 2023). In 2020, the national account data shows that in the  US,  private  firms  spent  $479.2  billion  on  software,  of  which  45%  ($215.5  billion)  was prepackaged. If we assume this is a consistent ratio for the rest of the world, then the total amount firms spent on software being used in 2020 was $3.4 trillion (= $1.54 trillion/0.45). Combining this rough estimate with the demand side estimate of the value of OSS based on an average global wage ($8.8 trillion), this indicates firms would spend $12.2 trillion (=$3.4 trillion + $8.8 trillion), or three and a half times what they currently spend if they needed to pay in-house developers to write the OSS that they currently use for free.", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The estimated demand-side value of widely-used open source software (OSS) is indeed $8.8 trillion, which is significantly larger than the supply-side value of $4.15 billion. This suggests that if OSS did not exist, firms would need to spend approximately 3.5 times more on software than they currently do, highlighting the substantial cost savings and value that OSS provides to businesses.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the paper aim to address the challenge of measuring the value of open source software (OSS), and why is this measurement important?", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The paper aims to address the challenge of measuring the value of open source software (OSS) by estimating both the supply-side and demand-side values. It uses a labor market approach to calculate the labor replacement cost of recreating OSS packages, applying the Constructive Cost Model II (COCOMO II) to estimate the person-hours required to write the code from scratch. This supply-side value is then scaled by the number of times firms use each package to obtain a demand-side value. The measurement is important because OSS plays a critical role in the economy, serving as a modern example of 'the commons.' Understanding its value is crucial to ensuring its sustainability and avoiding the 'tragedy of the commons,' where shared resources are overused but underinvested in. Accurate measurement can inform better support and investment in OSS, which is vital for the health of the digital economy and the broader economy built upon it.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The paper aims to address the challenge of measuring the value of open source software (OSS) by providing estimates for both the price (p) and the quantity (q) of OSS using newly collected data from multiple sources. Traditionally, measuring the value of a good or service involves multiplying the price by the quantity sold. However, in the case of OSS, the price is generally zero since the source code is publicly available, and the quantity is unknown due to the lack of restrictions on how the code may be copied and reused. The measurement of OSS's value is important because OSS plays a critical role in the economy and represents a modern example of 'the commons,' which is at risk of the 'tragedy of the commons.' Understanding its value can help in managing and preserving this shared resource effectively.", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## Abstract\n\nThe  value  of  a  non-pecuniary  (free)  product  is  inherently  difficult  to  assess.  A  pervasive example is open source software (OSS), a global public good that plays a vital role in the economy and is foundational for most technology we use today. However, it is difficult to measure the value of OSS due to its non-pecuniary nature and lack of centralized usage tracking. Therefore, OSS remains largely unaccounted for in economic measures. Although prior studies have estimated the supply-side costs to recreate this software, a lack of data has hampered estimating the much larger demand-side (usage) value created by OSS. Therefore, to understand the complete economic and social value of widely-used OSS, we leverage unique global data from two complementary sources capturing  OSS  usage  by  millions  of  global  firms.  We  first  estimate  the  supply-side  value  by calculating the cost to recreate the most widely used OSS once. We then calculate the demandside value based on a replacement value for each firm that uses the software and would need to build it internally if OSS did not exist. We estimate the supply-side value of widely-used OSS is $4.15 billion, but that the demand-side value is much larger at $8.8 trillion. We find that firms would need to spend 3.5 times more on software than they currently do if OSS did not exist. The top six programming languages in our sample comprise 84% of the demand-side value of OSS. Further, 96% of the demand-side value is created by only 5% of OSS developers.\n\nJEL Classification:\n\nH4; O3; J0\n\nKeywords: Open-source software, global public good\n\nAcknowledgement: The authors are grateful for  financial  and  administrative  support  from  the Linux  Foundation  without  which  the  data  from  the  Census  would  not  have  otherwise  been available.  We  greatly  appreciate  the  support  of  the  Research  Computing  Services  at  Harvard Business School, the Laboratory for Innovation Science at Harvard, the Linux Foundation, and the software composition analysis data providers Snyk, the Synopsys Cybersecurity Research Center, and FOSSA. We thank Tianli Li and Misha Bouzinier for excellent research assistance. We are also  thankful  to  the  software  developer  Boris  Martinovic  as  well  as  Rich  Lander  and  Scott Hanselman from Microsoft for insights into the .NET ecosystem. We received helpful feedback from participants at the Harvard Business School Values and Valuations Conference, the Harvard Business School D  Research Day, and the 2023 Academy of Management Conference. 3\n\n- a Harvard Business School, Harvard University, 150 Western Avenue, Suite 6.220, Allston, MA 02134, E-Mail: mhoffmann@hbs.edu.\n- b Harvard Business School, Harvard University, Morgan 213, Soldiers Field, Boston, MA, 02134, E-Mail: fnagle@hbs.edu.\n- c Rotman School of Management, University of Toronto, 105 St. George Street, Toronto, ON, M5S 3E6, Canada, E-Mail: yanuo.zhou@rotman.utoronto.ca."], "response": "The paper seeks to measure the value of open source software (OSS) by estimating both the price and quantity of OSS using newly collected data. This is challenging because OSS is typically free, making its price zero, and its usage is difficult to track due to the lack of restrictions on copying and reuse. Understanding the value of OSS is crucial as it plays a vital role in the economy and exemplifies the concept of 'the commons,' which faces the risk of being overused and underinvested in. Accurately measuring its value can aid in better management and preservation of this important shared resource.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the concept of the \"tragedy of the commons\" relate to the challenges faced in measuring the value of open-source software (OSS), and what are the implications for the digital economy?", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The concept of the \"tragedy of the commons\" relates to the challenges in measuring the value of open-source software (OSS) by highlighting the risk that shared resources, like OSS, may be overused and underinvested in. This occurs because OSS is freely available and widely used, yet its value is difficult to quantify due to the lack of traditional pricing and usage data. The implications for the digital economy are significant, as OSS is a critical component of modern digital infrastructure. Without proper measurement and investment, the sustainability of OSS could be threatened, potentially impacting the broader economy that relies on it. Understanding and addressing these challenges is crucial to ensure the continued health and growth of the digital economy.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The \"tragedy of the commons\" refers to the overuse and underinvestment in shared resources, as individuals prioritize their own benefits over the collective good. This concept is applicable to open-source software (OSS) because, like shared grazing lands, OSS is a communal resource that is critical to the economy. However, its value is difficult to measure, which can lead to overuse and underinvestment. If the value of OSS is not accurately measured and maintained, it risks crumbling under its own success, similar to the tragedy of the commons. This has significant implications for the digital economy, as OSS is a foundational element that supports various economic activities. Therefore, accurately measuring the value of OSS is crucial to ensure its sustainability and the health of the broader economy.", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## Abstract\n\nThe  value  of  a  non-pecuniary  (free)  product  is  inherently  difficult  to  assess.  A  pervasive example is open source software (OSS), a global public good that plays a vital role in the economy and is foundational for most technology we use today. However, it is difficult to measure the value of OSS due to its non-pecuniary nature and lack of centralized usage tracking. Therefore, OSS remains largely unaccounted for in economic measures. Although prior studies have estimated the supply-side costs to recreate this software, a lack of data has hampered estimating the much larger demand-side (usage) value created by OSS. Therefore, to understand the complete economic and social value of widely-used OSS, we leverage unique global data from two complementary sources capturing  OSS  usage  by  millions  of  global  firms.  We  first  estimate  the  supply-side  value  by calculating the cost to recreate the most widely used OSS once. We then calculate the demandside value based on a replacement value for each firm that uses the software and would need to build it internally if OSS did not exist. We estimate the supply-side value of widely-used OSS is $4.15 billion, but that the demand-side value is much larger at $8.8 trillion. We find that firms would need to spend 3.5 times more on software than they currently do if OSS did not exist. The top six programming languages in our sample comprise 84% of the demand-side value of OSS. Further, 96% of the demand-side value is created by only 5% of OSS developers.\n\nJEL Classification:\n\nH4; O3; J0\n\nKeywords: Open-source software, global public good\n\nAcknowledgement: The authors are grateful for  financial  and  administrative  support  from  the Linux  Foundation  without  which  the  data  from  the  Census  would  not  have  otherwise  been available.  We  greatly  appreciate  the  support  of  the  Research  Computing  Services  at  Harvard Business School, the Laboratory for Innovation Science at Harvard, the Linux Foundation, and the software composition analysis data providers Snyk, the Synopsys Cybersecurity Research Center, and FOSSA. We thank Tianli Li and Misha Bouzinier for excellent research assistance. We are also  thankful  to  the  software  developer  Boris  Martinovic  as  well  as  Rich  Lander  and  Scott Hanselman from Microsoft for insights into the .NET ecosystem. We received helpful feedback from participants at the Harvard Business School Values and Valuations Conference, the Harvard Business School D  Research Day, and the 2023 Academy of Management Conference. 3\n\n- a Harvard Business School, Harvard University, 150 Western Avenue, Suite 6.220, Allston, MA 02134, E-Mail: mhoffmann@hbs.edu.\n- b Harvard Business School, Harvard University, Morgan 213, Soldiers Field, Boston, MA, 02134, E-Mail: fnagle@hbs.edu.\n- c Rotman School of Management, University of Toronto, 105 St. George Street, Toronto, ON, M5S 3E6, Canada, E-Mail: yanuo.zhou@rotman.utoronto.ca."], "response": "The \"tragedy of the commons\" describes a situation where shared resources are overused and underinvested in because individuals focus on their own benefits rather than the collective good. This concept is relevant to open-source software (OSS) because, like shared resources, OSS is a communal asset vital to the economy. Its value is challenging to measure, which can lead to overuse and insufficient investment. If OSS's value is not properly assessed and maintained, it risks deteriorating under its own success, akin to the tragedy of the commons. This poses significant challenges for the digital economy, as OSS is a crucial foundation for various economic activities. Therefore, accurately measuring OSS's value is essential to ensure its sustainability and the overall health of the economy.", "passing": true, "feedback": "Yes, the response for the query is in line with the context information provided. The response accurately describes the concept of the \"tragedy of the commons\" and its relevance to open-source software (OSS) as a communal resource that is critical to the economy but difficult to measure in value. The response also highlights the potential risks of overuse and underinvestment in OSS, which aligns with the context provided. Additionally, the response emphasizes the importance of accurately measuring the value of OSS to ensure its sustainability and the health of the broader economy, which is consistent with the context information.", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How do the Census II and BuiltWith datasets complement each other in measuring the value of Open Source Software (OSS) usage, and why is this important for reducing measurement error?", "contexts": ["## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy.", "## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS."], "response": "The Census II and BuiltWith datasets complement each other by capturing different dimensions of Open Source Software (OSS) usage. The Census II dataset is inward-facing, focusing on OSS code used within products that firms create, while the BuiltWith dataset is outward-facing, identifying OSS code that consumers interact with through firm websites. This dual approach is important for reducing measurement error because it minimizes the risk of double-counting and ensures a more comprehensive understanding of OSS usage. By covering both internal and external applications of OSS, the combined datasets provide a more accurate estimate of the value of OSS, capturing its impact on both the supply and demand sides of the economy.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The Census II and BuiltWith datasets complement each other by focusing on different aspects of OSS usage. The Census II dataset aggregates data from software composition analysis (SCA) firms to capture OSS that is built into the software a company sells, while the BuiltWith dataset identifies OSS libraries used in a company's website technology. This complementary approach is important because it reduces the chances of double-counting OSS usage across datasets, thereby minimizing measurement error. By focusing on widely deployed and practically used OSS, rather than all available OSS projects, the study enhances the accuracy of measuring OSS value, avoiding overestimation that could occur if unused projects were valued equally with widely used ones.", "contexts": ["## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy.", "## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS."], "response": "The Census II and BuiltWith datasets complement each other by focusing on different dimensions of OSS usage. The Census II dataset captures OSS integrated into products that companies create, while the BuiltWith dataset identifies OSS libraries used in company websites. This approach minimizes the risk of double-counting OSS usage, thereby reducing measurement error. By concentrating on widely used OSS, the study provides a more accurate estimation of OSS value, avoiding overestimation that could result from including less utilized projects.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the study contribute to the understanding of the value of open-source software (OSS) in the context of the 'productivity paradox' and what implications does it have for firms and policymakers?", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The study contributes to understanding the value of open-source software (OSS) in the context of the 'productivity paradox' by highlighting the significant cost savings and productivity enhancements that OSS provides at a societal level. It demonstrates that OSS contributes massively to the economy by reducing the need for firms to recreate software from scratch, thus enhancing productivity despite the paradox where IT investments sometimes show limited impact on productivity statistics. For firms, the study underscores the importance of OSS in their production processes and suggests that firms should not only use OSS but also contribute to its maintenance to ensure the health of the OSS ecosystem. For policymakers, the study emphasizes the growing importance of OSS to the economy and suggests that there should be more societal support for the creation and maintenance of OSS, beyond just securing the existing ecosystem. This support is crucial given that a small number of contributors are responsible for a large portion of the value created by OSS.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The study contributes to the understanding of the value of OSS in the context of the 'productivity paradox' by providing a comprehensive estimate of the value created by OSS, not only from the supply-side (cost to create) but also from the demand-side (usage by firms). This dual approach offers insights into the substantial cost-savings and productivity enhancements that OSS provides at a societal level, addressing the paradox where IT investments often show limited impact on productivity statistics. For firms, the study highlights the importance of OSS in production and encourages active contributions to OSS maintenance, emphasizing that such contributions are minimal compared to the costs firms would incur without OSS. For policymakers, the study underscores the growing economic importance of OSS and supports actions to bolster the OSS ecosystem, aligning with recent initiatives by entities like the European Commission and the U.S. government.", "contexts": ["## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below.", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The study contributes to the understanding of the value of OSS in the context of the 'productivity paradox' by offering a comprehensive estimate of OSS value from both the supply-side (cost to create) and the demand-side (usage by firms). This dual approach reveals significant cost-savings and productivity enhancements that OSS provides at a societal level, addressing the paradox where IT investments often show limited impact on productivity statistics. For firms, the study underscores the importance of OSS in production and encourages active contributions to OSS maintenance, noting that such contributions are minimal compared to the costs firms would face without OSS. For policymakers, the study highlights the growing economic importance of OSS and supports actions to strengthen the OSS ecosystem, aligning with recent initiatives by entities like the European Commission and the U.S. government.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How do the two main data sources used in the study complement each other in estimating the value of open source software (OSS)?", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy."], "response": "The two main data sources used in the study complement each other by focusing on different aspects of open source software (OSS) usage. The \"Census II of Free and Open Source Software - Application Libraries\" provides insights into OSS that is integrated into the software products a company sells, capturing internal usage. On the other hand, the BuiltWith dataset focuses on OSS used in a company's website, capturing outward-facing usage. By combining these datasets, the study reduces the chances of double-counting and provides a more comprehensive measurement of OSS usage, allowing for a more accurate estimation of its value.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The study uses two complementary main data sources to estimate the value of OSS: the Census and BuiltWith. The Census is inward-facing and allows the identification of OSS code that goes into products firms create, capturing packaged software usage within firms. BuiltWith is outward-facing and identifies OSS code that consumers directly interact with through firm websites, capturing usage in websites that are consumer-facing. The overlap between the two datasets is minimal, with only 18 packages found in both, reducing concerns about double-counting. These datasets complement each other by capturing different dimensions of OSS usage, providing a comprehensive view of OSS's value in both internal firm operations and external consumer interactions.", "contexts": ["## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy.", "## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS."], "response": "The study utilizes two main data sources to estimate the value of open source software (OSS): the Census and BuiltWith. The Census data is inward-facing, focusing on OSS code used within products created by firms, capturing internal software usage. BuiltWith data is outward-facing, identifying OSS code that consumers interact with on firm websites, capturing external consumer-facing usage. The overlap between these datasets is minimal, with only 18 packages appearing in both, which helps mitigate concerns about double-counting. Together, these datasets provide a comprehensive view of OSS's value in both internal firm operations and external consumer interactions.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: What was the primary purpose of the Census II of Free and Open Source Software conducted by the Linux Foundation and the Laboratory for Innovation Science at Harvard?", "contexts": ["## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS.", "## Manuel Hoffmann\n\nHarvard Business School\n\nFrank Nagle\n\nHarvard Business School\n\nYanuo Zhou\n\nUniversity of Toronto\n\nWorking Paper 24-038\n\nCopyright \u00a9 2024 by Manuel Hoffmann, Frank Nagle, and Yanuo Zhou.\n\nWorking papers are in draft form. This working paper is distributed for purposes of comment and discussion only. It may not be reproduced without permission of the copyright holder. Copies of working papers are available from the author.\n\nThe authors are grateful for financial and administrative support from the Linux Foundation without which the data from the Census would not have otherwise been available. We greatly appreciate the support of the Research Computing Services at Harvard Business School, the Laboratory for Innovation Science at Harvard, the Linux Foundation, and the software composition analysis data providers Snyk, the Synopsys Cybersecurity Research Center, and FOSSA. We thank Tianli Li and Misha Bouzinier for excellent research assistance. We are also thankful to the software developer Boris Martinovic as well as Rich Lander and Scott Hanselman from Microsoft for insights into the .NET ecosystem. We received helpful feedback from participants at the Harvard Business School Values and Valuations Conference, the Harvard Business School D3 Research Day, and the 2023 Academy of Management Conference.\n\nFunding for this research was provided in part by Harvard Business School."], "response": "The primary purpose of the Census II of Free and Open Source Software was to aggregate data from major software composition analysis firms to identify and observe the precise amount and type of internal OSS usage within firms. This was done to ensure compliance with OSS license agreements and to trace dependencies that reveal indirect OSS usage, providing a comprehensive view of OSS embedded in proprietary software.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: The primary purpose of the Census II of Free and Open Source Software was to aggregate data from three major software composition analysis (SCA) firms to better understand the usage and dependencies of open source software (OSS) within proprietary software. This was done to ensure compliance with OSS license agreements and to provide a detailed understanding of the internal and indirect OSS usage by firms, particularly in the context of mergers and acquisitions.", "contexts": ["## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS.", "## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy."], "response": "The primary purpose of the Census II of Free and Open Source Software was to aggregate data from major software composition analysis firms to understand the usage and dependencies of open source software within proprietary software. This effort aimed to ensure compliance with OSS license agreements and provide insights into the internal and indirect OSS usage by firms, especially in the context of mergers and acquisitions.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How did the researchers ensure the accuracy of the GitHub repository URLs matched to the OSS packages in the Census data?", "contexts": ["## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS.", "## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy."], "response": "The researchers ensured the accuracy of the GitHub repository URLs matched to the OSS packages in the Census data by first attempting to obtain the URLs from libraries.io. For those URLs that did not match, they performed Google searches using the package name and \"GitHub Repository\" to find the best match. Additionally, they manually searched for URLs for the remaining unmatched packages. As a robustness check, they randomly selected 50 package-repository matches derived from the Google Search method and manually confirmed their accuracy.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The researchers ensured the accuracy of the GitHub repository URLs matched to the OSS packages by performing several steps. Initially, they matched 1,657 packages to repositories using libraries.io. For unmatched packages, they used the Google API to search for the package name and 'GitHub Repository,' treating the first result as the best match, which added 174 more packages. They then manually searched for the remaining 169 packages. As a robustness check, they randomly selected 50 package-repository matches derived from the Google Search method and manually confirmed all matches to be correct, providing additional support for the automated matching method.", "contexts": ["## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The researchers ensured the accuracy of the GitHub repository URLs matched to the OSS packages through a multi-step process. Initially, they matched a significant number of packages using libraries.io. For those packages that remained unmatched, they employed the Google API to search for the package name along with 'GitHub Repository,' using the first result as the best match. This method added more packages to their list. For the remaining unmatched packages, they conducted manual searches. To verify the reliability of the Google Search method, they randomly selected a sample of package-repository matches and manually confirmed their accuracy, thereby supporting the effectiveness of the automated matching approach.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How did the researchers ensure that their analysis of OSS usage was focused on the private sector, and what was the match rate achieved in this process?", "contexts": ["## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below.", "## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy."], "response": "The researchers ensured their analysis of OSS usage was focused on the private sector by using outward-facing data from BuiltWith, which they matched to industry information from the Orbis and Compustat datasets. They achieved a match rate of 94.6% for BuiltWith websites with an industry through this process.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The researchers ensured their analysis of OSS usage was focused on the private sector by matching the adopting domains of JavaScript-related OSS from BuiltWith with company websites recorded in Orbis, Compustat, and PitchBook, which are databases capturing registered businesses worldwide. This matching process resulted in a match rate of 38.6%, corresponding to around 3.4 million websites of distinct firms. This approach excluded OSS used by non-commercial websites, such as personal websites, from their analysis.", "contexts": ["## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy.", "## 2. Empirical Setting and Data\n\nAlthough the concept of free and open software has existed since the 1950's, it became more popular in the 1980's due to the efforts of Richard Stallman and his launch of the GNU Project and the Free Software Foundation (Maracke, 2019). However, it was in the 1990's that OSS took off after Linus Torvalds released the Linux kernel, a now widely adopted OSS operating system (Tozzi, 2016). Today, OSS is considered a key building block of the digital economy and is widely used by software developers in everything from phones to cars to refrigerators to cutting-edge AI (Lifshitz-Assaf and Nagle, 2021).\n\nWe use two complementary main data sources to estimate the value of OSS. The first is the Census and is inward facing. It allows us to identify OSS code that goes into products that firms create. The second dataset is BuiltWith and is outward facing, allowing us to identify OSS code  that  consumers  directly  interact  with  through  firm  websites.  Since  the  raw  data  in  both datasets only contains package names, version numbers, and package manager names, and does not  contain  any  source  code  related  information,  we  first  obtain  the  publicly  accessible  code repository for each package which includes package-level information including the lines of code and  the  programming  languages  used.  One  may  worry  about  double-counting  for  the  value calculations as a result of using two separate datasets. However, the overlap of both the Census and  the  BuiltWith  sample  is  very  small:  there  are  only  18  packages  found  in  both  datasets. Moreover, it is unlikely that double counting is a concern as the two datasets capture different dimensions of OSS usage: the Census captures packaged software whose usage is inward-facing while BuiltWith captures usage in websites that are outward-facing. Finally, as a supplementary\n\ndataset, we use GHTorrent, a detailed history of OSS-related activity on GitHub, the most popular OSS hosting platform and a commonly used data source for studies of OSS (e.g., Burton et al, 2017; Conti, Peukert, and Roche, 2023; Fackler, Hofmann, and Laurentsyeva, 2023; Kim, 2020; Tang, Wang, &amp; Tong, 2023). This detailed historical data allows us to go deeper into how the value  of  OSS  is  created  by  better  understanding  the  dispersion  of  the  contributions  across individual OSS developers. We describe the details of all three data sources and their preparation for estimation below.\n\nCensus. The  Census  II  of  Free  and  Open  Source  Software  (here:  Census)  was  jointly undertaken by the Linux Foundation and the Laboratory for Innovation Science at Harvard (Nagle et  al.,  2022). 1 The  Census  was  created  via  the  aggregation  of  data  from  three  major  software composition analysis (SCA) firms with thousands of clients across the globe. SCAs are hired to scan the codebase of a client and gather the OSS usage embedded in their proprietary software to ensure they are not violating any OSS license agreements.  Frequently this takes place as part of 2 the due diligence process related to mergers and acquisitions. Unlike other OSS demand measures available from public sources such as package download counts and code changes, the way this data was collected ensures that we observe the precise amount and type of internal OSS usage of the firms. In addition, it allows us to trace the dependencies each package relies on, so that we can observe the indirect OSS usage that is commonly hidden and difficult to obtain.  The result is over 3 2.7 million observations of OSS packages being used within products created by the SCA client firms for the calendar year 2020 (January 1 to December 31, 2020). 4\n\nThe Census project standardized package names based on the naming system of libraries.io -  a  widely  used  site  maintained  by  Tidelift  that  organizes  information  about  more  than  eight million open source packages. The Census focused on the top 2,000 packages based on usage\n\n1 The precise methodologies for the data collection and aggregation are detailed in the Census report by Nagle et al (2022).\n\n2 OSS usage licenses vary a great deal and while some licenses are very open and allow the code to be reused in any manner, including within proprietary code that will be made available for sale at a non-zero price, other licenses restrict reuse to only be allowed if the resultant code is released under the same OSS license (known as copyleft). A detailed discussion of OSS licenses can be found in Lerner and Tirole (2005) and Almeida et al (2017).\n\n3 Indirect OSS usage is captured by dependency analysis and is necessary to accurately measure the full breadth of the OSS a firm relies on. For example, if a firm's proprietary code calls OSS package A, but package A, in turn, calls package B, then only looking at the direct calls would miss that package B was a required building block for the firm's proprietary code.\n\n4 The Census defines an OSS package as 'a unit of software that can be installed and managed by a package manager,' and  defines  a  package  manager  as  'software  that  automates  the  process  of  installing  and  otherwise  managing packages' (Nagle et al, 2022).\n\nreported from the three of the most prominent SCA vendors to identify the most widely used OSS rather  than  the  long-tail  of  the  usage  distribution.  This  led  to  packages  with  less  than  five observations  of  usage  being  dropped.  Since  packages  written  in  the  JavaScript  programming language, and usually hosted on the Node Package Manager (NPM), are generally smaller (fewer lines  of  code)  than  packages  in  other  languages  and  therefore  frequently  have  higher  usage numbers (since developers must include many small packages instead of a few large packages), the Census separately selected the top 1,000 NPM packages and the top 1,000 non-NPM hosted packages.\n\nThis final dataset covers 70% of the total usage of OSS observed in the raw data of the census.   For  each  of  these  2,000  OSS  packages  in  the  Census,  we  identified  the  raw  code 5 maintained on GitHub, the most widely used platform for hosting OSS.  We first attempted to 6 obtain the GitHub repository uniform resource locator (URL) for each package from libraries.io. We were able to match 1,657 packages to repositories via this initial method.  For URLs without 7 a  matching  repository,  we  performed  Google  searches  loosely  following  the  method  in  Singh (2020). More specifically, for each unmatched package, we used the Google API to search for the package name and 'GitHub Repository' and treated the first GitHub repository URL in the results as  its  best  matched  GitHub  URL.   This  resulted  in  an  additional  174  packages  matched  to  a 8 repository. Finally, we manually searched for URLs for the remaining 169 packages to identify the relevant repository. This entire process resulted in matching 1,840 out of the 2,000 Census packages to a code repository with the raw source code for the package. The unmatched packages were determined to have been either removed from GitHub or became proprietary (and thus the original source code was no longer available) and hence, the manual search allowed us to drop\n\n5 The packages that made up the remaining 30% of the full Census data in the long-tail usage distribution were not shared in the final report and therefore cannot be included in our analysis.\n\n6 GitHub  is  a  hosting  and  collaboration  platform  that  contributors  can  use  to  coordinate  the  development  and distribution of OSS projects. Founded in 2008, GitHub has become the largest hub for OSS development in the world. In January 2023, GitHub had more than 370 million repositories and over 100 million developers. In addition to personal users, a wide range of private firms actively use the GitHub platform, including Microsoft (which bought GitHub in 2018), Facebook, Google, and numerous other small and large firms.\n\n7 We attempted to access all repository URLs obtained as a sanity check to ensure they are in working condition. For those we could not access on GitHub, we manually found the correct URLs.\n\n8 As a robustness check, we randomly selected 50 package-repository matches derived from the Google Search method and we checked them by hand. All matches were manually confirmed to be correct providing additional support for the automated matching method.\n\nthese 160 unmatched packages (less than 8% of the Census sample of 2,000) with high confidence from our analysis.\n\nBuiltWith. The BuiltWith data contains scans of all public websites across the globe and identifies the technologies they use. Unlike the inward facing Census data which focus on the usage of OSS, the BuiltWith data scan for the use of both proprietary and OSS in firm websites without explicit differentiation. To separate OSS from proprietary software in BuiltWith, we turn to the subset of all open source web development software in the technology category that includes \"JavaScript and its libraries,\" which generates 778 observations corresponding to the NPM OSS category  in  the  Census  data.  There  are  two  reasons  for  this  sampling  choice.  First,  this  given category is constructed by BuiltWith and we use it as a proxy for OSS to separate it from pecuniary software.  Second,  JavaScript,  one  of  the  core  technologies  for  building  websites,  is  the  most popular programming language by usage on GitHub (GitHub, 2022) and thus enables us to capture the most important OSS from the demand side perspective. The scans include 8.8 million unique websites and 72.8 million corresponding observations of OSS usage from January 1 to November 16, 2020. Further, to ensure that we measure the value of OSS usage generated by the private sector,  we  match  the  adopting  domains  of  the  JavaScript-related  OSS  from  BuiltWith  with company websites recorded in Orbis, Compustat, and PitchBook, three commonly used databases of corporate activity that capture registered businesses across the world. Performing this match ensures that OSS used by non-commercial websites (e.g., an individual person's personal website) is excluded in our analysis. This results in a match-rate of 38.6%, which corresponds to around 3.4 million websites of distinct firms.\n\nFor the BuiltWith data, we cannot employ the first method we use for the Census (using libraries.io to help identify the repository URL) since only the technology names associated with the  packages  were  provided  by  BuiltWith,  and  other  information  (e.g.,  package  and  package manager  names)  is  not  included. 9 Hence,  we  start  by  performing  the  Google  Search  method mentioned above which results in a match of 695 packages to repositories. We then manually searched the Github URLs for 83 of the remaining unmatched packages, resulting in an addition of 46 packages. In total, for the BuiltWith data we were able to identify 741 out of 778 package-\n\n9 Since the package and package manager names are missing, a precise match using libraries.io was not feasible. Technology names are product names intended for customers and can be less technical and precise than the package names for internal development purposes. Thus, using technology names in a libraries.io search could cause significant ambiguity.\n\nrepository matches. As with the Census data, the remaining 37 unmatched packages (less than 5%) are dropped from our analysis because they had been deleted from GitHub.\n\nGHTorrent database. To obtain measures of the dispersion of the OSS value creation, we utilize  the  GHTorrent  database,  which  contains  the  entire  activity  history  on  GitHub  using GitHub's Representational State Transfer (REST) application programming interface (API). We leveraged  its  records  of  GitHub  repositories,  developer-level  commits,  and  developer  public profile information to estimate the contribution of each developer. We narrowed the sample for our developer contribution analysis in two steps. First, we winnowed the GitHub repositories and their  commits  from  GHTorrent  based  on  the  repository  URLs  of  our  joint  Census-BuiltWith sample. 10 Second, we focus on human contributions to OSS by removing approximately eight thousand (12%) GitHub contributors that we considered to be robots. 11 The final sample contains around sixty thousand developers and 2.3 million commits.\n\nTo prepare these three datasets for estimation, we first identified the number of lines of code and the programming languages used for each package using the OSS packages pygount (to count  the  number  of  lines  of  code)  and  linguist  (to  identify  programming  languages). 12 We categorize each distinct language into one of three different buckets moving from more likely human-written to more likely machine-written (see Table A1). Bucket 1 contains programming and markup languages (which are most likely to be human-written), bucket 3 contains data (most likely to be machine-written), and bucket 2 contains anything in between, such as config files and batch processing (which are sometimes human-written and sometimes machine-written, but it is difficult to tell based purely on looking at the code). 13 For our primary estimation we only use bucket 1 while providing robustness checks for buckets 2 and 3 in the Appendix, and thus our results represent a lower bound. Finally, for some analyses we dig deeper and show the top 5 programming languages (as classified by GitHub, 2022 for the year 2020; the year our data is from). The top 5 programming languages contain C (including C# and C++), Java, JavaScript,\n\n10 The match rate is over 96%, with the unmatched repositories accounting for only 0.15% of our calculated OSS demand value discussed below.\n\n11 The filtering is based on the 'fake user' classification by GHTorrent, as well as any usernames containing words 'bot' or 'robot', surrounded by special characters. This method is more conservative than other methods of bot detection  like  that  used  in  the  GitHub  Innovation  Graph  (https://innovationgraph.github.com/),  which  rely  on  a monthly commit frequency threshold.\n\n12 https://pypi.org/project/pygount/ and https://github.com/github-linguist/linguist\n\n13 Note that our focus is the cost to recreate OSS code written by humans, not robots. However, directly removing all OSS contributions from robot accounts is infeasible here, because we cannot observe the exact lines of code written by the robot accounts on GitHub.\n\nPython, and Typescript. We also add Go to this list of top languages since it is an increasingly widely used language in OSS."], "response": "The researchers ensured their analysis of OSS usage was focused on the private sector by matching the adopting domains of JavaScript-related OSS from BuiltWith with company websites recorded in Orbis, Compustat, and PitchBook, which are databases capturing registered businesses worldwide. This matching process resulted in a match rate of 38.6%, corresponding to around 3.4 million websites of distinct firms. This approach excluded OSS used by non-commercial websites, such as personal websites, from their analysis.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:**", "contexts": ["Working Paper 24-038", "## -- Figure 4 about here ---\n\nFigure 3 shows the Lorenz curves and the number of repositories that a fraction of programmers has contributed to for the supply side (Panel A) and the demand side (Panel B). A Lorenz curve that  lay  directly  on  the  45  degree  line  would  imply  a  very  even  distribution  of  values  across programmers. Instead, Panel A shows a Lorenz curve as a nearly flat line with a drastic increase for the final share of programmers. This implies that the distribution of the supply value is highly uneven and considerably more concentrated than the 80/20 standard. Indeed, the last five percent of programmers, or 3,000 programmers, generate over 93% of the supply side value. Similarly, Panel B shows - when accounting for usage - that those last five percent generate over 96% of the demand side value.  In  aggregate,  this  indicates  that  a  very  small  number  of  programmers  are creating the bulk of OSS code that is heavily relied upon by firms to create their own code. In both Panel A and Panel B we can also see a rise in the number of repositories for the last 10-15% of programmers that contribute  to  the  highest  value,  which  implies  that  the  uneven  value  that  is generated by few programmers is not just due to a few highly valuable repositories but by the contributions of this handful of contributors to a substantial number of repositories."], "response": "The analysis of the Lorenz curves in the figures indicates that a small percentage of programmers are responsible for generating the majority of value in both the supply and demand sides of open-source software (OSS) contributions. Specifically, the last five percent of programmers contribute over 93% of the supply side value and over 96% of the demand side value. This suggests a highly uneven distribution of contributions, with a few programmers significantly impacting a large number of repositories.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "What methodology is used to estimate the value of open-source software (OSS) in the context provided, and how does it account for the contributions of individual developers?", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The methodology used to estimate the value of open-source software (OSS) involves a labor market approach that considers both the supply and demand sides. The supply-side value is calculated by estimating the labor replacement cost of each OSS package using the Constructive Cost Model II (COCOMO II). This involves measuring the number of lines of code in each package and estimating the person-hours required to recreate it. The demand-side value is then determined by scaling the supply-side value based on the number of times firms use each package, while accounting for multiple usages within each firm.\n\nTo account for the contributions of individual developers, the methodology examines the inequality in the value creation process. It uses GHTorrent data to identify individual developer contributions in two ways: by their direct OSS value contributions and by the total number of repositories they contributed to. This helps to understand the concentration of contributions and whether a few developers are responsible for most of the value creation.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:**", "contexts": ["Working Paper 24-038", "## -- Figure 4 about here ---\n\nFigure 3 shows the Lorenz curves and the number of repositories that a fraction of programmers has contributed to for the supply side (Panel A) and the demand side (Panel B). A Lorenz curve that  lay  directly  on  the  45  degree  line  would  imply  a  very  even  distribution  of  values  across programmers. Instead, Panel A shows a Lorenz curve as a nearly flat line with a drastic increase for the final share of programmers. This implies that the distribution of the supply value is highly uneven and considerably more concentrated than the 80/20 standard. Indeed, the last five percent of programmers, or 3,000 programmers, generate over 93% of the supply side value. Similarly, Panel B shows - when accounting for usage - that those last five percent generate over 96% of the demand side value.  In  aggregate,  this  indicates  that  a  very  small  number  of  programmers  are creating the bulk of OSS code that is heavily relied upon by firms to create their own code. In both Panel A and Panel B we can also see a rise in the number of repositories for the last 10-15% of programmers that contribute  to  the  highest  value,  which  implies  that  the  uneven  value  that  is generated by few programmers is not just due to a few highly valuable repositories but by the contributions of this handful of contributors to a substantial number of repositories."], "response": "The analysis of Lorenz curves in the study reveals a highly uneven distribution of contributions among programmers in the open-source software (OSS) community. A small fraction of programmers, specifically the last five percent, are responsible for generating the majority of both supply and demand side values. These programmers contribute significantly to a large number of repositories, indicating that their impact is not limited to a few high-value projects but spans across many. This suggests that a small group of contributors plays a crucial role in the OSS ecosystem, providing the bulk of the code that firms rely on for their own development efforts.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "The methodology used to estimate the value of OSS in the provided context is a labor market approach. This approach calculates the replacement value of an OSS package by determining how much it would cost to reproduce the package by hiring a programmer and paying them a competitive market wage. The supply-side value is estimated by counting the lines of code in each unique OSS package and summing these values to obtain the total value. Additionally, the methodology examines the inequality in the value creation process by identifying individual developer contributions through their OSS value contributions and the total number of repositories they contributed to. This helps to understand the concentration of contributions and whether many or few developers contribute to the total value measured.", "contexts": ["## 3.1 Labor market approach\n\nFor the labor market approach, we estimate the value of OSS by calculating the replacement value of a package. We ask how much it would cost to reproduce the package by hiring a programmer and paying them a competitive market wage. To estimate this supply-side value ( \ud835\udc49 ! \"#$%&amp; ) , we take the complete list of OSS packages discussed above, and then count the lines of code in each unique\n\n14 In an alternative version, we use a mixture of a labor and goods market approach that is more closely aligned with Greenstein and Nagle (2014) and Murciano-Goroff, et al (2021). However, applying this method in our setting requires numerous additional assumptions due to data constraints. For simplicity we call it the goods market approach for which we provide the details and statistics, as well as the limitations in Appendix A.\n\npackage. 15 For each unique package,  , we calculate the value and then sum over all these values i to obtain the total value:\n\n<!-- formula-not-decoded -->\n\nIn this calculation, we implicitly do not incorporate any production externalities since we assume that there is no spillover knowledge from one package to the next that would lower the cost of programming. 16 This methodology is similar to that used by other papers that estimate the supply-side costs of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021).\n\nWe then calculate the demand-side value of OSS by incorporating the usage information ( Q) for each package:\n\n<!-- formula-not-decoded -->\n\nHere, we do not incorporate consumption externalities, i.e., we do not allow a benefit to arise for the general public when a package has been created and we further make sure that each firm is only replacing a package they use once, since a replaced package can be used within a firm as a club good (e.g., see Cornes and Sandler, 1996). The value \ud835\udc49 ! \"#$%&amp; reflects the cost to rewrite all widely-used OSS once (e.g., the concept of OSS still exists, but all of these packages needed to be rewritten from scratch), while the value \ud835\udc49 + \"#$%&amp; reflects the cost for each firm that uses one of these OSS packages to pay a developer to rewrite those packages (e.g., OSS itself no longer exists).\n\nFor both the supply and demand models, we obtain the dollar-value for each package ( \ud835\udc43 ( ) via the Constructive Cost Model II, also abbreviated as COCOMO II (Boehm 1984, Boehm et al. 2009). The model has previously been used by the United States Department of Defense to estimate software project costs as well as in prior research estimating the value of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021). It is a highly flexible model that allows us to create non-linear transformations of lines of code to dollar-values. It uses the following modelling equation:\n\n15 We use only the pure lines of code excluding documentation lines and empty lines. Hence, we underestimate the true value of recreating each package.\n\n16 Similar to a representative agent model (e.g. see Williamson 2006), one may think of each package being reproduced by separate programmers who are identical replicas of each other (and therefore have the same skill level, but do not become more efficient via learning).\n\n<!-- formula-not-decoded -->\n\n( (\n\nwhere \ud835\udc3f represents the lines of codes in thousands and E the effort in person-month units for each project  . Consistent with Blind et al. (2021), we use the default parameter values for i \ud835\udefc , \ud835\udefd and \ud835\udf02. The parameters \ud835\udefc \ud835\udefd , are non-linear adjustment factors set to 2.94, and 1.0997 respectively . The parameter \ud835\udf02 is an effort-adjustment factor which can be modified to incorporate subjective assessments of product, hardware, personnel, and project attributes. Since we do not have a prior for each project, we set \ud835\udf02 to the default value of one. To obtain the price ( \ud835\udc43 ( ) of each OSS project, we  then  multiply  the  results  of  equation  (3)  by  the  weighted  global  wage  that  an  average programmer would obtain on the open market. To calculate a global wage, we include the base monthly salaries of software developers from Salary Expert for the top 30 countries in terms of their GitHub developer counts in 2021 (Wachs et al., 2022). 17 The weight of each country is its share of active GitHub contributors over the total contributors in the top 30 countries. We further create bounds by using a low-wage (India) and high-wage (USA) labor market for the wage to better understand how the value would vary by the pool of programmers used to recreate all of OSS. 18", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The methodology for estimating the value of OSS involves calculating the replacement cost of each package by determining the expense of hiring a programmer at a competitive market wage to reproduce the package. This is done by counting the lines of code in each unique OSS package and summing these values to obtain the total supply-side value. Additionally, the approach examines the inequality in value creation by analyzing individual developer contributions, both in terms of their OSS value contributions and the number of repositories they have contributed to. This analysis helps to understand the concentration of contributions and whether the total value is generated by many or few developers.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the methodology described in the context account for the supply-side and demand-side values of Open Source Software (OSS), and what are the key assumptions made in this approach?", "contexts": ["## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below.", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The methodology for assessing the value of Open Source Software (OSS) involves both supply-side and demand-side evaluations. On the supply side, the approach calculates the labor replacement cost of each OSS package using the COCOMO II model to estimate the person-hours required to recreate the software from scratch. This involves measuring the lines of code and applying global wage data to estimate the labor costs. The demand-side value is determined by scaling the supply-side value based on the frequency of use by firms, while accounting for multiple usages within the same firm.\n\nKey assumptions in this approach include the idea that all OSS would need to be recreated by each firm using it if OSS did not exist, and that the concept of OSS would still exist, necessitating only a single rewrite of the code. Additionally, the methodology assumes that the value of OSS can be measured by the labor costs required to recreate it, and that the usage data accurately reflects the demand for OSS.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The methodology described in the context calculates the supply-side value of OSS by estimating the cost to rewrite all widely-used OSS packages using the Constructive Cost Model II (COCOMO II). This model translates lines of code into dollar values, considering the effort in person-month units and using default parameter values for non-linear adjustment factors. The demand-side value is calculated by incorporating usage information for each package, ensuring that each firm replaces a package only once, treating it as a club good. Key assumptions include the exclusion of production and consumption externalities, meaning no spillover knowledge or public benefit is considered, and the assumption that programmers are identical replicas with no efficiency gains from learning. The global wage for programmers is calculated based on the base monthly salaries from the top 30 countries by GitHub developer counts, with bounds created using low-wage (India) and high-wage (USA) labor markets.", "contexts": ["## 3.1 Labor market approach\n\nFor the labor market approach, we estimate the value of OSS by calculating the replacement value of a package. We ask how much it would cost to reproduce the package by hiring a programmer and paying them a competitive market wage. To estimate this supply-side value ( \ud835\udc49 ! \"#$%&amp; ) , we take the complete list of OSS packages discussed above, and then count the lines of code in each unique\n\n14 In an alternative version, we use a mixture of a labor and goods market approach that is more closely aligned with Greenstein and Nagle (2014) and Murciano-Goroff, et al (2021). However, applying this method in our setting requires numerous additional assumptions due to data constraints. For simplicity we call it the goods market approach for which we provide the details and statistics, as well as the limitations in Appendix A.\n\npackage. 15 For each unique package,  , we calculate the value and then sum over all these values i to obtain the total value:\n\n<!-- formula-not-decoded -->\n\nIn this calculation, we implicitly do not incorporate any production externalities since we assume that there is no spillover knowledge from one package to the next that would lower the cost of programming. 16 This methodology is similar to that used by other papers that estimate the supply-side costs of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021).\n\nWe then calculate the demand-side value of OSS by incorporating the usage information ( Q) for each package:\n\n<!-- formula-not-decoded -->\n\nHere, we do not incorporate consumption externalities, i.e., we do not allow a benefit to arise for the general public when a package has been created and we further make sure that each firm is only replacing a package they use once, since a replaced package can be used within a firm as a club good (e.g., see Cornes and Sandler, 1996). The value \ud835\udc49 ! \"#$%&amp; reflects the cost to rewrite all widely-used OSS once (e.g., the concept of OSS still exists, but all of these packages needed to be rewritten from scratch), while the value \ud835\udc49 + \"#$%&amp; reflects the cost for each firm that uses one of these OSS packages to pay a developer to rewrite those packages (e.g., OSS itself no longer exists).\n\nFor both the supply and demand models, we obtain the dollar-value for each package ( \ud835\udc43 ( ) via the Constructive Cost Model II, also abbreviated as COCOMO II (Boehm 1984, Boehm et al. 2009). The model has previously been used by the United States Department of Defense to estimate software project costs as well as in prior research estimating the value of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021). It is a highly flexible model that allows us to create non-linear transformations of lines of code to dollar-values. It uses the following modelling equation:\n\n15 We use only the pure lines of code excluding documentation lines and empty lines. Hence, we underestimate the true value of recreating each package.\n\n16 Similar to a representative agent model (e.g. see Williamson 2006), one may think of each package being reproduced by separate programmers who are identical replicas of each other (and therefore have the same skill level, but do not become more efficient via learning).\n\n<!-- formula-not-decoded -->\n\n( (\n\nwhere \ud835\udc3f represents the lines of codes in thousands and E the effort in person-month units for each project  . Consistent with Blind et al. (2021), we use the default parameter values for i \ud835\udefc , \ud835\udefd and \ud835\udf02. The parameters \ud835\udefc \ud835\udefd , are non-linear adjustment factors set to 2.94, and 1.0997 respectively . The parameter \ud835\udf02 is an effort-adjustment factor which can be modified to incorporate subjective assessments of product, hardware, personnel, and project attributes. Since we do not have a prior for each project, we set \ud835\udf02 to the default value of one. To obtain the price ( \ud835\udc43 ( ) of each OSS project, we  then  multiply  the  results  of  equation  (3)  by  the  weighted  global  wage  that  an  average programmer would obtain on the open market. To calculate a global wage, we include the base monthly salaries of software developers from Salary Expert for the top 30 countries in terms of their GitHub developer counts in 2021 (Wachs et al., 2022). 17 The weight of each country is its share of active GitHub contributors over the total contributors in the top 30 countries. We further create bounds by using a low-wage (India) and high-wage (USA) labor market for the wage to better understand how the value would vary by the pool of programmers used to recreate all of OSS. 18", "## 4. Results\n\nAfter applying the labor market approach using COCOMO II, we obtain global estimates for the value of OSS. To calculate the overall value, we first need the underlying number of lines of code (to calculate the supply-side value) and then the usage statistics (for the demand-side value). Since there may be substantial heterogeneity in value by programming languages, we also show the top programming languages during our investigation period in the year 2020, as discussed above."], "response": "The methodology estimates the supply-side value of open-source software (OSS) by calculating the cost to rewrite all widely-used OSS packages using the Constructive Cost Model II (COCOMO II). This model converts lines of code into dollar values, factoring in the effort required in person-month units and applying default parameter values for non-linear adjustment factors. The demand-side value is determined by incorporating usage information for each package, ensuring that each firm replaces a package only once, treating it as a club good. The approach excludes production and consumption externalities, meaning it does not account for spillover knowledge or public benefits, and assumes programmers are identical replicas without efficiency gains from learning. The global wage for programmers is derived from the base monthly salaries in the top 30 countries by GitHub developer counts, with bounds set using low-wage (India) and high-wage (USA) labor markets.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the study measure the value contributions of developers to open-source software (OSS), and what graphical tool is used to understand the inequality in these contributions?", "contexts": ["## 3.2 Contribution Measurement\n\nTo better understand how value is created and whether it is created equally or unequally, we build up a graphical depiction in three steps. In the first step, we measure the value contributions by developers. In a second step, we obtain a measure for the number of repositories developers contribute to. Finally, we provide a graphical representation of both using the commonly known concept of the Lorenz curve to better understand the extent of inequality in contributions. We describe the details below.\n\nValue Contribution. We calculated the supply and demand values of OSS that each developer contributed. At the repository level, we quantified each developer's proportional work contribution by calculating their share of commits to the total number of commits for a repository. This share was subsequently multiplied with the repository's demand and supply values separately to derive\n\n17 There are 179 counties in Wachs et al. (2022), but the top 30 countries consist of over 88% of the global active contributors with each of the rest having less than 0.6% share. The top 30 countries are listed in Table A2.\n\n18 We choose the high- and low-wage reference countries based on a combination of the number of active GitHub developers and the average annual software developer base wage.\n\nthe value-added contribution of that individual contributor to the repository. Finally, we aggregate the value contributions across all repositories for each developer. The individual value contribution from a unique developer Dev , \ud835\udc49 -+./ , can be expressed as:\n\n<!-- formula-not-decoded -->\n\nwhere \ud835\udf0e ( +./ is the share of commits the focal developer made in repository  , and i \ud835\udc49 (-is the demand or supply value of the entire repository   specified in Equations (1) and (2), with i \ud835\udc57 \u2208 {\ud835\udc37, \ud835\udc46} , and N is the number of repositories in our main sample, i.e. Census and BuiltWith combined.\n\nRepository  Contribution. This  is  simply  the  number  of  repositories  a  given  developer contributes to, and it is expressed as follows:\n\n<!-- formula-not-decoded -->\n\nwhere   is the indicator function equal to 1 when the developer has a non-zero number of commits \ud835\udfd9 to  repository i .  This  measure  entails  the  variety  of  OSS  needs  being  addressed  by  individual developers. Jointly with the value contribution measure, they help us understand whether the value that is being generated overall is concentrated within a small number of developers. It may be generally more desirable for the whole OSS ecosystem and its diversity if individual developers participate in many repositories and not just a few.\n\nMeasuring  the  Dispersion  of  Contributions . To  graphically  examine  the  dispersion  of developer contribution values, we utilized Lorenz curves (Lorenz, 1905), with respect to both demand and supply side values. Lorenz curves are a well-established way to represent inequality and, as such, they allow us to better understand how dispersed developer contributions to OSS within the private economy are. Developers are systematically arranged in ascending order based on their contributions to OSS demand and supply, as delineated in Equation (7). Subsequently, these ranks were normalized to a scale ranging from 0 to 100 percentiles, serving as the x-axis values for the Lorenz Curves. The y-axis, on the other hand, presents the corresponding value contributions \ud835\udc49 -+./ . The graphical representation in the results section will elucidate the degree of inequality pertaining to the value contributions among developers. To supplement the analysis, we\n\nfurther investigated how dispersed the repository contribution, \ud835\udc41 +./ , is by plotting Equation (8). This enables us to ascertain whether any substantial value inequality stems from top contributors predominantly focusing on a narrow subset of exceptionally popular repositories, or alternatively, from their engagement with a broader spectrum of successful repositories.", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The study measures the value contributions of developers to open-source software (OSS) by calculating each developer's proportional work contribution through their share of commits to a repository. This share is then multiplied by the repository's demand and supply values to derive the value-added contribution of the individual developer. The contributions are aggregated across all repositories for each developer. To understand the inequality in these contributions, the study uses Lorenz curves, which are a well-established tool for representing inequality, to graphically examine the dispersion of developer contribution values.", "passing": true, "feedback": "YES. The response accurately reflects the context information provided. The study measures the value contributions of developers to open-source software (OSS) by calculating each developer's proportional work contribution through their share of commits to a repository, which is then multiplied by the repository's demand and supply values. The study uses Lorenz curves to understand the inequality in these contributions, as mentioned in the context.", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The study measures the value contributions of developers to OSS by calculating each developer's proportional work contribution at the repository level. This is done by determining their share of commits relative to the total number of commits for a repository. This share is then multiplied by the repository's demand and supply values to derive the value-added contribution of the individual contributor. These contributions are aggregated across all repositories for each developer. To understand the inequality in these contributions, the study uses Lorenz curves, which graphically represent the dispersion of developer contributions to OSS demand and supply. The Lorenz curves help illustrate the degree of inequality in value contributions among developers.", "contexts": ["## 3.2 Contribution Measurement\n\nTo better understand how value is created and whether it is created equally or unequally, we build up a graphical depiction in three steps. In the first step, we measure the value contributions by developers. In a second step, we obtain a measure for the number of repositories developers contribute to. Finally, we provide a graphical representation of both using the commonly known concept of the Lorenz curve to better understand the extent of inequality in contributions. We describe the details below.\n\nValue Contribution. We calculated the supply and demand values of OSS that each developer contributed. At the repository level, we quantified each developer's proportional work contribution by calculating their share of commits to the total number of commits for a repository. This share was subsequently multiplied with the repository's demand and supply values separately to derive\n\n17 There are 179 counties in Wachs et al. (2022), but the top 30 countries consist of over 88% of the global active contributors with each of the rest having less than 0.6% share. The top 30 countries are listed in Table A2.\n\n18 We choose the high- and low-wage reference countries based on a combination of the number of active GitHub developers and the average annual software developer base wage.\n\nthe value-added contribution of that individual contributor to the repository. Finally, we aggregate the value contributions across all repositories for each developer. The individual value contribution from a unique developer Dev , \ud835\udc49 -+./ , can be expressed as:\n\n<!-- formula-not-decoded -->\n\nwhere \ud835\udf0e ( +./ is the share of commits the focal developer made in repository  , and i \ud835\udc49 (-is the demand or supply value of the entire repository   specified in Equations (1) and (2), with i \ud835\udc57 \u2208 {\ud835\udc37, \ud835\udc46} , and N is the number of repositories in our main sample, i.e. Census and BuiltWith combined.\n\nRepository  Contribution. This  is  simply  the  number  of  repositories  a  given  developer contributes to, and it is expressed as follows:\n\n<!-- formula-not-decoded -->\n\nwhere   is the indicator function equal to 1 when the developer has a non-zero number of commits \ud835\udfd9 to  repository i .  This  measure  entails  the  variety  of  OSS  needs  being  addressed  by  individual developers. Jointly with the value contribution measure, they help us understand whether the value that is being generated overall is concentrated within a small number of developers. It may be generally more desirable for the whole OSS ecosystem and its diversity if individual developers participate in many repositories and not just a few.\n\nMeasuring  the  Dispersion  of  Contributions . To  graphically  examine  the  dispersion  of developer contribution values, we utilized Lorenz curves (Lorenz, 1905), with respect to both demand and supply side values. Lorenz curves are a well-established way to represent inequality and, as such, they allow us to better understand how dispersed developer contributions to OSS within the private economy are. Developers are systematically arranged in ascending order based on their contributions to OSS demand and supply, as delineated in Equation (7). Subsequently, these ranks were normalized to a scale ranging from 0 to 100 percentiles, serving as the x-axis values for the Lorenz Curves. The y-axis, on the other hand, presents the corresponding value contributions \ud835\udc49 -+./ . The graphical representation in the results section will elucidate the degree of inequality pertaining to the value contributions among developers. To supplement the analysis, we\n\nfurther investigated how dispersed the repository contribution, \ud835\udc41 +./ , is by plotting Equation (8). This enables us to ascertain whether any substantial value inequality stems from top contributors predominantly focusing on a narrow subset of exceptionally popular repositories, or alternatively, from their engagement with a broader spectrum of successful repositories.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The study measures the value contributions of developers to OSS by calculating each developer's proportional work contribution at the repository level. This is done by determining their share of commits relative to the total number of commits for a repository. This share is then multiplied by the repository's demand and supply values to derive the value-added contribution of the individual contributor. These contributions are aggregated across all repositories for each developer. To understand the inequality in these contributions, the study uses Lorenz curves, which graphically represent the dispersion of developer contributions to OSS demand and supply. The Lorenz curves help illustrate the degree of inequality in value contributions among developers.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the labor market approach using COCOMO II, what is the estimated investment required to reproduce all widely-used open-source software (OSS) using programmers from different income countries, and how does this compare to previous studies on the value of OSS?", "contexts": ["## 4. Results\n\nAfter applying the labor market approach using COCOMO II, we obtain global estimates for the value of OSS. To calculate the overall value, we first need the underlying number of lines of code (to calculate the supply-side value) and then the usage statistics (for the demand-side value). Since there may be substantial heterogeneity in value by programming languages, we also show the top programming languages during our investigation period in the year 2020, as discussed above.", "## 3.1 Labor market approach\n\nFor the labor market approach, we estimate the value of OSS by calculating the replacement value of a package. We ask how much it would cost to reproduce the package by hiring a programmer and paying them a competitive market wage. To estimate this supply-side value ( \ud835\udc49 ! \"#$%&amp; ) , we take the complete list of OSS packages discussed above, and then count the lines of code in each unique\n\n14 In an alternative version, we use a mixture of a labor and goods market approach that is more closely aligned with Greenstein and Nagle (2014) and Murciano-Goroff, et al (2021). However, applying this method in our setting requires numerous additional assumptions due to data constraints. For simplicity we call it the goods market approach for which we provide the details and statistics, as well as the limitations in Appendix A.\n\npackage. 15 For each unique package,  , we calculate the value and then sum over all these values i to obtain the total value:\n\n<!-- formula-not-decoded -->\n\nIn this calculation, we implicitly do not incorporate any production externalities since we assume that there is no spillover knowledge from one package to the next that would lower the cost of programming. 16 This methodology is similar to that used by other papers that estimate the supply-side costs of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021).\n\nWe then calculate the demand-side value of OSS by incorporating the usage information ( Q) for each package:\n\n<!-- formula-not-decoded -->\n\nHere, we do not incorporate consumption externalities, i.e., we do not allow a benefit to arise for the general public when a package has been created and we further make sure that each firm is only replacing a package they use once, since a replaced package can be used within a firm as a club good (e.g., see Cornes and Sandler, 1996). The value \ud835\udc49 ! \"#$%&amp; reflects the cost to rewrite all widely-used OSS once (e.g., the concept of OSS still exists, but all of these packages needed to be rewritten from scratch), while the value \ud835\udc49 + \"#$%&amp; reflects the cost for each firm that uses one of these OSS packages to pay a developer to rewrite those packages (e.g., OSS itself no longer exists).\n\nFor both the supply and demand models, we obtain the dollar-value for each package ( \ud835\udc43 ( ) via the Constructive Cost Model II, also abbreviated as COCOMO II (Boehm 1984, Boehm et al. 2009). The model has previously been used by the United States Department of Defense to estimate software project costs as well as in prior research estimating the value of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021). It is a highly flexible model that allows us to create non-linear transformations of lines of code to dollar-values. It uses the following modelling equation:\n\n15 We use only the pure lines of code excluding documentation lines and empty lines. Hence, we underestimate the true value of recreating each package.\n\n16 Similar to a representative agent model (e.g. see Williamson 2006), one may think of each package being reproduced by separate programmers who are identical replicas of each other (and therefore have the same skill level, but do not become more efficient via learning).\n\n<!-- formula-not-decoded -->\n\n( (\n\nwhere \ud835\udc3f represents the lines of codes in thousands and E the effort in person-month units for each project  . Consistent with Blind et al. (2021), we use the default parameter values for i \ud835\udefc , \ud835\udefd and \ud835\udf02. The parameters \ud835\udefc \ud835\udefd , are non-linear adjustment factors set to 2.94, and 1.0997 respectively . The parameter \ud835\udf02 is an effort-adjustment factor which can be modified to incorporate subjective assessments of product, hardware, personnel, and project attributes. Since we do not have a prior for each project, we set \ud835\udf02 to the default value of one. To obtain the price ( \ud835\udc43 ( ) of each OSS project, we  then  multiply  the  results  of  equation  (3)  by  the  weighted  global  wage  that  an  average programmer would obtain on the open market. To calculate a global wage, we include the base monthly salaries of software developers from Salary Expert for the top 30 countries in terms of their GitHub developer counts in 2021 (Wachs et al., 2022). 17 The weight of each country is its share of active GitHub contributors over the total contributors in the top 30 countries. We further create bounds by using a low-wage (India) and high-wage (USA) labor market for the wage to better understand how the value would vary by the pool of programmers used to recreate all of OSS. 18"], "response": "The labor market approach using COCOMO II estimates the investment required to reproduce all widely-used open-source software (OSS) by calculating the replacement value of each package. This involves determining the cost to hire programmers at competitive market wages to rewrite the software. The approach uses a global wage calculation, which includes base monthly salaries of software developers from the top 30 countries by GitHub developer counts. The study creates bounds by considering low-wage (India) and high-wage (USA) labor markets to understand how the value varies based on the pool of programmers. This method provides a comprehensive estimate of the investment needed, and it aligns with previous studies that have used similar methodologies to estimate the supply-side costs of OSS. However, the specific comparison to previous studies in terms of numerical values or differences in estimates is not detailed in the provided information.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The estimated investment required to reproduce all widely-used OSS using programmers at the average developer wage from India is $1.22 billion. If using the average developer wage from the United States, the investment would be $6.22 billion. Using a pool of programmers from across the world, weighed based on existing geographic contributions to OSS, the investment would be $4.15 billion. Previous studies, such as those by Robbins et al. (2021) and Blind et al. (2021), estimated the value of OSS created in the US to be $38 billion in 2019 and that created in the EU to be \u20ac1 billion in 2018. Wachs et al. (2022) indicated that roughly 50% of OSS contributions come from the US and EU combined, leading to a global value estimate of $78 billion.", "contexts": ["## --- Table 1 about here ---\n\nTable  1  shows  descriptive  statistics  from  both  data  sets  separately.  The  inward-facing Census  (Panel  A)  contains  just  over  261.7  million  lines  of  code  with  72%  of  the  lines  being attributable to the top programming languages. The average package includes 142 thousand lines of code with a slightly lower average of 113 thousand lines of code for the subset of top languages. When considering the demand (usage) side, we observe that the Census packages were used over 2.7 million times while 92% of this usage is attributable to the top languages. The average package was used 1,472.4 times with a higher usage of around 1,497.5 for the top  languages.  For  the outward-facing  BuiltWith  data  we  find  similar  patterns,  but  at  different  levels.  The  packages included from BuiltWith include over 82 million lines of code, 71% of which are attributable to the  top  programming  languages.  The  average  package  within  the  BuiltWith  sample  has  111 thousand  lines  of  code  with  a  lower  average  of  around  80  thousand  lines  of  code  for  the  top languages. This is because our BuiltWith data primarily consists of JavaScript-based packages, which are often smaller than packages written in other languages. BuiltWith packages were used over 142 thousand times where 99.97% were attributable to the top languages. Next, we used these raw observations to calculate the value of all OSS through the labor market approach and estimated the value created from the supply and demand side.\n\n--- Table 2 about here ---\n\nTable 2 shows the estimates for the value of OSS based on the firm-relevant joint Census and BuiltWith sample. All estimates in Table 2 are based only on software languages classified in bucket  1  from  Table  A1,  which  are  the  most  likely  to  be  written  by  a  human  rather  than  a machine. 19 The first column contains estimates with wages from a low income country (India), the global  average  wage,  and  a  high  income  country  (United  States  of  America),  respectively  (as described above). To reproduce all widely-used OSS once (e.g., the idea of OSS still exists, but all current OSS is deleted and needs to be coded from scratch), using programmers at the average developer wage from India, it would require an investment of $1.22 billion. In contrast, if we use the average developer wage from the United States, then reproducing all widely-used OSS would require  an  investment  of  $6.22  billion.  Using  a  pool  of  programmers  from  across  the  world, weighed based on the existing geographic contributions to OSS as discussed above, would lead to an investment somewhere in between the low and high-income country, $4.15 billion. It is useful to compare these numbers to those from similar studies to understand differences in valuing all OSS (prior studies) versus that which is widely used (our study). Robbins et al. (2021) and Blind et al. (2021) use a method similar to ours and estimate that the value of OSS created in the US is $38 billion in 2019 and that created in the EU is \u20ac1 billion in 2018. Wachs et al. (2022) show that roughly 50% of OSS contributions come from the US and EU combined. In aggregate, that would lead these studies to give a global value of OSS of $78 billion. Thus, our middle estimate of a supply-side value of $4.15 billion for only firm-oriented and widely used OSS is a credible lowerbound and highlights the higher estimations of the total of supply-side value of OSS when not considering whether or not a given OSS package is widely used. This further indicates that the supply-side value of the most widely used OSS is roughly 5.5% of the supply-side value of all OSS.\n\nThe second column in Table 2 contains the demand side estimates based on the labor market approach. We find that if firms had to recreate all OSS packages they used (e.g., OSS itself no longer existed and every firm that used an OSS package had to recreate it), then the entire cost would amount to between $2.59 trillion to $13.18 trillion using labor from the low wage or high wage country only, respectively. A pool of programmers across the globe could recreate all of OSS that is being widely used for a cost of approximately $8.80 trillion. Interpreting this number is\n\n19 Tables in the appendix show the equivalent values from Table 2 when including software language buckets 1 and 2 (Table A3) and all three software language buckets (Table A4).\n\nslightly more complicated but still feasible. According to a Statista (2023) report, global software revenue in 2020 (the same year as our data) was $531.7 billion. However, this represents a flow, not a stock, of software. Relying on government estimates that software fully depreciates over three years, we can do a back of the envelope calculation and consider the purchase value of the full stock of prepackaged software used in 2020 as the aggregate of that sold from 2018 to 2020, which is $1.54 trillion. Further, this represents only the expenditure on prepackaged software and does  not  include  custom  purchased  or  in-house  developed  software.  Here,  the  best  obtainable estimates of private-sector investment in software overall come from the United States National Income and Product Accounts data (NIPA 2023). In 2020, the national account data shows that in the  US,  private  firms  spent  $479.2  billion  on  software,  of  which  45%  ($215.5  billion)  was prepackaged. If we assume this is a consistent ratio for the rest of the world, then the total amount firms spent on software being used in 2020 was $3.4 trillion (= $1.54 trillion/0.45). Combining this rough estimate with the demand side estimate of the value of OSS based on an average global wage ($8.8 trillion), this indicates firms would spend $12.2 trillion (=$3.4 trillion + $8.8 trillion), or three and a half times what they currently spend if they needed to pay in-house developers to write the OSS that they currently use for free.", "## 3.1 Labor market approach\n\nFor the labor market approach, we estimate the value of OSS by calculating the replacement value of a package. We ask how much it would cost to reproduce the package by hiring a programmer and paying them a competitive market wage. To estimate this supply-side value ( \ud835\udc49 ! \"#$%&amp; ) , we take the complete list of OSS packages discussed above, and then count the lines of code in each unique\n\n14 In an alternative version, we use a mixture of a labor and goods market approach that is more closely aligned with Greenstein and Nagle (2014) and Murciano-Goroff, et al (2021). However, applying this method in our setting requires numerous additional assumptions due to data constraints. For simplicity we call it the goods market approach for which we provide the details and statistics, as well as the limitations in Appendix A.\n\npackage. 15 For each unique package,  , we calculate the value and then sum over all these values i to obtain the total value:\n\n<!-- formula-not-decoded -->\n\nIn this calculation, we implicitly do not incorporate any production externalities since we assume that there is no spillover knowledge from one package to the next that would lower the cost of programming. 16 This methodology is similar to that used by other papers that estimate the supply-side costs of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021).\n\nWe then calculate the demand-side value of OSS by incorporating the usage information ( Q) for each package:\n\n<!-- formula-not-decoded -->\n\nHere, we do not incorporate consumption externalities, i.e., we do not allow a benefit to arise for the general public when a package has been created and we further make sure that each firm is only replacing a package they use once, since a replaced package can be used within a firm as a club good (e.g., see Cornes and Sandler, 1996). The value \ud835\udc49 ! \"#$%&amp; reflects the cost to rewrite all widely-used OSS once (e.g., the concept of OSS still exists, but all of these packages needed to be rewritten from scratch), while the value \ud835\udc49 + \"#$%&amp; reflects the cost for each firm that uses one of these OSS packages to pay a developer to rewrite those packages (e.g., OSS itself no longer exists).\n\nFor both the supply and demand models, we obtain the dollar-value for each package ( \ud835\udc43 ( ) via the Constructive Cost Model II, also abbreviated as COCOMO II (Boehm 1984, Boehm et al. 2009). The model has previously been used by the United States Department of Defense to estimate software project costs as well as in prior research estimating the value of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021). It is a highly flexible model that allows us to create non-linear transformations of lines of code to dollar-values. It uses the following modelling equation:\n\n15 We use only the pure lines of code excluding documentation lines and empty lines. Hence, we underestimate the true value of recreating each package.\n\n16 Similar to a representative agent model (e.g. see Williamson 2006), one may think of each package being reproduced by separate programmers who are identical replicas of each other (and therefore have the same skill level, but do not become more efficient via learning).\n\n<!-- formula-not-decoded -->\n\n( (\n\nwhere \ud835\udc3f represents the lines of codes in thousands and E the effort in person-month units for each project  . Consistent with Blind et al. (2021), we use the default parameter values for i \ud835\udefc , \ud835\udefd and \ud835\udf02. The parameters \ud835\udefc \ud835\udefd , are non-linear adjustment factors set to 2.94, and 1.0997 respectively . The parameter \ud835\udf02 is an effort-adjustment factor which can be modified to incorporate subjective assessments of product, hardware, personnel, and project attributes. Since we do not have a prior for each project, we set \ud835\udf02 to the default value of one. To obtain the price ( \ud835\udc43 ( ) of each OSS project, we  then  multiply  the  results  of  equation  (3)  by  the  weighted  global  wage  that  an  average programmer would obtain on the open market. To calculate a global wage, we include the base monthly salaries of software developers from Salary Expert for the top 30 countries in terms of their GitHub developer counts in 2021 (Wachs et al., 2022). 17 The weight of each country is its share of active GitHub contributors over the total contributors in the top 30 countries. We further create bounds by using a low-wage (India) and high-wage (USA) labor market for the wage to better understand how the value would vary by the pool of programmers used to recreate all of OSS. 18"], "response": "The estimated investment required to reproduce all widely-used OSS using programmers at the average developer wage from India is $1.22 billion. If using the average developer wage from the United States, the investment would be $6.22 billion. Using a pool of programmers from across the world, weighed based on existing geographic contributions to OSS, the investment would be $4.15 billion. Previous studies, such as those by Robbins et al. and Blind et al., estimated the value of OSS created in the US to be $38 billion in 2019 and that created in the EU to be \u20ac1 billion in 2018. Wachs et al. indicated that roughly 50% of OSS contributions come from the US and EU combined, leading to a global value estimate of $78 billion.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the context provided, how does the estimated supply-side value of widely used OSS compare to the total supply-side value of all OSS, and what does this indicate about the significance of widely used OSS?", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The estimated supply-side value of widely used open source software (OSS) ranges from $1.22 billion to $6.22 billion. This value is derived from considering the labor replacement cost of recreating widely used OSS packages. The focus on widely used OSS, rather than all OSS, indicates that these packages hold significant importance due to their extensive deployment and usage by firms. This approach helps to avoid overestimation by excluding OSS projects that are not practically used, thereby highlighting the critical role and substantial value of widely used OSS in the economy.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The estimated supply-side value of widely used OSS is $4.15 billion, which is approximately 5.5% of the total supply-side value of all OSS, estimated at $78 billion. This indicates that while widely used OSS represents a small fraction of the total supply-side value, it still holds significant importance due to its firm-oriented nature and widespread usage.", "contexts": ["## --- Table 1 about here ---\n\nTable  1  shows  descriptive  statistics  from  both  data  sets  separately.  The  inward-facing Census  (Panel  A)  contains  just  over  261.7  million  lines  of  code  with  72%  of  the  lines  being attributable to the top programming languages. The average package includes 142 thousand lines of code with a slightly lower average of 113 thousand lines of code for the subset of top languages. When considering the demand (usage) side, we observe that the Census packages were used over 2.7 million times while 92% of this usage is attributable to the top languages. The average package was used 1,472.4 times with a higher usage of around 1,497.5 for the top  languages.  For  the outward-facing  BuiltWith  data  we  find  similar  patterns,  but  at  different  levels.  The  packages included from BuiltWith include over 82 million lines of code, 71% of which are attributable to the  top  programming  languages.  The  average  package  within  the  BuiltWith  sample  has  111 thousand  lines  of  code  with  a  lower  average  of  around  80  thousand  lines  of  code  for  the  top languages. This is because our BuiltWith data primarily consists of JavaScript-based packages, which are often smaller than packages written in other languages. BuiltWith packages were used over 142 thousand times where 99.97% were attributable to the top languages. Next, we used these raw observations to calculate the value of all OSS through the labor market approach and estimated the value created from the supply and demand side.\n\n--- Table 2 about here ---\n\nTable 2 shows the estimates for the value of OSS based on the firm-relevant joint Census and BuiltWith sample. All estimates in Table 2 are based only on software languages classified in bucket  1  from  Table  A1,  which  are  the  most  likely  to  be  written  by  a  human  rather  than  a machine. 19 The first column contains estimates with wages from a low income country (India), the global  average  wage,  and  a  high  income  country  (United  States  of  America),  respectively  (as described above). To reproduce all widely-used OSS once (e.g., the idea of OSS still exists, but all current OSS is deleted and needs to be coded from scratch), using programmers at the average developer wage from India, it would require an investment of $1.22 billion. In contrast, if we use the average developer wage from the United States, then reproducing all widely-used OSS would require  an  investment  of  $6.22  billion.  Using  a  pool  of  programmers  from  across  the  world, weighed based on the existing geographic contributions to OSS as discussed above, would lead to an investment somewhere in between the low and high-income country, $4.15 billion. It is useful to compare these numbers to those from similar studies to understand differences in valuing all OSS (prior studies) versus that which is widely used (our study). Robbins et al. (2021) and Blind et al. (2021) use a method similar to ours and estimate that the value of OSS created in the US is $38 billion in 2019 and that created in the EU is \u20ac1 billion in 2018. Wachs et al. (2022) show that roughly 50% of OSS contributions come from the US and EU combined. In aggregate, that would lead these studies to give a global value of OSS of $78 billion. Thus, our middle estimate of a supply-side value of $4.15 billion for only firm-oriented and widely used OSS is a credible lowerbound and highlights the higher estimations of the total of supply-side value of OSS when not considering whether or not a given OSS package is widely used. This further indicates that the supply-side value of the most widely used OSS is roughly 5.5% of the supply-side value of all OSS.\n\nThe second column in Table 2 contains the demand side estimates based on the labor market approach. We find that if firms had to recreate all OSS packages they used (e.g., OSS itself no longer existed and every firm that used an OSS package had to recreate it), then the entire cost would amount to between $2.59 trillion to $13.18 trillion using labor from the low wage or high wage country only, respectively. A pool of programmers across the globe could recreate all of OSS that is being widely used for a cost of approximately $8.80 trillion. Interpreting this number is\n\n19 Tables in the appendix show the equivalent values from Table 2 when including software language buckets 1 and 2 (Table A3) and all three software language buckets (Table A4).\n\nslightly more complicated but still feasible. According to a Statista (2023) report, global software revenue in 2020 (the same year as our data) was $531.7 billion. However, this represents a flow, not a stock, of software. Relying on government estimates that software fully depreciates over three years, we can do a back of the envelope calculation and consider the purchase value of the full stock of prepackaged software used in 2020 as the aggregate of that sold from 2018 to 2020, which is $1.54 trillion. Further, this represents only the expenditure on prepackaged software and does  not  include  custom  purchased  or  in-house  developed  software.  Here,  the  best  obtainable estimates of private-sector investment in software overall come from the United States National Income and Product Accounts data (NIPA 2023). In 2020, the national account data shows that in the  US,  private  firms  spent  $479.2  billion  on  software,  of  which  45%  ($215.5  billion)  was prepackaged. If we assume this is a consistent ratio for the rest of the world, then the total amount firms spent on software being used in 2020 was $3.4 trillion (= $1.54 trillion/0.45). Combining this rough estimate with the demand side estimate of the value of OSS based on an average global wage ($8.8 trillion), this indicates firms would spend $12.2 trillion (=$3.4 trillion + $8.8 trillion), or three and a half times what they currently spend if they needed to pay in-house developers to write the OSS that they currently use for free.", "## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy."], "response": "The estimated supply-side value of widely used OSS is $4.15 billion, which is about 5.5% of the total supply-side value of all OSS, estimated at $78 billion. This suggests that while widely used OSS constitutes a small portion of the total supply-side value, it remains significant due to its firm-oriented nature and extensive usage.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the context provided, which programming language has the highest demand-side value according to the BuiltWith dataset, and how does this compare to its supply-side value?", "contexts": ["## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there.", "## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python."], "response": "According to the BuiltWith dataset, JavaScript has the highest demand-side value. On the supply side, JavaScript also contributes significantly, being the primary driver of value in the BuiltWith sample. This indicates that JavaScript holds a strong position in both supply and demand within the BuiltWith dataset.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** According to the BuiltWith dataset, JavaScript has the highest demand-side value. This is consistent with its supply-side value, where JavaScript also contributes the most value. This alignment serves as a sanity check since the BuiltWith sample focused on JavaScript packages to proxy for OSS. TypeScript follows JavaScript in both demand and supply-side values, reflecting its role as a superset of JavaScript.", "contexts": ["## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there.", "## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python."], "response": "The statement is accurate. In the BuiltWith dataset, JavaScript indeed has the highest demand-side value, which aligns with its supply-side value where it also contributes the most. This consistency is expected since the BuiltWith sample focused on JavaScript packages. TypeScript follows JavaScript in both demand and supply-side values, reflecting its close relationship as a superset of JavaScript.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the study's findings, which industry has the highest demand-side value for open source software (OSS), and how does this compare to other industries?", "contexts": ["## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy.", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The study does not specify which particular industry has the highest demand-side value for open source software (OSS). It highlights substantial heterogeneity in the value across different industries but does not provide a detailed comparison or ranking of industries in terms of their demand-side value for OSS.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The industry with the highest demand-side value for open source software (OSS) is 'Professional, Scientific, and Technical Services,' with a usage value of around $43 billion. This is higher compared to 'Retail Trade' and 'Administrative and Support and Waste Management and Remediation Services,' which have usage values of $36 billion and $35 billion, respectively. In contrast, industries such as 'Mining, Quarrying, and Oil and Gas Extraction,' 'Utilities,' and 'Agriculture, Forestry, Fishing, and Hunting' constitute a much smaller portion of the demand-side value, reflecting the lesser role of software in these classical non-service sector industries.", "contexts": ["## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy.", "## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there."], "response": "The industry with the highest demand-side value for open source software (OSS) is 'Professional, Scientific, and Technical Services,' with a usage value of around $43 billion. This is higher compared to 'Retail Trade' and 'Administrative and Support and Waste Management and Remediation Services,' which have usage values of $36 billion and $35 billion, respectively. In contrast, industries such as 'Mining, Quarrying, and Oil and Gas Extraction,' 'Utilities,' and 'Agriculture, Forestry, Fishing, and Hunting' constitute a much smaller portion of the demand-side value, reflecting the lesser role of software in these classical non-service sector industries.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the demand-side value of Open Source Software (OSS) vary across different programming languages and industries, and what percentage of this value is generated by a small group of programmers?", "contexts": ["## 5. Conclusion\n\n20 Due to the Census containing proprietary customer information, it did not reveal industries across the whole dataset and as such we can only show the value across industries using the outward-facing data from BuiltWith. We match BuiltWith websites to industry information from the Orbis and Compustat datasets. 94.6% of BuiltWith websites are matched with an industry through this process. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nIn this study we estimate the value of widely-used open source software globally with two unique datasets: the Census of OSS and the BuiltWith data. We are able to estimate not only the supply side value of existing code (e.g., the cost it would take to rewrite each piece of widely-used OSS once) but also the demand side value for the private economy (e.g., the cost it would take for each company that uses a piece of OSS to rewrite it). While we do not focus on the long tail of OSS, we consider this an additional contribution of our study as focusing on OSS that is widely used allows us to more precisely understand the value created by OSS, rather than only measuring the  replacement  cost  for  all  OSS  (which  would  overestimate  the  true  value  since  many  OSS projects are not used in production code). However, although we highlight the substantial value that OSS has in our society based on a wide swath of usage data, it is not feasible to identify 100% of  the  OSS  used  across  the  world  and,  as  such,  our  demand-side  estimates  are  likely  an underestimate of the true value.\n\nAdjusted for usage, we find a large demand-side value of OSS of $8.8 trillion when using programmers from across the world, with some variance, depending on whether we would hire programmers from a low- or high-income country only. There is substantial heterogeneity in the value across programming languages and whether the code is inward-facing - i.e., for creating products that are being sold - or outward-facing - i.e., used on the company's website. The top 6 programming  languages  create  84%  of  the  demand-side  value.  We  also  show  substantial heterogeneity by industries and, finally, heterogeneity in the value contributions by programmers themselves.  Over  95%  percent  of  the  demand-side  value  is  generated  by  only  five  percent  of programmers, and those programmers contribute not only to a few widely used projects but to substantially more projects than the programmers that are engaged at the lower end of the value distribution.\n\nIn aggregate, our results show the substantial value that OSS contributes to the economy despite this value generally showing up as zero via direct measurement since prices equal zero and quantity is difficult to measure using public data alone. Our research lays the groundwork for future studies of not only OSS, but of all IT and its growing impact on the global economy.", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The demand-side value of Open Source Software (OSS) shows substantial variation across different programming languages and industries. The top six programming languages account for 84% of the demand-side value. Additionally, over 95% of the demand-side value is generated by only five percent of programmers, indicating that a small group of programmers contributes significantly to the overall value.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The demand-side value of OSS varies significantly across different programming languages and industries. The top six programming languages account for 84% of the demand-side value. Additionally, over 95% of the demand-side value is generated by only five percent of programmers. These high-value programmers contribute to a wide range of projects, not just a few widely used ones, indicating substantial heterogeneity in value contributions by programmers themselves.", "contexts": ["## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there.", "## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python."], "response": "The demand-side value of open-source software (OSS) shows considerable variation across programming languages and industries. The top programming languages, such as Go, JavaScript, and TypeScript, contribute significantly to this value, with Go leading in usage-generated value. Industries like 'Professional, Scientific, and Technical Services' and 'Retail Trade' receive substantial benefits from OSS, while traditional non-service sectors like 'Mining' and 'Utilities' see less impact. This indicates that the value contributions from programmers are diverse, spanning numerous projects rather than being concentrated in a few popular ones.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: Based on the context provided, what is the significance of open source software in the context of startup funding, as discussed in the work by Conti, Peukert, and Roche (2023)?", "contexts": ["## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1).", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "Open source software plays a significant role in startup funding by potentially enhancing the attractiveness of startups to investors. The work by Conti, Peukert, and Roche (2023) suggests that open sourcing can be a strategic move for startups, as it may signal innovation and transparency, thereby increasing investor confidence and interest. This approach can help startups secure funding by demonstrating their commitment to open collaboration and technological advancement.", "passing": false, "feedback": "NO", "score": 0.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: The work by Conti, Peukert, and Roche (2023) titled \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub\" suggests that open source software plays a significant role in startup funding. It implies that open sourcing can be a strategic move for startups to attract investors, as it may enhance transparency, collaboration, and innovation, thereby potentially increasing the startup's appeal to investors.", "contexts": ["## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1).", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The work by Conti, Peukert, and Roche suggests that open source software can be strategically beneficial for startups seeking funding. By open sourcing, startups may improve transparency and foster collaboration, which can enhance innovation and make them more attractive to investors.", "passing": false, "feedback": "NO", "score": 0.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: Based on the context provided, how does the article by Lifshitz-Assaf and Nagle (2021) in the Harvard Business Review Digital Articles contribute to the understanding of the role of open source in the digital economy?", "contexts": ["## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1).", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The article by Lifshitz-Assaf and Nagle (2021) in the Harvard Business Review Digital Articles emphasizes the critical role of open source software in the digital economy. It highlights the importance of measuring the value created by open source software to ensure its sustainability and continued contribution to economic growth. The article warns that without proper measurement and investment, open source software may face challenges similar to the \"tragedy of the commons,\" where resources are overused but underinvested in. This insight underscores the need for active participation and support from users and policymakers to maintain the health of the open source ecosystem, which is vital for the digital economy's future.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: The article by Lifshitz-Assaf and Nagle (2021) in the Harvard Business Review Digital Articles discusses the critical role that open source software plays in the digital economy and offers insights on how to protect it. This contribution is significant as it highlights the foundational nature of open source in driving digital innovation and economic activities, while also addressing the challenges and strategies for safeguarding its sustainability and security.", "contexts": ["## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes.", "## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1)."], "response": "The article by Lifshitz-Assaf and Nagle (2021) in the Harvard Business Review Digital Articles emphasizes the essential role of open source software in the digital economy. It underscores the importance of open source as a key driver of digital innovation and economic activities. The article also discusses the challenges associated with maintaining the sustainability and security of open source software and offers strategies to protect this vital resource.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the context provided, how has open source software been linked to firm productivity, and which study specifically addresses this relationship?", "contexts": ["## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1).", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "The value of open source software (OSS) in relation to firm productivity is highlighted in the context. It is noted that OSS contributes significantly to the modern economy by providing a cost-saving and productivity enhancement. The study by Nagle (2019a) specifically addresses the relationship between open source software and firm productivity, indicating that OSS plays a crucial role in enhancing productivity within firms.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** Open source software has been linked to firm productivity through its potential to enhance innovation, reduce costs, and improve software quality. The study that specifically addresses this relationship is by Nagle, F. (2019a), titled \"Open source software and firm productivity,\" published in Management Science, 65(3), 1191-1215. This study explores how the adoption and integration of open source software can contribute to increased productivity within firms.", "contexts": ["## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1).", "## 1. Introduction\n\nIn 2011, venture capitalist Mark Andreessen famously argued that 'software is eating the world' (Andreessen, 2011), a sentiment few would argue with today. More recently, venture capitalist Joseph Jacks argued that 'open source is eating software faster than software is eating the world,' (Jacks, 2022). Other recent studies have come to similar conclusions showing that open source software  (OSS)  -  software  whose  source  code  is  publicly  available  for  inspection,  use,  and modification and is often created in a decentralized manner and distributed for free - appears in 96% of codebases (Synopsys 2023), and that some commercial software consists of up to 99.9% freely available OSS (Musseau et al., 2022). Although in its early days OSS frequently copied features from existing proprietary software, OSS today includes cutting edge technology in various fields including artificial intelligence (AI), quantum computing, big data, and analytics.  However, despite the increasing importance of OSS to all software (and therefore to the entire economy), measuring its impact has been elusive. Traditionally, to measure the value created by a good or service,  economists  multiply  the  price  ( p )  times  the  quantity  sold  ( q ).  However,  in  OSS, p is generally zero since the source code is publicly available, and q is  unknown due to the limited number of restrictions around how the code may be copied and reused. For example, if a company downloads  a  piece  of  OSS  from  a  public  code  repository,  it  may  copy  it  thousands  of  times internally (legally) and then share it with suppliers or customers (also legally), so public download data is insufficient. Although some recent studies have sought to estimate the value of p (discussed below), data for estimating q has been unavailable or intractable for anything more than just a handful of OSS packages. Using newly collected data from multiple sources, the goal of this paper is to provide estimates for both p and q and to use those to shine light on the question: What is the value of open source software?\n\nUnderstanding the value of OSS is of critical importance not only due to the role it plays in the economy, but also due to it being one of the most successful and impactful modern examples of the centuries old economic concept of 'the commons' which run the risk of meeting the fate known as 'the tragedy of the commons.' This concept can trace its roots as far back as the 4 th -century BC philosopher Aristotle who wrote 'That which is common to the greatest number gets the least amount of care. Men pay most attention to what is their own and care less for what is common.'  (Aristotle,  1981).  William  Forster  Lloyd  (1833)  resurfaced  the  idea  in  modern economic thought by highlighting the example of shared tracts of land used for cattle grazing by\n\nmultiple cattle herders who each had an incentive to overuse the shared resource. Garrett Hardin (1968)  brought  the  concept  into  the  broader  zeitgeist  when  he  wrote  an  article  discussing  the problem entitled 'The Tragedy of the Commons.' Building on this work, Elinor Ostrom won the Nobel Prize for her research highlighting paths to avoiding the tragedy of the commons through community coordination efforts that did not necessitate government enforced laws to manage and guard the commons (Ostrom 1990). The parallels between shared grazing lands and shared digital infrastructure are palpable - the availability of communal grass to feed cattle, and in turn feed people, was critical to the agrarian economy, and the ability to not have to recreate code that someone else has already written is critical to the modern economy. Further, in both contexts, despite knowing grass and code are critical inputs to the economy, measuring their actual value is difficult. And, as the renowned mathematician and physicist Lord Kelvin is believed to have said, 'If you can't measure it, you can't improve it.' And if you cannot improve and maintain it, such common goods may crumble under the weight of their own success as they are overused, but underinvested in (Lifshitz-Assaf and Nagle, 2021). Therefore, measuring the value OSS creates is crucial to the future health of the digital economy, and the rest of the economy that is built on top of it.\n\nImportantly, recent studies have attempted to address these measurement issues but fall short of capturing both the breadth and depth of OSS usage - a gap we seek to fill with this paper. For example, researchers have attempted to gain breadth by using novel methodologies to estimate the labor replacement value of the current corpus of OSS created in the United States at $38 billion in 2019 (Robbins et al., 2021) and that created in the European Union at \u20ac1 billion (Blind et al., 2021) by imputing the labor costs that it would have taken to rewrite existing OSS. Such efforts do a very good job at estimating what it would cost to replace all existing OSS if it disappeared tomorrow. However, the resultant estimates rely on two important assumptions. First, that all OSS is equally valuable from a usage standpoint, and second that the concept of OSS would still exist, and society would just need to rewrite the code once, thus addressing the aforementioned problem of a missing value for p , but not addressing the missing value of q . In a world where OSS did not exist at all, then each piece of OSS software would not need to be rewritten just once, but instead would need to be rewritten by every firm that used the software (assuming the firm could freely share the software within its boundaries). Other research (Greenstein and Nagle, 2014; MurcianoGoroff, Zhuo, and Greenstein, 2021) has gone deeper into this hypothetical, albeit in a narrow\n\nmanner, by only focusing on web servers (which are public facing on the Internet and can therefore be readily measured). Using different methods, both studies measure q for this one type of software and impute p by using a goods replacement value approach based on the prices for closed-source alternatives offered by firms. With data from the United States the resulting estimates show a value of  $2  billion  for  the  OSS  Apache  Web  Server  in  2012  (Greenstein  and  Nagle,  2014)  and  a combined value of $4.5 billion for Apache and the increasingly popular OSS web server nginx in 2018 (Murciano-Goroff, et al., 2021). However, although web servers are an important part of the OSS  ecosystem,  they  constitute  a  small  portion  of  it.  We  seek  to  build  upon  the  important contributions this existing research has made in an attempt to go both broad and deep to create a more complete measure of the value of OSS.\n\nTo consider the value of OSS in both a broad and deep manner, we use data from two primary sources that allow us to gain insights into the OSS used at tens of thousands of firms across the world. The first is the 'Census II of Free and Open Source Software - Application Libraries' (Nagle et al., 2022). The Census II project utilized partnerships with multiple software composition analysis (SCA) firms to create various lists of the most widely used OSS. SCAs are hired to scan the codebases of a company to ensure they are not violating any OSS licenses and, as a byproduct, track all the OSS code used by their customers and the products they build. The Census II project aggregated data from multiple SCAs to build a dataset of OSS usage at tens of thousands of firms based  on  millions  of  data  points  (observations  of  OSS  usage).  The  second  data  source  is  the BuiltWith dataset, from which we leverage scans of nearly nine million websites to identify the underlying technology deployed by these websites, including OSS libraries. The BuiltWith data has been used in multiple academic studies (DeStefano &amp; Timmis 2023, Dushnitsky &amp; Stroube 2021, Koning et al.. 2022), but to our knowledge this is the first one to focus on OSS usage. The Census II data and the BuiltWith data are complementary as the former focuses on OSS that is built  into  the  software  a  company  sells,  while  the  latter  focuses  on  OSS  that  is  built  into  a company's website, thus reducing the chances of double-counting observations across the datasets. In aggregate, these two datasets combined create the most complete measurement of OSS usage ( q ) to date. Further, by focusing on OSS that is widely deployed and used by firms, rather than considering all the projects that exist in an OSS repository, we enhance the methodologies of prior studies by reducing the likelihood of measurement error stemming from projects that are posted as publicly available OSS but are not actually used in any practical manner. Not accounting for this\n\nmeasurement error would lead to overestimation of the actual value of OSS as projects that are widely used would be valued in the same way as projects that are not used at all.\n\nTo estimate p ,  we  follow  the  literature  discussed  above  and  use  the  labor  replacement value. First, we calculate the labor cost it would take an individual firm to recreate a given OSS package by measuring the number of lines of code within the package and then applying the Constructive Cost Model II (Boehm, 1984; Boehm et al., 2009) - also known as COCOMO II to estimate the number of person-hours it would take to write the code from scratch. We then utilize global wage data from Salary Expert to get an accurate estimate of the labor costs a firm would incur if this piece of OSS did not exist. These costs can be combined with the q values from above at the OSS package level to estimate the combined value of all OSS from both the supply and demand sides.\n\nWe find a value ranging from $1.22 billion to $6.22 billion if we were to decide as a society to recreate all widely used OSS on the supply side. However, considering the actual usage of OSS leads to a demand-side value that is orders of magnitude larger and ranges from $2.59 trillion to $13.18 trillion, if each firm who used an OSS package had to recreate it from scratch (e.g., the concept of OSS did not exist). We document substantial heterogeneity of the value of OSS by programming  language  and  internal  vs  outward-facing  programming  efforts.  Further,  we  find considerable  heterogeneity  in  value  contributions  by  programmers  as  5%  of  programmers  are responsible for more than 90% of the value created on the supply- and demand- side. The data we use is arguably the most comprehensive source of data to measure the value created by firm usage of OSS at this time. However, as for any project, the evidence is not complete and we argue that we underestimate the value since our data, e.g., does not include operating systems, which are a substantial omitted category of OSS.\n\nThis study makes four important contributions to the academic literature, practitioners, and policy makers. First, it provides the most complete estimate of the value of widely used OSS to date  by  accounting  for  not  only  the  supply-side  of  OSS  (price  to  create  it),  but  also  for  the usage/demand-side at a scale that has not been done before. While prior estimates of the value of OSS only went either broad (estimating the supply-side costs of a large swath of OSS) or deep (estimating the value created by one particular type of OSS), this study does both by using unique datasets that allow for a better understanding of the breadth and depth of OSS usage. Further, rather than measuring the value of all OSS, this study focuses on the value of OSS that is used by firms\n\nto create its products and websites, limiting the measurement error occurring in studies that are unable to account for which OSS is actually used in production. This contribution builds upon, and extends, important research (e.g., Blind et al., 2021; Greenstein and Nagle, 2014; Murciano-Goroff et al., 2021; Robbins et al., 2021) that has sought to identify the value of this vital resource that contributes a great deal to the modern economy despite the difficulties measuring this contribution. In  doing  so,  it  adds  insights  to  a  long-running  discussion  related  to  the  impact  of  information technology (IT) on productivity (Brynjolfsson, 1993; Brynjolfsson and Hitt, 1996; Nagle, 2019a; Solow, 1987) known as the 'productivity paradox' where IT investments can have limited impact on productivity statistics. This debate has continued into the emerging context of AI (Brynjolfsson, Rock, and Syverson, 2018). Our work contributes to this conversation by highlighting a massive societal level cost-savings (and hence productivity enhancement) that is created by the existence of OSS.\n\nSecond, our research contributes methodological advances to the study of intangible capital by highlighting novel sources of data related to investments in OSS. Prior research has shown that intangible capital plays an increasingly important role in economic growth (Corrado, Hulten, and Sichel,  2009)  and  firm  value  (Peters  and  Taylor,  2017),  but  it  often  goes  unmeasured  or misattributed (Eisfeldt and Papanikolaou, 2014). Further, we demonstrate how these data sources can be used to understand the true investments in software that a firm makes, and that which they would have to make if OSS did not exist.  This  is  valuable  as  investments  in  software  are  an increasingly important type of intangible capital that is driving innovation (Branstetter, Drev, and Kwon, 2019) and performance (Krishnan et al., 2000).\n\nThird, our results help highlight for firms and managers the importance of OSS to their production, and ideally add weight to arguments that users of OSS should not just free ride but also contribute to the creation and maintenance of OSS (e.g., Henkel, 2008; Nagle, 2018). Such contributions are a fraction of the costs that firms would incur if OSS did not exist and the active participation of OSS users in helping maintain the OSS they use is critical to the health and future well-being of the OSS ecosystem (Lifshitz-Assaf and Nagle, 2021; Zhang et al., 2019).\n\nFourth,  and  finally,  our  study  helps  inform  policymakers  who  have  recently  started  to understand  the  growing  importance  of  OSS  to  the  economy  and  taken  actions  to  support  the ecosystem (European Commission, 2020; Executive Order No. 14028, 2021). However, most of these efforts are related to securing the existing OSS ecosystem, which is quite important, but do\n\nnot go as far as supporting the creation of new OSS. Our results help shine light on the importance of OSS to the overall economy and add weight to calls for more societal support of this critical resource. Our results further show that the majority of the value created by OSS is created by a small  number  of  contributors.  Although  it  has  long  been  known  that  a  small  number  of  OSS contributors do most of the work, we add new insights that show this is even more true for the value creation of widely-used OSS projects and that societal support for these individuals is critical to the future success of OSS, and in turn, the economy.\n\nThe remainder of this paper is organized as follows. Section 2 describes the empirical setting and data. Section 3 discusses the methods including measurement challenges. In section 4, we estimate the value of open source software. Section 5 concludes."], "response": "Open source software is associated with firm productivity by fostering innovation, lowering costs, and enhancing software quality. The study by Nagle, F. (2019a) in Management Science examines how open source software adoption and integration can lead to productivity gains in firms.", "passing": false, "feedback": "NO", "score": 0.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the data provided in Table 2, what is the estimated labor-market value of open source software in the high wage scenario, and how does it compare to the low wage scenario?", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1)."], "response": "In the high wage scenario, the estimated labor-market value of open source software is $6.22 trillion for labor supply and $13.18 trillion for labor demand. In comparison, the low wage scenario estimates the labor-market value at $1.22 trillion for labor supply and $2.59 trillion for labor demand. This indicates that the high wage scenario values are significantly higher than those in the low wage scenario.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** In the high wage scenario, the estimated labor-market value of open source software is $6.22 billion for labor supply and $13.18 trillion for labor demand. In comparison, the low wage scenario estimates the labor-market value at $1.22 billion for labor supply and $2.59 trillion for labor demand. This indicates that the labor-market value is significantly higher in the high wage scenario compared to the low wage scenario.", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## --- Table 1 about here ---\n\nTable  1  shows  descriptive  statistics  from  both  data  sets  separately.  The  inward-facing Census  (Panel  A)  contains  just  over  261.7  million  lines  of  code  with  72%  of  the  lines  being attributable to the top programming languages. The average package includes 142 thousand lines of code with a slightly lower average of 113 thousand lines of code for the subset of top languages. When considering the demand (usage) side, we observe that the Census packages were used over 2.7 million times while 92% of this usage is attributable to the top languages. The average package was used 1,472.4 times with a higher usage of around 1,497.5 for the top  languages.  For  the outward-facing  BuiltWith  data  we  find  similar  patterns,  but  at  different  levels.  The  packages included from BuiltWith include over 82 million lines of code, 71% of which are attributable to the  top  programming  languages.  The  average  package  within  the  BuiltWith  sample  has  111 thousand  lines  of  code  with  a  lower  average  of  around  80  thousand  lines  of  code  for  the  top languages. This is because our BuiltWith data primarily consists of JavaScript-based packages, which are often smaller than packages written in other languages. BuiltWith packages were used over 142 thousand times where 99.97% were attributable to the top languages. Next, we used these raw observations to calculate the value of all OSS through the labor market approach and estimated the value created from the supply and demand side.\n\n--- Table 2 about here ---\n\nTable 2 shows the estimates for the value of OSS based on the firm-relevant joint Census and BuiltWith sample. All estimates in Table 2 are based only on software languages classified in bucket  1  from  Table  A1,  which  are  the  most  likely  to  be  written  by  a  human  rather  than  a machine. 19 The first column contains estimates with wages from a low income country (India), the global  average  wage,  and  a  high  income  country  (United  States  of  America),  respectively  (as described above). To reproduce all widely-used OSS once (e.g., the idea of OSS still exists, but all current OSS is deleted and needs to be coded from scratch), using programmers at the average developer wage from India, it would require an investment of $1.22 billion. In contrast, if we use the average developer wage from the United States, then reproducing all widely-used OSS would require  an  investment  of  $6.22  billion.  Using  a  pool  of  programmers  from  across  the  world, weighed based on the existing geographic contributions to OSS as discussed above, would lead to an investment somewhere in between the low and high-income country, $4.15 billion. It is useful to compare these numbers to those from similar studies to understand differences in valuing all OSS (prior studies) versus that which is widely used (our study). Robbins et al. (2021) and Blind et al. (2021) use a method similar to ours and estimate that the value of OSS created in the US is $38 billion in 2019 and that created in the EU is \u20ac1 billion in 2018. Wachs et al. (2022) show that roughly 50% of OSS contributions come from the US and EU combined. In aggregate, that would lead these studies to give a global value of OSS of $78 billion. Thus, our middle estimate of a supply-side value of $4.15 billion for only firm-oriented and widely used OSS is a credible lowerbound and highlights the higher estimations of the total of supply-side value of OSS when not considering whether or not a given OSS package is widely used. This further indicates that the supply-side value of the most widely used OSS is roughly 5.5% of the supply-side value of all OSS.\n\nThe second column in Table 2 contains the demand side estimates based on the labor market approach. We find that if firms had to recreate all OSS packages they used (e.g., OSS itself no longer existed and every firm that used an OSS package had to recreate it), then the entire cost would amount to between $2.59 trillion to $13.18 trillion using labor from the low wage or high wage country only, respectively. A pool of programmers across the globe could recreate all of OSS that is being widely used for a cost of approximately $8.80 trillion. Interpreting this number is\n\n19 Tables in the appendix show the equivalent values from Table 2 when including software language buckets 1 and 2 (Table A3) and all three software language buckets (Table A4).\n\nslightly more complicated but still feasible. According to a Statista (2023) report, global software revenue in 2020 (the same year as our data) was $531.7 billion. However, this represents a flow, not a stock, of software. Relying on government estimates that software fully depreciates over three years, we can do a back of the envelope calculation and consider the purchase value of the full stock of prepackaged software used in 2020 as the aggregate of that sold from 2018 to 2020, which is $1.54 trillion. Further, this represents only the expenditure on prepackaged software and does  not  include  custom  purchased  or  in-house  developed  software.  Here,  the  best  obtainable estimates of private-sector investment in software overall come from the United States National Income and Product Accounts data (NIPA 2023). In 2020, the national account data shows that in the  US,  private  firms  spent  $479.2  billion  on  software,  of  which  45%  ($215.5  billion)  was prepackaged. If we assume this is a consistent ratio for the rest of the world, then the total amount firms spent on software being used in 2020 was $3.4 trillion (= $1.54 trillion/0.45). Combining this rough estimate with the demand side estimate of the value of OSS based on an average global wage ($8.8 trillion), this indicates firms would spend $12.2 trillion (=$3.4 trillion + $8.8 trillion), or three and a half times what they currently spend if they needed to pay in-house developers to write the OSS that they currently use for free."], "response": "In the high wage scenario, the estimated labor-market value of open source software is $9.59 billion for labor supply and $17.91 trillion for labor demand. In comparison, the low wage scenario estimates the labor-market value at $1.88 billion for labor supply and $3.52 trillion for labor demand. This indicates that the labor-market value is significantly higher in the high wage scenario compared to the low wage scenario.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the labor-market value of open source, what is the estimated difference in labor demand between the low wage and high wage scenarios?", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## 3.1 Labor market approach\n\nFor the labor market approach, we estimate the value of OSS by calculating the replacement value of a package. We ask how much it would cost to reproduce the package by hiring a programmer and paying them a competitive market wage. To estimate this supply-side value ( \ud835\udc49 ! \"#$%&amp; ) , we take the complete list of OSS packages discussed above, and then count the lines of code in each unique\n\n14 In an alternative version, we use a mixture of a labor and goods market approach that is more closely aligned with Greenstein and Nagle (2014) and Murciano-Goroff, et al (2021). However, applying this method in our setting requires numerous additional assumptions due to data constraints. For simplicity we call it the goods market approach for which we provide the details and statistics, as well as the limitations in Appendix A.\n\npackage. 15 For each unique package,  , we calculate the value and then sum over all these values i to obtain the total value:\n\n<!-- formula-not-decoded -->\n\nIn this calculation, we implicitly do not incorporate any production externalities since we assume that there is no spillover knowledge from one package to the next that would lower the cost of programming. 16 This methodology is similar to that used by other papers that estimate the supply-side costs of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021).\n\nWe then calculate the demand-side value of OSS by incorporating the usage information ( Q) for each package:\n\n<!-- formula-not-decoded -->\n\nHere, we do not incorporate consumption externalities, i.e., we do not allow a benefit to arise for the general public when a package has been created and we further make sure that each firm is only replacing a package they use once, since a replaced package can be used within a firm as a club good (e.g., see Cornes and Sandler, 1996). The value \ud835\udc49 ! \"#$%&amp; reflects the cost to rewrite all widely-used OSS once (e.g., the concept of OSS still exists, but all of these packages needed to be rewritten from scratch), while the value \ud835\udc49 + \"#$%&amp; reflects the cost for each firm that uses one of these OSS packages to pay a developer to rewrite those packages (e.g., OSS itself no longer exists).\n\nFor both the supply and demand models, we obtain the dollar-value for each package ( \ud835\udc43 ( ) via the Constructive Cost Model II, also abbreviated as COCOMO II (Boehm 1984, Boehm et al. 2009). The model has previously been used by the United States Department of Defense to estimate software project costs as well as in prior research estimating the value of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021). It is a highly flexible model that allows us to create non-linear transformations of lines of code to dollar-values. It uses the following modelling equation:\n\n15 We use only the pure lines of code excluding documentation lines and empty lines. Hence, we underestimate the true value of recreating each package.\n\n16 Similar to a representative agent model (e.g. see Williamson 2006), one may think of each package being reproduced by separate programmers who are identical replicas of each other (and therefore have the same skill level, but do not become more efficient via learning).\n\n<!-- formula-not-decoded -->\n\n( (\n\nwhere \ud835\udc3f represents the lines of codes in thousands and E the effort in person-month units for each project  . Consistent with Blind et al. (2021), we use the default parameter values for i \ud835\udefc , \ud835\udefd and \ud835\udf02. The parameters \ud835\udefc \ud835\udefd , are non-linear adjustment factors set to 2.94, and 1.0997 respectively . The parameter \ud835\udf02 is an effort-adjustment factor which can be modified to incorporate subjective assessments of product, hardware, personnel, and project attributes. Since we do not have a prior for each project, we set \ud835\udf02 to the default value of one. To obtain the price ( \ud835\udc43 ( ) of each OSS project, we  then  multiply  the  results  of  equation  (3)  by  the  weighted  global  wage  that  an  average programmer would obtain on the open market. To calculate a global wage, we include the base monthly salaries of software developers from Salary Expert for the top 30 countries in terms of their GitHub developer counts in 2021 (Wachs et al., 2022). 17 The weight of each country is its share of active GitHub contributors over the total contributors in the top 30 countries. We further create bounds by using a low-wage (India) and high-wage (USA) labor market for the wage to better understand how the value would vary by the pool of programmers used to recreate all of OSS. 18"], "response": "The estimated difference in labor demand between the low wage and high wage scenarios for open source using languages in buckets 1, 2, and 3 is $14.39 trillion ($17.91 trillion for the high wage scenario minus $3.52 trillion for the low wage scenario).", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The estimated difference in labor demand between the low wage scenario ($2.59 Trillion) and the high wage scenario ($13.18 Trillion) is $10.59 Trillion.", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## --- Table 1 about here ---\n\nTable  1  shows  descriptive  statistics  from  both  data  sets  separately.  The  inward-facing Census  (Panel  A)  contains  just  over  261.7  million  lines  of  code  with  72%  of  the  lines  being attributable to the top programming languages. The average package includes 142 thousand lines of code with a slightly lower average of 113 thousand lines of code for the subset of top languages. When considering the demand (usage) side, we observe that the Census packages were used over 2.7 million times while 92% of this usage is attributable to the top languages. The average package was used 1,472.4 times with a higher usage of around 1,497.5 for the top  languages.  For  the outward-facing  BuiltWith  data  we  find  similar  patterns,  but  at  different  levels.  The  packages included from BuiltWith include over 82 million lines of code, 71% of which are attributable to the  top  programming  languages.  The  average  package  within  the  BuiltWith  sample  has  111 thousand  lines  of  code  with  a  lower  average  of  around  80  thousand  lines  of  code  for  the  top languages. This is because our BuiltWith data primarily consists of JavaScript-based packages, which are often smaller than packages written in other languages. BuiltWith packages were used over 142 thousand times where 99.97% were attributable to the top languages. Next, we used these raw observations to calculate the value of all OSS through the labor market approach and estimated the value created from the supply and demand side.\n\n--- Table 2 about here ---\n\nTable 2 shows the estimates for the value of OSS based on the firm-relevant joint Census and BuiltWith sample. All estimates in Table 2 are based only on software languages classified in bucket  1  from  Table  A1,  which  are  the  most  likely  to  be  written  by  a  human  rather  than  a machine. 19 The first column contains estimates with wages from a low income country (India), the global  average  wage,  and  a  high  income  country  (United  States  of  America),  respectively  (as described above). To reproduce all widely-used OSS once (e.g., the idea of OSS still exists, but all current OSS is deleted and needs to be coded from scratch), using programmers at the average developer wage from India, it would require an investment of $1.22 billion. In contrast, if we use the average developer wage from the United States, then reproducing all widely-used OSS would require  an  investment  of  $6.22  billion.  Using  a  pool  of  programmers  from  across  the  world, weighed based on the existing geographic contributions to OSS as discussed above, would lead to an investment somewhere in between the low and high-income country, $4.15 billion. It is useful to compare these numbers to those from similar studies to understand differences in valuing all OSS (prior studies) versus that which is widely used (our study). Robbins et al. (2021) and Blind et al. (2021) use a method similar to ours and estimate that the value of OSS created in the US is $38 billion in 2019 and that created in the EU is \u20ac1 billion in 2018. Wachs et al. (2022) show that roughly 50% of OSS contributions come from the US and EU combined. In aggregate, that would lead these studies to give a global value of OSS of $78 billion. Thus, our middle estimate of a supply-side value of $4.15 billion for only firm-oriented and widely used OSS is a credible lowerbound and highlights the higher estimations of the total of supply-side value of OSS when not considering whether or not a given OSS package is widely used. This further indicates that the supply-side value of the most widely used OSS is roughly 5.5% of the supply-side value of all OSS.\n\nThe second column in Table 2 contains the demand side estimates based on the labor market approach. We find that if firms had to recreate all OSS packages they used (e.g., OSS itself no longer existed and every firm that used an OSS package had to recreate it), then the entire cost would amount to between $2.59 trillion to $13.18 trillion using labor from the low wage or high wage country only, respectively. A pool of programmers across the globe could recreate all of OSS that is being widely used for a cost of approximately $8.80 trillion. Interpreting this number is\n\n19 Tables in the appendix show the equivalent values from Table 2 when including software language buckets 1 and 2 (Table A3) and all three software language buckets (Table A4).\n\nslightly more complicated but still feasible. According to a Statista (2023) report, global software revenue in 2020 (the same year as our data) was $531.7 billion. However, this represents a flow, not a stock, of software. Relying on government estimates that software fully depreciates over three years, we can do a back of the envelope calculation and consider the purchase value of the full stock of prepackaged software used in 2020 as the aggregate of that sold from 2018 to 2020, which is $1.54 trillion. Further, this represents only the expenditure on prepackaged software and does  not  include  custom  purchased  or  in-house  developed  software.  Here,  the  best  obtainable estimates of private-sector investment in software overall come from the United States National Income and Product Accounts data (NIPA 2023). In 2020, the national account data shows that in the  US,  private  firms  spent  $479.2  billion  on  software,  of  which  45%  ($215.5  billion)  was prepackaged. If we assume this is a consistent ratio for the rest of the world, then the total amount firms spent on software being used in 2020 was $3.4 trillion (= $1.54 trillion/0.45). Combining this rough estimate with the demand side estimate of the value of OSS based on an average global wage ($8.8 trillion), this indicates firms would spend $12.2 trillion (=$3.4 trillion + $8.8 trillion), or three and a half times what they currently spend if they needed to pay in-house developers to write the OSS that they currently use for free."], "response": "The estimated difference in labor demand between the low wage scenario ($2.59 trillion) and the high wage scenario ($13.18 trillion) is $10.59 trillion.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** What are some examples of programming languages listed in the provided context information?", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there."], "response": "Some examples of programming languages mentioned include Go, JavaScript, Java, C, Typescript, and Python.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** Some examples of programming languages listed in the provided context information are ABNF, ACTIONSCRIPT, ADA, APPLESCRIPT, ARDUINO, ASPECTJ, ASPX-CS, ASPX-VB, AWK, C, C#, CHARMCI, CLOJURE, COFFEESCRIPT, COMMONLISP, CSS, CUDA, CYTHON, and D.", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## Online Appendix\n\nTable A1 Languages within each bucket\n\n| Type                                      | Language             |\n|-------------------------------------------|----------------------|\n| Panel A: Bucket 1 - Languages             |                      |\n| Mark-Up Language                          | BIBTEX               |\n| Mark-Up Language                          | COLDFUSION HTML      |\n| Mark-Up Language                          | DOCBOOK XML          |\n| Mark-Up Language                          | HAML                 |\n| Mark-Up Language                          | HTML                 |\n| Mark-Up Language                          | HXML                 |\n| Mark-Up Language                          | JAVAEE XML           |\n| Mark-Up Language                          | MARKDOWN             |\n| Mark-Up Language                          | MASON                |\n| Mark-Up Language                          | MXML                 |\n| Mark-Up Language                          | RELAX-NG COMPACT     |\n| Mark-Up Language                          | RHTML                |\n| Mark-Up Language                          | TEX                  |\n| Mark-Up Language                          | XML                  |\n| Mark-Up Language                          | XQUERY               |\n| Mark-Up Language                          | YAML                 |\n| Programming Language                      | ABNF                 |\n| Programming Language                      | ACTIONSCRIPT         |\n| Programming Language                      | ADA                  |\n| Programming Language                      | APPLESCRIPT          |\n| Programming Language                      | ARDUINO              |\n| Programming Language                      | ASPECTJ              |\n| Programming Language                      | ASPX-CS              |\n| Programming Language                      | ASPX-VB              |\n| Programming Language                      | AWK                  |\n| Programming Language                      | C                    |\n| Programming Language                      | C#                   |\n| Programming Language                      | CHARMCI              |\n| Programming Language                      | CLOJURE              |\n| Programming Language                      | COFFEESCRIPT         |\n| Programming Language                      | COMMONLISP           |\n| Programming Language                      | CSS                  |\n| Programming Language                      | CUDA                 |\n| Programming Language                      | CYTHON               |\n| Programming Language                      | D                    |\n| Programming Language                      | DART                 |\n| Programming Language                      | DELPHI               |\n| Programming Language                      | EASYTRIEVE           |\n| Programming Language                      | EC                   |\n| Programming Language                      | ELIXIR               |\n| Programming Language                      | ELM                  |\n| Programming Language                      | EMACSLISP            |\n| Programming Language                      | ERLANG               |\n| Programming Language                      | F# FISH              |\n| Programming Language Programming Language | FORTH                |\n| Programming Language Programming Language | FORTRAN FORTRANFIXED |\n\n| Programming Language                      | GAP              |\n|-------------------------------------------|------------------|\n| Programming Language                      | GHERKIN          |\n| Programming Language                      | GLSL             |\n| Programming Language                      | GO               |\n| Programming Language                      | GRAPHVIZ         |\n| Programming Language                      | GROOVY           |\n| Programming Language                      | HASKELL          |\n| Programming Language                      | HAXE             |\n| Programming Language                      | IDL              |\n| Programming Language                      | JAVA             |\n| Programming Language                      | JAVA SERVER PAGE |\n| Programming Language                      | JAVASCRIPT       |\n| Programming Language                      | KOTLIN           |\n| Programming Language                      | LESSCSS          |\n| Programming Language                      | LIQUID           |\n| Programming Language                      | LIVESCRIPT       |\n| Programming Language                      | LLVM             |\n| Programming Language                      | LOGOS            |\n| Programming Language                      | LUA              |\n| Programming Language                      | MATHEMATICA      |\n| Programming Language                      | MINISCRIPT       |\n| Programming Language                      | MODULA-2         |\n| Programming Language                      | NASM             |\n| Programming Language                      | NIX              |\n| Programming Language                      | OBJECTIVE-C      |\n| Programming Language                      | OBJECTIVE-J      |\n| Programming Language                      | OCAML            |\n| Programming Language Programming Language | OPENEDGE ABL     |\n|                                           | PAWN             |\n| Programming Language                      | PERL             |\n| Programming Language Programming          | PHP PL/PGSQL     |\n| Programming Language                      | POSTSCRIPT       |\n| Programming Language                      | POVRAY           |\n| Programming Language                      | PROLOG           |\n| Programming Language                      | PROPERTIES       |\n| Programming Language                      | PUPPET           |\n| Programming Language                      | PYTHON           |\n| Programming Language                      | REASONML         |\n| Programming Language                      | REBOL            |\n| Programming Language                      | REDCODE          |\n| Programming Language                      | REXX             |\n| Programming Language                      | RUBY             |\n| Programming Language                      | RUST             |\n| Programming Language                      | S                |\n| Programming Language                      | SASS             |\n| Programming Language                      | SCALA            |\n| Programming Language                      | SCILAB           |\n| Programming Language                      | SCSS             |\n| Programming Language                      | SLIM             |\n| Programming Language                      | SMALLTALK        |\n| Programming Language                      | SOLIDITY         |\n|                                           | STANDARD ML      |\n| Programming Language Programming          | SWIFT            |\n| Programming Language                      | SWIG             |\n| Programming Language                      | TADS 3           |\n\nProgramming Language\n\nTCL\n\nProgramming Language\n\nTHRIFT\n\nProgramming Language\n\nTRANSACT-SQL\n\nProgramming Language\n\nTREETOP\n\nProgramming Language\n\nTYPESCRIPT\n\nProgramming Language\n\nVB.NET\n\nProgramming Language\n\nVBSCRIPT\n\nProgramming Language\n\nVCL\n\nProgramming Language\n\nVIML\n\nProgramming Language\n\nWEB IDL"], "response": "Some examples of programming languages include Go, JavaScript, Java, C, and Python.", "passing": false, "feedback": "NO", "score": 0.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: What are some programming languages that start with the letter 'E' as listed in the provided context?", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there."], "response": "The provided context does not list any programming languages that start with the letter 'E'.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: The programming languages that start with the letter 'E' in the provided context are EASYTRIEVE, EC, ELIXIR, ELM, EMACSLISP, and ERLANG.", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## Online Appendix\n\nTable A1 Languages within each bucket\n\n| Type                                      | Language             |\n|-------------------------------------------|----------------------|\n| Panel A: Bucket 1 - Languages             |                      |\n| Mark-Up Language                          | BIBTEX               |\n| Mark-Up Language                          | COLDFUSION HTML      |\n| Mark-Up Language                          | DOCBOOK XML          |\n| Mark-Up Language                          | HAML                 |\n| Mark-Up Language                          | HTML                 |\n| Mark-Up Language                          | HXML                 |\n| Mark-Up Language                          | JAVAEE XML           |\n| Mark-Up Language                          | MARKDOWN             |\n| Mark-Up Language                          | MASON                |\n| Mark-Up Language                          | MXML                 |\n| Mark-Up Language                          | RELAX-NG COMPACT     |\n| Mark-Up Language                          | RHTML                |\n| Mark-Up Language                          | TEX                  |\n| Mark-Up Language                          | XML                  |\n| Mark-Up Language                          | XQUERY               |\n| Mark-Up Language                          | YAML                 |\n| Programming Language                      | ABNF                 |\n| Programming Language                      | ACTIONSCRIPT         |\n| Programming Language                      | ADA                  |\n| Programming Language                      | APPLESCRIPT          |\n| Programming Language                      | ARDUINO              |\n| Programming Language                      | ASPECTJ              |\n| Programming Language                      | ASPX-CS              |\n| Programming Language                      | ASPX-VB              |\n| Programming Language                      | AWK                  |\n| Programming Language                      | C                    |\n| Programming Language                      | C#                   |\n| Programming Language                      | CHARMCI              |\n| Programming Language                      | CLOJURE              |\n| Programming Language                      | COFFEESCRIPT         |\n| Programming Language                      | COMMONLISP           |\n| Programming Language                      | CSS                  |\n| Programming Language                      | CUDA                 |\n| Programming Language                      | CYTHON               |\n| Programming Language                      | D                    |\n| Programming Language                      | DART                 |\n| Programming Language                      | DELPHI               |\n| Programming Language                      | EASYTRIEVE           |\n| Programming Language                      | EC                   |\n| Programming Language                      | ELIXIR               |\n| Programming Language                      | ELM                  |\n| Programming Language                      | EMACSLISP            |\n| Programming Language                      | ERLANG               |\n| Programming Language                      | F# FISH              |\n| Programming Language Programming Language | FORTH                |\n| Programming Language Programming Language | FORTRAN FORTRANFIXED |\n\n| Programming Language                      | GAP              |\n|-------------------------------------------|------------------|\n| Programming Language                      | GHERKIN          |\n| Programming Language                      | GLSL             |\n| Programming Language                      | GO               |\n| Programming Language                      | GRAPHVIZ         |\n| Programming Language                      | GROOVY           |\n| Programming Language                      | HASKELL          |\n| Programming Language                      | HAXE             |\n| Programming Language                      | IDL              |\n| Programming Language                      | JAVA             |\n| Programming Language                      | JAVA SERVER PAGE |\n| Programming Language                      | JAVASCRIPT       |\n| Programming Language                      | KOTLIN           |\n| Programming Language                      | LESSCSS          |\n| Programming Language                      | LIQUID           |\n| Programming Language                      | LIVESCRIPT       |\n| Programming Language                      | LLVM             |\n| Programming Language                      | LOGOS            |\n| Programming Language                      | LUA              |\n| Programming Language                      | MATHEMATICA      |\n| Programming Language                      | MINISCRIPT       |\n| Programming Language                      | MODULA-2         |\n| Programming Language                      | NASM             |\n| Programming Language                      | NIX              |\n| Programming Language                      | OBJECTIVE-C      |\n| Programming Language                      | OBJECTIVE-J      |\n| Programming Language                      | OCAML            |\n| Programming Language Programming Language | OPENEDGE ABL     |\n|                                           | PAWN             |\n| Programming Language                      | PERL             |\n| Programming Language Programming          | PHP PL/PGSQL     |\n| Programming Language                      | POSTSCRIPT       |\n| Programming Language                      | POVRAY           |\n| Programming Language                      | PROLOG           |\n| Programming Language                      | PROPERTIES       |\n| Programming Language                      | PUPPET           |\n| Programming Language                      | PYTHON           |\n| Programming Language                      | REASONML         |\n| Programming Language                      | REBOL            |\n| Programming Language                      | REDCODE          |\n| Programming Language                      | REXX             |\n| Programming Language                      | RUBY             |\n| Programming Language                      | RUST             |\n| Programming Language                      | S                |\n| Programming Language                      | SASS             |\n| Programming Language                      | SCALA            |\n| Programming Language                      | SCILAB           |\n| Programming Language                      | SCSS             |\n| Programming Language                      | SLIM             |\n| Programming Language                      | SMALLTALK        |\n| Programming Language                      | SOLIDITY         |\n|                                           | STANDARD ML      |\n| Programming Language Programming          | SWIFT            |\n| Programming Language                      | SWIG             |\n| Programming Language                      | TADS 3           |\n\nProgramming Language\n\nTCL\n\nProgramming Language\n\nTHRIFT\n\nProgramming Language\n\nTRANSACT-SQL\n\nProgramming Language\n\nTREETOP\n\nProgramming Language\n\nTYPESCRIPT\n\nProgramming Language\n\nVB.NET\n\nProgramming Language\n\nVBSCRIPT\n\nProgramming Language\n\nVCL\n\nProgramming Language\n\nVIML\n\nProgramming Language\n\nWEB IDL"], "response": "The programming languages that start with the letter 'E' are EASYTRIEVE, EC, ELIXIR, ELM, EMACSLISP, and ERLANG.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: What programming language in the provided list is known for its use in web development and is often used alongside HTML and CSS?", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there."], "response": "JavaScript is known for its use in web development and is often used alongside HTML and CSS.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: JavaScript is the programming language in the provided list that is known for its use in web development and is often used alongside HTML and CSS.", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there."], "response": "JavaScript is indeed widely recognized for its use in web development, often utilized alongside HTML and CSS to create interactive and dynamic web pages.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Question: What programming languages from the provided list are known for their use in web development?", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there."], "response": "JavaScript and TypeScript are known for their use in web development.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "Answer: From the provided list, the programming languages known for their use in web development include PHP, PERL, PYTHON, RUBY, and SCALA.", "contexts": ["## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python.", "## --- Figure 2 about here ---\n\nFigure 2 splits the OSS value estimates for each language by our inward facing (Census) and outward facing (BuiltWith) data sources. Panel A and Panel B focus on the supply and demand side estimation for the Census. We obtain a similar pattern that has been established already in the aggregate when pooling both data sources (Figure 1) albeit the impact of JavaScript is substantially lower.  On  the  supply  side  of  the  Census  in  Panel  A,  Java  has  the  second-highest  value  while JavaScript  code  from  the  Census  contributes  to  a  substantially  lower  value  to  the  aggregate. Similarly, the supply side values of C, Python, and Typescript are mainly driven by the Census. From the demand side Panel B we find that Go is the most popular language for inward facing code while all other languages appear to be negligible in relative terms.\n\nFigure 2, Panel C and Panel D show the supply and demand side values for the BuiltWith dataset. The supply side value in Panel C clearly indicates that the value from the BuiltWith sample is driven by JavaScript code, which is a good sanity check since we focused on JavaScript packages to proxy for OSS in the BuiltWith sample, as discussed above. The second highest value is created by TypeScript which is reassuring since it is a superset of JavaScript. Panel D shows a similar pattern  on  the  usage  side  where  most  of  the  value  arises  from  JavaScript  while  TypeScript  is trailing at the second spot as well. The other languages contribute only marginal amounts to the supply and demand side values. Overall, these findings are broadly consistent with the main use cases of the various languages (web programming vs. application programming) and an idea that languages through which value are generated are not necessarily identical to languages that are used by the general public.\n\n--- Figure 3 about here ---\n\nFigure 3 shows the demand-side value of OSS across industries by NAICS 2-digit codes using the BuiltWith online data. 20 This can be interpreted as the value each of these industries receive because OSS exists. The industry with the highest usage value of around $43 billion is 'Professional, Scientific, and Technical Services.' 'Retail Trade' as well as 'Administrative and Support and Waste Management and Remediation Services' make up another large part of the demand-side externally facing value of OSS with $36 billion and $35 billion, respectively. In contrast, industries that constitute just a small portion of the value are 'Mining, Quarrying, and Oil  and  Gas  Extraction',  'Utilities',  'Agriculture,  Forestry,  Fishing,  and  Hunting.'  The  latter industries are classical non-service sector industries and as such software is expected to play less of a role there."], "response": "Among the programming languages listed, Python and Ruby are known for their use in web development.", "passing": false, "feedback": "NO", "score": 0.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the provided context, which programming languages are included in Bucket 1, and what is the estimated global labor-market value of open source using languages from Buckets 1 and 2?", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1)."], "response": "The context does not specify which programming languages are included in Bucket 1. However, the estimated global labor-market value of open source using languages from Buckets 1 and 2 is $4.18 billion for labor supply and $8.84 trillion for labor demand.", "passing": false, "feedback": "NO", "score": 0.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The programming languages included in Bucket 1 are SMALLTALK, SOLIDITY, STANDARD ML, SWIFT, SWIG, TADS 3, TCL, THRIFT, TRANSACT-SQL, TREETOP, TYPESCRIPT, VB.NET, VBSCRIPT, VCL, VIML, and WEB IDL. The estimated global labor-market value of open source using languages from Buckets 1 and 2 is $4.18 billion in labor supply and $8.84 trillion in labor demand.", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## --- Figure 1 about here ---\n\nFigure 1 shows the heterogeneity of the value of OSS across the top programming languages. Panel A shows the supply side value with the labor value being displayed on the vertical axis. We find that OSS packages created in Go have the highest value with $803 million in value that would have to be created from scratch if the OSS packages did not exist. Go is closely followed by JavaScript  and  Java  with  $758  million  and  $658  million,  respectively.  The  value  of  C  and Typescript is $406 million and $317 million, respectively, while Python has the lowest value of the top languages with around $55 million. JavaScript is not only the top language on GitHub since at least 2014 (GitHub, 2022) it is also the language with one of the highest values in our data. In contrast, Python became more popular over time moving up from the number four spot to the number two language being used in 2020 across all OSS packages on GitHub, while it is in the last spot of our top languages.\n\nPanel B shows the demand side value across the top programming languages. Based on usage generated value, Go is more than four times the value of the next language, JavaScript.\n\nTypescript (a language that extends JavaScript) has seen immense growth rising from the tenth spot of the top 10 languages in 2017 to the fourth spot in 2020 which is also reflected in our data with  Typescript  being  the  third  most  important  language  on  the  demand  side.  The  two  web languages are followed by C and far behind are Java, and Python."], "response": "The estimated global labor-market value of open source using languages from Buckets 1 and 2 is $4.18 billion in labor supply and $8.84 trillion in labor demand.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** Based on the labor-market value of open source using languages in buckets 1, 2, and 3, what is the estimated labor demand in the high wage scenario, and how does it compare to the low wage scenario?", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## References\n\nAlmeida, D. A., Murphy, G. C., Wilson, G., &amp; Hoye, M. (2017, May). Do software developers understand open source licenses? In 2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC) (pp. 1-11). IEEE.\n\nAndreessen,  M.  (2011).  Why  Software  Is  Eating  The  World.  Accessed  May  1,  2023.  Source: https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\n\nAristotle. (1981). Politics  Book 2, Chapter 3. T.A. Sinclair translation. Penguin Books, London. .\n\nBlind, K., B\u00f6hm, M., Grzegorzewska, P., Katz, A., Muto, S., P\u00e4tsch, S., &amp; Schubert, T. (2021).\n\nThe  impact  of  Open  Source  Software  and  Hardware  on  technological  independence, competitiveness and innovation in the EU economy. European Commission, Ed.\n\nBlind, K., &amp; Schubert, T. (2023). Estimating the GDP effect of Open Source Software and its complementarities with R&amp;D and patents: evidence and policy implications. The Journal of Technology Transfer, 1-26.\n\nBoehm,  B.  W.  (1984).  Software  engineering  economics.  IEEE  transactions  on  Software Engineering, (1), 4-21.\n\nBoehm, B. W., Abts, C., Brown, A. W., Chulani, S., Clark, B. K., Horowitz, E., Madachy, R., Reifer, D., &amp; Steece, B. (2009). Software cost estimation with COCOMO II. Prentice Hall Press.\n\nBranstetter, Lee G., Matej Drev, and Namho Kwon. (2019). 'Get with the program: Softwaredriven innovation in traditional manufacturing.' Management Science 65, no. 2: 541-558.\n\nBrynjolfsson, E. (1993). The productivity paradox of information technology. Communications of the ACM, 36(12), 66-77.\n\nBrynjolfsson, E., &amp; Hitt, L. (1996). Paradox lost? Firm-level evidence on the returns to information systems spending. Management Science, 42(4), 541-558.\n\nBrynjolfsson,  E.,  Rock,  D.,  &amp;  Syverson,  C.  (2018).  Artificial  intelligence  and  the  modern productivity paradox: A clash of expectations and statistics. In The economics of artificial intelligence: An agenda (pp. 23-57). University of Chicago Press.\n\nBurton, R. M., H\u00e5konsson, D. D., Nickerson, J., Puranam, P., Workiewicz, M., &amp; Zenger, T. (2017). GitHub: exploring the space between boss-less and hierarchical forms of organizing. Journal of Organization Design , 6 , 1-19.\n\nConti, A., Peukert, C., &amp; Roche, M. |(2023). \"Beefing IT up for your Investor? Open Sourcing and Startup Funding: Evidence from GitHub.\" Harvard Business School Working paper No. 22-001 .\n\nCornes,  R.,  &amp;  Sandler,  T.  (1996).  The  theory  of  externalities,  public  goods,  and  club  goods. Cambridge University Press.\n\nDeStefano, T., and J. Timmis (2023). Demand Shocks and Data Analytics Diffusion, working paper.\n\nDushnitsky, G., &amp; Stroube, B. K. (2021). Low-code entrepreneurship: Shopify and the alternative path to growth. Journal of Business Venturing Insights, 16, e00251.\n\nEisfeldt,  A.  L.,  &amp;  Papanikolaou,  D.  (2014).  The  value  and  ownership  of  intangible  capital. American Economic Review, 104(5), 189-194.\n\nEuropean Commission. (2020). Open Source Software Strategy 2020-2023. Luxembourg: Office for Official Publications of the European Communities.\n\nExecutive Order No. 14028. (2021). Executive Order on Improving the Nation's Cybersecurity. May 2021.\n\nFackler, T., Hofmann, M., &amp; Laurentsyeva, N. (2023). Defying Gravity: What Drives Productivity in Remote Teams? (No. 427). CRC TRR 190 Rationality and Competition.\n\nGreenstein, S., &amp; Nagle, F. (2014). Digital dark matter and the economic contribution of Apache. Research Policy , 43 (4), 623-631.\n\nGitHub (2022). 'Octoverse: The state of open source software.' Accessed November 3, 2023. https://octoverse.github.com/2022/top-programming-languages.\n\nHanisch, M., Haeussler, C., Berreiter, S., &amp; Apel, S. (2018, July). Developers' progression from periphery to core in the Linux kernel development project. In Academy of Management Proceedings (Vol. 2018, No. 1, p. 14263). Briarcliff Manor, NY 10510: Academy of Management.\n\nHardin, G. (1968). 'The Tragedy of the Commons'. Science. 162 (3859): 1243-1248. Henkel, J. (2009). Champions of revealing-the role of open source developers in commercial firms. Industrial and Corporate Change, 18(3), 435-471.\n\nJacks, J. (2022). Open Source Is Eating Software FASTER than Software Is Eating The World. Accessed May  1, 2023. Source: https://www.coss.community/cossc/open-source-iseating-software-faster-than-software-is-eating-the-world-3b01\n\nKim, D. Y. (2020). Product Market Performance and Openness: The Moderating Role of Customer Heterogeneity. In Academy of Management Proceedings (Vol. 2020, No. 1, p. 21309). Briarcliff Manor, NY 10510: Academy of Management.\n\nKoning,  R.,  Hasan,  S.,  &amp;  Chatterji,  A.  (2022).  Experimentation  and  start-up  performance: Evidence from A/B testing. Management Science, 68(9), 6434-6453.\n\nKrishnan, M. S., Kriebel, C. H., Kekre, S., &amp; Mukhopadhyay, T. (2000). An empirical analysis of productivity and quality in software products. Management science, 46(6), 745-759.\n\nLerner, J., &amp; Tirole, J. (2005). The scope of open source licensing. Journal of Law, Economics, and Organization, 21(1), 20-56.\n\nLorenz, M. O. (1905). \"Methods of measuring the concentration of wealth\". Publications of the American  Statistical  Association.  Publications  of  the American  Statistical  Association , Vol. 9, No. 70. 9 (70): 209-219. Bibcode:1905PAmSA...9..209L. doi:10.2307/2276207. JSTOR 2276207.\n\nLifshitz-Assaf, H., &amp; Nagle, F. (2021). The digital economy runs on open source. Here's how to protect it. Harvard Business Review Digital Articles. https://hbr.org/2021/09/the-digitaleconomy-runs-on-open-source-heres-how-to-protect-it.\n\nLloyd, W. F. (1833). Two lectures on the checks to population: Delivered before the University of Oxford, in Michaelmas Term 1832. JH Parker.\n\nMaracke, C. (2019). Free and Open Source Software and FRAND-based patent licenses: How to mediate  between  Standard  Essential  Patent  and  Free  and  Open  Source  Software.  The Journal of World Intellectual Property, 22(3-4), 78-102.\n\nMurciano-Goroff,  R.,  Zhuo,  R.,  &amp;  Greenstein,  S.  (2021).  Hidden  software  and  veiled  value creation: Illustrations from server software usage. Research Policy , 50 (9), 104333.\n\nMusseau, J., Meyers, J. S., Sieniawski, G. P., Thompson, C. A., &amp; German, D. (2022, May). Is open  source  eating  the  world's  software?  Measuring  the  proportion  of  open  source  in proprietary  software  using  Java  binaries.  In Proceedings  of  the  19 th International Conference on Mining Software Repositories (pp. 561-565).\n\nNagle, F. (2018). Learning by contributing: Gaining competitive advantage through contribution to crowdsourced public goods. Organization Science, 29(4), 569-587.\n\nNagle, F. (2019a). Open source software and firm productivity. Management Science, 65(3), 11911215.\n\nNagle, Frank (2019b). 'Government Technology Policy, Social Value, and National Competitiveness.' Harvard Business School Working Paper, No. 19-103, March 2019. Nagle, F., Dana, J., Hoffman, J., Randazzo, S., &amp; Zhou, Y. (2022). Census II of Free and Open Linux  Foundation,  Harvard  Laboratory  for (OpenSSF).\n\nSource  Software-Application  Libraries. Innovation Science (LISH) and Open Source Security Foundation https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-softwareapplication-libraries.\n\nNIPA (2023). Bureau of Eonomic Analysis, NIPA Table 5.6.5. accessed: 2023-11-14, source: https://apps.bea.gov/iTable/?reqid=19&amp;step=3&amp;isuri=1&amp;select\\_all\\_years=0&amp;nipa\\_table\\_ list=331&amp;series=q&amp;first\\_year=2013&amp;last\\_year=2023&amp;scale=-9.\n\nNordhaus, William D., 2006, 'Principles of National Accounting for Nonmarket Accounts,' in A New Architecture for the US National Accounts ,  editors,  Dale  W.  Jorgenson,  J.  Steven Landefeld, and William D. Nordhaus, University of Chicago Press.\n\nOstrom, Elinor (1990). Governing the commons: The evolution of institutions for collective action. Cambridge: Cambridge University Press.\n\nPeters, R. H., &amp; Taylor, L. A. (2017). Intangible capital and the investment-q relation. Journal of Financial Economics, 123(2), 251-272.\n\nRobbins, C., Korkmaz, G., Guci, L., Calder\u00f3n, J. B. S., &amp; Kramer, B. (2021). A First Look at\n\nOpen-Source Software Investment in the United States and in Other Countries, 2009-2019. Singh,  Shivendu  Pratap  (2020) Products,  Platforms,  and  Open  Innovation:  Three  Essays  on\n\nTechnology Innovation. Doctoral Dissertation, University of Pittsburgh. (Unpublished) Solow, R. (1987). 'We Better Watch Out.' New York Times Book Review , July 1987, p. 36.\n\nStatista (2023). Statista Software Worldwide, accessed 2023-11-14, source: -https://www.statista.com/outlook/tmo/software/worldwide#revenue,  accessed  November 2023.\n\nSynopsys (2023). 2023 OSSRA: A deep dive into open source trends. Accessed May 1, 2023. Source : https://www.synopsys.com/blogs/software-security/open-source-trends-ossrareport/\n\nTang, S., Wang, Z., &amp; Tong, T. (2023). Knowledge Governance in Open Source Contributions: The Role of Gatekeepers. In Academy of Management Proceedings (Vol. 2023, No. 1, p. 17622). Briarcliff Manor, NY 10510: Academy of Management.\n\nTozzi, C. (2016). 'Open Source History: Why Did Linux Succeed?' Channel Futures ,  August, 2016.  Accessed  November  3,  2023.  https://www.channelfutures.com/open-source/opensource-history-why-did-linux-succeed\n\nWachs,  J.,  Nitecki,  M.,  Schueller,  W.,  &amp;  Polleres,  A.  (2022).  The  geography  of  open  source software:  Evidence  from  github. Technological  Forecasting  and  Social  Change , 176 , 121478.\n\nWilliamson, S. (2006). Notes on macroeconomic theory. University in St. Louis. Department of Economics.\n\nZhang, Y., Zhou, M., Mockus, A., &amp; Jin, Z. (2019). Companies' participation in oss developmentan  empirical  study  of  openstack.  IEEE  Transactions  on  Software  Engineering,  47(10), 2242-2259.\n\nPanel B. Demand Side\n\nNote. The figures show the labor market value for the top-5 languages according to GitHub plus Go. Panel A displays the supply side while Panel B incorporates usage. On the labor side we use our estimated average global wage for programmers as explained in the methodology section.\n\nPanel A. Census. Supply Side\n\nPanel C. BuiltWith. Supply Side\n\nPanel B. Census. Demand Side\n\nPanel D. BuiltWith. Demand Side\n\nNote . The figures show the labor and goods market value for the top-5 languages (according to GitHub) + Go split by inward facing (Census) and outward facing (BuiltWith) data source. Panel A and Panel B show the supply side and demand side values for the Census and Panels C and D the supply and demand side values for BuiltWith.\n\nNote. The figure shows the demand side labor value across NAICS 2-digit code industries using the Built With data. For firms (domains) that are associated with multiple industries we took the average value and distributed it across industries.\n\nPanel A. Supply Side\n\nPanel B. Demand Side\n\nNote. The figures show the Lorenz curve of the labor market value contribution per developer (in blue) as well as the number of repositories that a fraction of programmers contributed to (in yellow). Panel A displays the supply side while Panel B incorporates usage.\n\nTable 1 Descriptive statistics on lines of code and usage\n\n|                                        | Sum         | Mean      | SD        | Obs   |\n|----------------------------------------|-------------|-----------|-----------|-------|\n| Panel A: Census                        |             |           |           |       |\n| Lines of Code - All packages           | 261,653,728 | 142,203.1 | 887,937.2 | 1,840 |\n| Lines of Code - Top 5 Languages and Go | 189,673,184 | 113,712.9 | 702,832.1 | 1,668 |\n| Usage - All packages                   | 2,709,155   | 1472.4    | 2,167.9   | 1,840 |\n| Usage - Top 5 Languages and Go         | 2,497,785   | 1497.5    | 2,228.8   | 1,668 |\n| Panel B: BuiltWith                     |             |           |           |       |\n| Lines of Code - All packages           | 82,504,613  | 111,342.3 | 613,488.1 | 741   |\n| Lines of Code - Top 5 Languages and Go | 58,664,935  | 79,925.0  | 354,415.0 | 734   |\n| Usage - All packages                   | 142,794.4   | 192.7     | 733.4     | 741   |\n| Usage - Top 5 Languages and Go         | 142,751.2   | 194.5     | 736.6     | 734   |\n\nNote . The statistics are based on the lines of codes of different repositories. Panel A (B) portrays the aggregate sum, mean, standard deviation and number of observations for the Census (BuiltWith) data across lines of code and usage using all packages from bucket 1 (see Table A1).\n\nTable 2 The labor-market value of open source\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.22 Billion  | $2.59 Trillion  |\n| Wage: Global | $4.15 Billion  | $8.80 Trillion  |\n| Wage: High   | $6.22 Billion  | $13.18 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4, weighted according to their contributions to OSS. These estimates include only languages from software classified in bucket 1 (see Table A1)."], "response": "In the high wage scenario, the estimated labor demand for open source using languages in buckets 1, 2, and 3 is $17.91 trillion. In comparison, the labor demand in the low wage scenario is $3.52 trillion. This shows that the labor demand in the high wage scenario is significantly higher than in the low wage scenario.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** In the high wage scenario, the estimated labor demand for open source using languages in buckets 1, 2, and 3 is $17.91 trillion. In comparison, the low wage scenario estimates the labor demand at $3.52 trillion. This shows that the high wage scenario's labor demand is significantly higher, reflecting the impact of using the US average wage compared to the Indian average wage for programmers in 2020.", "contexts": ["## Panel C: Bucket 3 - Data\n\nData\n\nBNF\n\nData\n\nDIFF\n\nData\n\nDTD\n\nData\n\nE-MAIL\n\nData\n\nJSON\n\nData\n\nPROTOCOL BUFFER\n\nData\n\nRESTRUCTUREDTEXT\n\nData\n\nTEXT ONLY\n\nData\n\nXSLT\n\nTable A2 Top 30 countries included for the global wage\n\n| Country   |                |\n|-----------|----------------|\n|           | United States  |\n|           | China          |\n|           | Germany        |\n|           | India          |\n|           | United Kingdom |\n|           | Brazil         |\n|           | Russia         |\n|           | France         |\n|           | Canada         |\n|           | Japan          |\n|           | South Korea    |\n|           | Netherlands    |\n|           | Spain          |\n|           | Poland         |\n|           | Australia      |\n|           | Sweden         |\n|           | Ukraine        |\n|           | Italy          |\n|           | Switzerland    |\n|           | Indonesia      |\n|           | Taiwan         |\n|           | Colombia       |\n|           | Argentina      |\n|           | Mexico         |\n|           | Norway         |\n|           | Belgium        |\n|           | Denmark        |\n|           | Finland        |\n|           | Vietnam        |\n|           | Austria        |\n\nNote . The top 30 countries are sorted in ascending order by GitHub user shares, and they include 88% of GitHub activity from 2020.\n\nTable A3 The labor-market value of open source using languages in buckets 1 and 2\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.23 Billion  | $2.60 Trillion  |\n| Wage: Global | $4.18 Billion  | $8.84 Trillion  |\n| Wage: High   | $6.26 Billion  | $13.24 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020. The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1 and 2 (see Table A1).\n\nTable A4 The labor-market value of open source using languages in buckets 1, 2, and 3\n\n|              | Labor Supply   | Labor Demand    |\n|--------------|----------------|-----------------|\n| Wage: Low    | $1.88 Billion  | $3.52 Trillion  |\n| Wage: Global | $6.41 Billion  | $11.96 Trillion |\n| Wage: High   | $9.59 Billion  | $17.91 Trillion |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).\n\nTable A5 Goods Basket - Equivalent Open Source and Proprietary Software\n\n| Open Source Software                                                                                                                                                                                    | Proprietary Software                                                                                                                                                                                                                                                                      |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Apache Http Server Audacity Blender Elasticsearch FileZilla FreeCAD GIMP GNU Octave GnuCash KeePass LibreOffice MariaDB server Metabase MySQL OpenVPN PSPP Redis TensorFlow VirtualBox VLC Media Player | Windows Server 2008 Adobe Audition Autodesk Maya Amazon Kendra SmartFTP AutoCAD Adobe Photoshop MATLAB QuickBooks 1Password Microsoft Office Suite Microsoft SQL Server Tableau Oracle MySQL ExpressVPN SPSS Redis Enterprise TensorFlow Enterprise VMware Workstation CyberLink PowerDVD |\n\nTable A6 The goods-market value of open source using languages in buckets 1, 2, and 3\n\nWage: Low\n\nWage: Global\n\nWage: High\n\n| Goods-Demand Bucket 1   | Goods-Demand Bucket 1-2   | Goods Demand, Bucket 1-3   |\n|-------------------------|---------------------------|----------------------------|\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n| $177 Million            | $179 Million              | $242 Million               |\n\nNote . The high wage scenario is based on the US average wage and the low wage scenario is the Indian average wage for programmers in 2020 The global wage is an average wage from the countries in Table A4. The estimates include only languages from buckets 1, 2, and 3 (see Table A1).", "## --- Table 1 about here ---\n\nTable  1  shows  descriptive  statistics  from  both  data  sets  separately.  The  inward-facing Census  (Panel  A)  contains  just  over  261.7  million  lines  of  code  with  72%  of  the  lines  being attributable to the top programming languages. The average package includes 142 thousand lines of code with a slightly lower average of 113 thousand lines of code for the subset of top languages. When considering the demand (usage) side, we observe that the Census packages were used over 2.7 million times while 92% of this usage is attributable to the top languages. The average package was used 1,472.4 times with a higher usage of around 1,497.5 for the top  languages.  For  the outward-facing  BuiltWith  data  we  find  similar  patterns,  but  at  different  levels.  The  packages included from BuiltWith include over 82 million lines of code, 71% of which are attributable to the  top  programming  languages.  The  average  package  within  the  BuiltWith  sample  has  111 thousand  lines  of  code  with  a  lower  average  of  around  80  thousand  lines  of  code  for  the  top languages. This is because our BuiltWith data primarily consists of JavaScript-based packages, which are often smaller than packages written in other languages. BuiltWith packages were used over 142 thousand times where 99.97% were attributable to the top languages. Next, we used these raw observations to calculate the value of all OSS through the labor market approach and estimated the value created from the supply and demand side.\n\n--- Table 2 about here ---\n\nTable 2 shows the estimates for the value of OSS based on the firm-relevant joint Census and BuiltWith sample. All estimates in Table 2 are based only on software languages classified in bucket  1  from  Table  A1,  which  are  the  most  likely  to  be  written  by  a  human  rather  than  a machine. 19 The first column contains estimates with wages from a low income country (India), the global  average  wage,  and  a  high  income  country  (United  States  of  America),  respectively  (as described above). To reproduce all widely-used OSS once (e.g., the idea of OSS still exists, but all current OSS is deleted and needs to be coded from scratch), using programmers at the average developer wage from India, it would require an investment of $1.22 billion. In contrast, if we use the average developer wage from the United States, then reproducing all widely-used OSS would require  an  investment  of  $6.22  billion.  Using  a  pool  of  programmers  from  across  the  world, weighed based on the existing geographic contributions to OSS as discussed above, would lead to an investment somewhere in between the low and high-income country, $4.15 billion. It is useful to compare these numbers to those from similar studies to understand differences in valuing all OSS (prior studies) versus that which is widely used (our study). Robbins et al. (2021) and Blind et al. (2021) use a method similar to ours and estimate that the value of OSS created in the US is $38 billion in 2019 and that created in the EU is \u20ac1 billion in 2018. Wachs et al. (2022) show that roughly 50% of OSS contributions come from the US and EU combined. In aggregate, that would lead these studies to give a global value of OSS of $78 billion. Thus, our middle estimate of a supply-side value of $4.15 billion for only firm-oriented and widely used OSS is a credible lowerbound and highlights the higher estimations of the total of supply-side value of OSS when not considering whether or not a given OSS package is widely used. This further indicates that the supply-side value of the most widely used OSS is roughly 5.5% of the supply-side value of all OSS.\n\nThe second column in Table 2 contains the demand side estimates based on the labor market approach. We find that if firms had to recreate all OSS packages they used (e.g., OSS itself no longer existed and every firm that used an OSS package had to recreate it), then the entire cost would amount to between $2.59 trillion to $13.18 trillion using labor from the low wage or high wage country only, respectively. A pool of programmers across the globe could recreate all of OSS that is being widely used for a cost of approximately $8.80 trillion. Interpreting this number is\n\n19 Tables in the appendix show the equivalent values from Table 2 when including software language buckets 1 and 2 (Table A3) and all three software language buckets (Table A4).\n\nslightly more complicated but still feasible. According to a Statista (2023) report, global software revenue in 2020 (the same year as our data) was $531.7 billion. However, this represents a flow, not a stock, of software. Relying on government estimates that software fully depreciates over three years, we can do a back of the envelope calculation and consider the purchase value of the full stock of prepackaged software used in 2020 as the aggregate of that sold from 2018 to 2020, which is $1.54 trillion. Further, this represents only the expenditure on prepackaged software and does  not  include  custom  purchased  or  in-house  developed  software.  Here,  the  best  obtainable estimates of private-sector investment in software overall come from the United States National Income and Product Accounts data (NIPA 2023). In 2020, the national account data shows that in the  US,  private  firms  spent  $479.2  billion  on  software,  of  which  45%  ($215.5  billion)  was prepackaged. If we assume this is a consistent ratio for the rest of the world, then the total amount firms spent on software being used in 2020 was $3.4 trillion (= $1.54 trillion/0.45). Combining this rough estimate with the demand side estimate of the value of OSS based on an average global wage ($8.8 trillion), this indicates firms would spend $12.2 trillion (=$3.4 trillion + $8.8 trillion), or three and a half times what they currently spend if they needed to pay in-house developers to write the OSS that they currently use for free."], "response": "In the high wage scenario, the estimated labor demand for open source using languages in buckets 1, 2, and 3 is $17.91 trillion. In comparison, the low wage scenario estimates the labor demand at $3.52 trillion. This shows that the high wage scenario's labor demand is significantly higher, reflecting the impact of using the US average wage compared to the Indian average wage for programmers in 2020.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:** How does the goods market approach estimate the value of open-source software (OSS) compared to the labor market supply-side value, and why is there a differential between these estimates?", "contexts": ["## Appendix A) Goods-Market Valuation Approach\n\nAs an alternate estimation method, instead of using the labor replacement cost, we use a goods replacement value approach. We identify several OSS packages that have similar closed-source, pecuniary alternatives and consider the costs if all commercial users of the free OSS had to replace that software with a pecuniary alternative (similar to the calculations Greenstein and Nagle (2014) and Murciano-Goroff et al. (2021) performed for web servers). We can then use this alternate value of p , combined with the q values from above to estimate a goods replacement value of OSS. This method builds on suggestions from Nordhaus (2006, p. 146) who says '\u2026the price of market and nonmarket goods and services should be imputed on the basis of the comparable market goods and services.' We do not expect the estimates from the two methods to be similar. Quite the contrary, the value of those two methods varies substantially since the latter goods-market approach assumes a fixed price to sell a good multiple times and that fixed price is usually lower than the total value estimated from recreating all packages on the labor side. The differential between these estimates is  essentially the result of a firm stepping in to reproduce the missing OSS packages and then selling them for a pecuniary price rather than all firms needing to reproduce those packages from scratch themselves.\n\nWith the goods market approach, the thought experiment is still that we live in a world where OSS does not exist, but it has to be recreated via one firm that then charges a price for a good that is currently free. To value OSS via the goods market approach, we created a basket of equivalent substitute proprietary goods that are priced on the open market as a stand-in for an OSS product.  This  methodology  is  consistent  with  that  used  in  the  prior  literature  (Greenstein  and Nagle, 2014; Murciano-Goroff et al., 2021) although both of those studies only used a single good rather than a basket since they were focused on only one type of OSS (web servers). Since there is no readily available database for proprietary equivalents of OSS, we conduct a search based on subjective  perception  of  popularity  of  OSS  and  we  then  search  for  pecuniary,  closed-source substitutes for them. The resulting basket of 20 OSS packages with proprietary substitutes is a good representation of the diversity of OSS. The software ranges from media and design software to statistical analysis programs, to database management and web server software. 21\n\n21 Table A5 shows the basket of OSS and their proprietary equivalents that we used. To create this basket, we looked for proprietary software that had an OSS equivalent that was similar in its overall function and feature set, and sought to identify pairs of software that, in aggregate, captured a broad and representative set of the types of OSS that exist.\n\nBased on our OSS equivalent substitute proprietary goods basket we then obtain prices for each proprietary software equivalent and we calculated the COCOMO labor market supply-side value for each OSS product in the basket which we use as a proxy - for lack of the code from the proprietary software - for the COCOMO labor supply side value of the proprietary software (e.g., the cost it would take to pay a programmer to write that proprietary software from scratch). We then calculate the average COCOMO labor supply-side value of the basket, \ud835\udc49 !,1#23.4 ,  and  the average price for the basket, \ud835\udc43 !,1#23.4 . 22 Since, we know the labor market supply-side value of all OSS, \ud835\udc49 ! \"#$%&amp; , we can setup the following equation and obtain the price of OSS, \ud835\udc43 ! for the goodsmarket for all OSS via a simple scaling transformation:\n\n<!-- formula-not-decoded -->\n\nThis results in the following goods-market supply-side value:\n\n<!-- formula-not-decoded -->\n\n<!-- formula-not-decoded -->\n\nWe can then obtain the equivalent demand-side goods-market values as follows:\n\n<!-- formula-not-decoded -->\n\nFrom the goods market side, we consider the equivalent price that a firm would charge if it produced all existing widely used OSS and then sold it as a product to customers.\n\nTable A6, column 3 shows that the value on the demand side ranges between $177 million and $244 million across the different buckets independent of the country of origin from which programmers are hired. Naturally, the goods-market value will be substantially smaller than the labor demand value since this imaginary firm will make a profit at a comparatively low price by producing the software once and then selling it to many customers. Further, while Greenstein and Nagle (2014) as well as Murciano-Goroff et al. (2021) focus on one particular type of software only (web servers), we attempt to expand on their approach to many goods. However, the data limitations become a stronger constraint in this context which makes it inherently more difficult\n\n22 We obtained the average price of the goods-market proprietary basket by using a 3 years lifespan of software, i.e. 1/(1-0.66), so the depreciation factor is 0.33. This is consistent with the United States Internal Revenue Service (IRS) rules for depreciating software, which states 'If you can depreciate the cost of computer software, use the straight line method over a useful life of 36 months.' https://www.irs.gov/publications/p946#en\\_US\\_2022\\_publink1000107354.\n\nto  estimate  the  value  through  this  approach  while  requiring  substantially  more  assumptions. Instead of a pure goods-market approach, this requires assistance from the labor-market approach in terms of scaling for the estimate, which ultimately leads to a substantial underestimate of the value of OSS. Further, the pricing strategy of the proprietary software counterparts is sensitive to the  market  demand.  With  the  goods-market  approach  extending  to  multiple  goods,  the  strong implicit assumption is that the market demands for our basket software and our sample OSS are similar, so they lead to commensurate prices.\n\nAn alternative and even more simplified goods-market back-of-the-envelope calculation that does not account for lines of code and relies on no scaling from the labor market approach would simply be to multiply a price of a reference good with the usage. We can take the minimum, average, and maximum prices of the basket of proprietary goods as captured in the reference price vector p = (69.99, 1610.17, 5800) and simply multiply it with usage from the combined Census and BuiltWith sample (Table 1). Based on those imputed proprietary price assumptions, the goods market demand side value would range from $0.2 - $16.5 trillion (minimum price - maximum price)  with  the  mean  price  resulting  in  a  value  estimate  of  $4.5  trillion.  However,  while  this estimate creates slightly more variance than the labor market approach, it is inherently flawed by simply assuming that the imputed prices are identical for each open source product based on the reference price. We further think this very simple back-of-the-envelope is an orange to apples comparison since the goods in our basket are fully functional, stand-alone software packages, while the packages in the Census and BuiltWith datasets are comprised of application libraries, which are generally smaller than such stand-alone packages.\n\nGiven all the complexities and assumptions one has to make due to lack of data for a goodsmarket approach, we place stronger emphasis on the labor cost approach highlighted in the main body but we include this method here for completeness.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The goods market approach estimates the value of open-source software (OSS) by considering the cost of replacing OSS with proprietary alternatives. This method involves creating a basket of proprietary software that serves as substitutes for OSS and calculating the average price of these proprietary equivalents. The goods market approach assumes a fixed price for selling a good multiple times, which is typically lower than the total value estimated from recreating all packages on the labor side. The differential between the goods market and labor market supply-side estimates arises because the goods market approach assumes a single firm reproduces the OSS and sells it at a pecuniary price, whereas the labor market approach considers the cost for all firms to recreate the OSS from scratch. This results in the goods market value being substantially smaller, as it reflects the profit a firm would make by producing the software once and selling it to many customers.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:** The goods market approach estimates the value of OSS by creating a basket of equivalent substitute proprietary goods that are priced on the open market as stand-ins for OSS products. This method assumes a hypothetical scenario where OSS does not exist and must be recreated by a single firm, which then sells it at a fixed price. The differential between the goods market approach and the labor market supply-side value arises because the goods market approach assumes a fixed price for selling a good multiple times, which is usually lower than the total value estimated from recreating all packages on the labor side. The labor market supply-side value considers the cost it would take to pay programmers to write the software from scratch, which is typically higher than the price a firm would charge for selling the software to multiple customers.", "contexts": ["## Appendix A) Goods-Market Valuation Approach\n\nAs an alternate estimation method, instead of using the labor replacement cost, we use a goods replacement value approach. We identify several OSS packages that have similar closed-source, pecuniary alternatives and consider the costs if all commercial users of the free OSS had to replace that software with a pecuniary alternative (similar to the calculations Greenstein and Nagle (2014) and Murciano-Goroff et al. (2021) performed for web servers). We can then use this alternate value of p , combined with the q values from above to estimate a goods replacement value of OSS. This method builds on suggestions from Nordhaus (2006, p. 146) who says '\u2026the price of market and nonmarket goods and services should be imputed on the basis of the comparable market goods and services.' We do not expect the estimates from the two methods to be similar. Quite the contrary, the value of those two methods varies substantially since the latter goods-market approach assumes a fixed price to sell a good multiple times and that fixed price is usually lower than the total value estimated from recreating all packages on the labor side. The differential between these estimates is  essentially the result of a firm stepping in to reproduce the missing OSS packages and then selling them for a pecuniary price rather than all firms needing to reproduce those packages from scratch themselves.\n\nWith the goods market approach, the thought experiment is still that we live in a world where OSS does not exist, but it has to be recreated via one firm that then charges a price for a good that is currently free. To value OSS via the goods market approach, we created a basket of equivalent substitute proprietary goods that are priced on the open market as a stand-in for an OSS product.  This  methodology  is  consistent  with  that  used  in  the  prior  literature  (Greenstein  and Nagle, 2014; Murciano-Goroff et al., 2021) although both of those studies only used a single good rather than a basket since they were focused on only one type of OSS (web servers). Since there is no readily available database for proprietary equivalents of OSS, we conduct a search based on subjective  perception  of  popularity  of  OSS  and  we  then  search  for  pecuniary,  closed-source substitutes for them. The resulting basket of 20 OSS packages with proprietary substitutes is a good representation of the diversity of OSS. The software ranges from media and design software to statistical analysis programs, to database management and web server software. 21\n\n21 Table A5 shows the basket of OSS and their proprietary equivalents that we used. To create this basket, we looked for proprietary software that had an OSS equivalent that was similar in its overall function and feature set, and sought to identify pairs of software that, in aggregate, captured a broad and representative set of the types of OSS that exist.\n\nBased on our OSS equivalent substitute proprietary goods basket we then obtain prices for each proprietary software equivalent and we calculated the COCOMO labor market supply-side value for each OSS product in the basket which we use as a proxy - for lack of the code from the proprietary software - for the COCOMO labor supply side value of the proprietary software (e.g., the cost it would take to pay a programmer to write that proprietary software from scratch). We then calculate the average COCOMO labor supply-side value of the basket, \ud835\udc49 !,1#23.4 ,  and  the average price for the basket, \ud835\udc43 !,1#23.4 . 22 Since, we know the labor market supply-side value of all OSS, \ud835\udc49 ! \"#$%&amp; , we can setup the following equation and obtain the price of OSS, \ud835\udc43 ! for the goodsmarket for all OSS via a simple scaling transformation:\n\n<!-- formula-not-decoded -->\n\nThis results in the following goods-market supply-side value:\n\n<!-- formula-not-decoded -->\n\n<!-- formula-not-decoded -->\n\nWe can then obtain the equivalent demand-side goods-market values as follows:\n\n<!-- formula-not-decoded -->\n\nFrom the goods market side, we consider the equivalent price that a firm would charge if it produced all existing widely used OSS and then sold it as a product to customers.\n\nTable A6, column 3 shows that the value on the demand side ranges between $177 million and $244 million across the different buckets independent of the country of origin from which programmers are hired. Naturally, the goods-market value will be substantially smaller than the labor demand value since this imaginary firm will make a profit at a comparatively low price by producing the software once and then selling it to many customers. Further, while Greenstein and Nagle (2014) as well as Murciano-Goroff et al. (2021) focus on one particular type of software only (web servers), we attempt to expand on their approach to many goods. However, the data limitations become a stronger constraint in this context which makes it inherently more difficult\n\n22 We obtained the average price of the goods-market proprietary basket by using a 3 years lifespan of software, i.e. 1/(1-0.66), so the depreciation factor is 0.33. This is consistent with the United States Internal Revenue Service (IRS) rules for depreciating software, which states 'If you can depreciate the cost of computer software, use the straight line method over a useful life of 36 months.' https://www.irs.gov/publications/p946#en\\_US\\_2022\\_publink1000107354.\n\nto  estimate  the  value  through  this  approach  while  requiring  substantially  more  assumptions. Instead of a pure goods-market approach, this requires assistance from the labor-market approach in terms of scaling for the estimate, which ultimately leads to a substantial underestimate of the value of OSS. Further, the pricing strategy of the proprietary software counterparts is sensitive to the  market  demand.  With  the  goods-market  approach  extending  to  multiple  goods,  the  strong implicit assumption is that the market demands for our basket software and our sample OSS are similar, so they lead to commensurate prices.\n\nAn alternative and even more simplified goods-market back-of-the-envelope calculation that does not account for lines of code and relies on no scaling from the labor market approach would simply be to multiply a price of a reference good with the usage. We can take the minimum, average, and maximum prices of the basket of proprietary goods as captured in the reference price vector p = (69.99, 1610.17, 5800) and simply multiply it with usage from the combined Census and BuiltWith sample (Table 1). Based on those imputed proprietary price assumptions, the goods market demand side value would range from $0.2 - $16.5 trillion (minimum price - maximum price)  with  the  mean  price  resulting  in  a  value  estimate  of  $4.5  trillion.  However,  while  this estimate creates slightly more variance than the labor market approach, it is inherently flawed by simply assuming that the imputed prices are identical for each open source product based on the reference price. We further think this very simple back-of-the-envelope is an orange to apples comparison since the goods in our basket are fully functional, stand-alone software packages, while the packages in the Census and BuiltWith datasets are comprised of application libraries, which are generally smaller than such stand-alone packages.\n\nGiven all the complexities and assumptions one has to make due to lack of data for a goodsmarket approach, we place stronger emphasis on the labor cost approach highlighted in the main body but we include this method here for completeness.", "## 3.1 Labor market approach\n\nFor the labor market approach, we estimate the value of OSS by calculating the replacement value of a package. We ask how much it would cost to reproduce the package by hiring a programmer and paying them a competitive market wage. To estimate this supply-side value ( \ud835\udc49 ! \"#$%&amp; ) , we take the complete list of OSS packages discussed above, and then count the lines of code in each unique\n\n14 In an alternative version, we use a mixture of a labor and goods market approach that is more closely aligned with Greenstein and Nagle (2014) and Murciano-Goroff, et al (2021). However, applying this method in our setting requires numerous additional assumptions due to data constraints. For simplicity we call it the goods market approach for which we provide the details and statistics, as well as the limitations in Appendix A.\n\npackage. 15 For each unique package,  , we calculate the value and then sum over all these values i to obtain the total value:\n\n<!-- formula-not-decoded -->\n\nIn this calculation, we implicitly do not incorporate any production externalities since we assume that there is no spillover knowledge from one package to the next that would lower the cost of programming. 16 This methodology is similar to that used by other papers that estimate the supply-side costs of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021).\n\nWe then calculate the demand-side value of OSS by incorporating the usage information ( Q) for each package:\n\n<!-- formula-not-decoded -->\n\nHere, we do not incorporate consumption externalities, i.e., we do not allow a benefit to arise for the general public when a package has been created and we further make sure that each firm is only replacing a package they use once, since a replaced package can be used within a firm as a club good (e.g., see Cornes and Sandler, 1996). The value \ud835\udc49 ! \"#$%&amp; reflects the cost to rewrite all widely-used OSS once (e.g., the concept of OSS still exists, but all of these packages needed to be rewritten from scratch), while the value \ud835\udc49 + \"#$%&amp; reflects the cost for each firm that uses one of these OSS packages to pay a developer to rewrite those packages (e.g., OSS itself no longer exists).\n\nFor both the supply and demand models, we obtain the dollar-value for each package ( \ud835\udc43 ( ) via the Constructive Cost Model II, also abbreviated as COCOMO II (Boehm 1984, Boehm et al. 2009). The model has previously been used by the United States Department of Defense to estimate software project costs as well as in prior research estimating the value of OSS (Blind et al., 2021; Nagle, 2019b; Robbins et al., 2021). It is a highly flexible model that allows us to create non-linear transformations of lines of code to dollar-values. It uses the following modelling equation:\n\n15 We use only the pure lines of code excluding documentation lines and empty lines. Hence, we underestimate the true value of recreating each package.\n\n16 Similar to a representative agent model (e.g. see Williamson 2006), one may think of each package being reproduced by separate programmers who are identical replicas of each other (and therefore have the same skill level, but do not become more efficient via learning).\n\n<!-- formula-not-decoded -->\n\n( (\n\nwhere \ud835\udc3f represents the lines of codes in thousands and E the effort in person-month units for each project  . Consistent with Blind et al. (2021), we use the default parameter values for i \ud835\udefc , \ud835\udefd and \ud835\udf02. The parameters \ud835\udefc \ud835\udefd , are non-linear adjustment factors set to 2.94, and 1.0997 respectively . The parameter \ud835\udf02 is an effort-adjustment factor which can be modified to incorporate subjective assessments of product, hardware, personnel, and project attributes. Since we do not have a prior for each project, we set \ud835\udf02 to the default value of one. To obtain the price ( \ud835\udc43 ( ) of each OSS project, we  then  multiply  the  results  of  equation  (3)  by  the  weighted  global  wage  that  an  average programmer would obtain on the open market. To calculate a global wage, we include the base monthly salaries of software developers from Salary Expert for the top 30 countries in terms of their GitHub developer counts in 2021 (Wachs et al., 2022). 17 The weight of each country is its share of active GitHub contributors over the total contributors in the top 30 countries. We further create bounds by using a low-wage (India) and high-wage (USA) labor market for the wage to better understand how the value would vary by the pool of programmers used to recreate all of OSS. 18"], "response": "The goods market approach estimates the value of OSS by considering the cost of replacing free OSS with equivalent proprietary software that is sold on the open market. This method envisions a scenario where OSS is recreated by a single firm, which then sells it at a fixed price. The difference between this approach and the labor market supply-side value is due to the goods market approach assuming a fixed price for selling a product multiple times, which is generally lower than the cost of recreating all packages from scratch as estimated by the labor market approach. The labor market supply-side value accounts for the cost of hiring programmers to develop the software, which tends to be higher than the price a firm would charge for selling the software to multiple customers.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Question:**", "contexts": ["Working Paper 24-038", "## -- Figure 4 about here ---\n\nFigure 3 shows the Lorenz curves and the number of repositories that a fraction of programmers has contributed to for the supply side (Panel A) and the demand side (Panel B). A Lorenz curve that  lay  directly  on  the  45  degree  line  would  imply  a  very  even  distribution  of  values  across programmers. Instead, Panel A shows a Lorenz curve as a nearly flat line with a drastic increase for the final share of programmers. This implies that the distribution of the supply value is highly uneven and considerably more concentrated than the 80/20 standard. Indeed, the last five percent of programmers, or 3,000 programmers, generate over 93% of the supply side value. Similarly, Panel B shows - when accounting for usage - that those last five percent generate over 96% of the demand side value.  In  aggregate,  this  indicates  that  a  very  small  number  of  programmers  are creating the bulk of OSS code that is heavily relied upon by firms to create their own code. In both Panel A and Panel B we can also see a rise in the number of repositories for the last 10-15% of programmers that contribute  to  the  highest  value,  which  implies  that  the  uneven  value  that  is generated by few programmers is not just due to a few highly valuable repositories but by the contributions of this handful of contributors to a substantial number of repositories."], "response": "The analysis of the Lorenz curves indicates that a small percentage of programmers are responsible for the majority of the value generated in both the supply and demand sides of open-source software (OSS) contributions. Specifically, the last five percent of programmers contribute over 93% of the supply side value and over 96% of the demand side value. This suggests a highly uneven distribution, where a few programmers are creating the bulk of OSS code that firms heavily rely on. Additionally, these top contributors are involved in a substantial number of repositories, indicating their significant impact is not limited to a few high-value projects.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "What are the limitations of using a goods-market approach to estimate the value of open-source software (OSS), and why might a labor-market approach be preferred?", "contexts": ["## Appendix A) Goods-Market Valuation Approach\n\nAs an alternate estimation method, instead of using the labor replacement cost, we use a goods replacement value approach. We identify several OSS packages that have similar closed-source, pecuniary alternatives and consider the costs if all commercial users of the free OSS had to replace that software with a pecuniary alternative (similar to the calculations Greenstein and Nagle (2014) and Murciano-Goroff et al. (2021) performed for web servers). We can then use this alternate value of p , combined with the q values from above to estimate a goods replacement value of OSS. This method builds on suggestions from Nordhaus (2006, p. 146) who says '\u2026the price of market and nonmarket goods and services should be imputed on the basis of the comparable market goods and services.' We do not expect the estimates from the two methods to be similar. Quite the contrary, the value of those two methods varies substantially since the latter goods-market approach assumes a fixed price to sell a good multiple times and that fixed price is usually lower than the total value estimated from recreating all packages on the labor side. The differential between these estimates is  essentially the result of a firm stepping in to reproduce the missing OSS packages and then selling them for a pecuniary price rather than all firms needing to reproduce those packages from scratch themselves.\n\nWith the goods market approach, the thought experiment is still that we live in a world where OSS does not exist, but it has to be recreated via one firm that then charges a price for a good that is currently free. To value OSS via the goods market approach, we created a basket of equivalent substitute proprietary goods that are priced on the open market as a stand-in for an OSS product.  This  methodology  is  consistent  with  that  used  in  the  prior  literature  (Greenstein  and Nagle, 2014; Murciano-Goroff et al., 2021) although both of those studies only used a single good rather than a basket since they were focused on only one type of OSS (web servers). Since there is no readily available database for proprietary equivalents of OSS, we conduct a search based on subjective  perception  of  popularity  of  OSS  and  we  then  search  for  pecuniary,  closed-source substitutes for them. The resulting basket of 20 OSS packages with proprietary substitutes is a good representation of the diversity of OSS. The software ranges from media and design software to statistical analysis programs, to database management and web server software. 21\n\n21 Table A5 shows the basket of OSS and their proprietary equivalents that we used. To create this basket, we looked for proprietary software that had an OSS equivalent that was similar in its overall function and feature set, and sought to identify pairs of software that, in aggregate, captured a broad and representative set of the types of OSS that exist.\n\nBased on our OSS equivalent substitute proprietary goods basket we then obtain prices for each proprietary software equivalent and we calculated the COCOMO labor market supply-side value for each OSS product in the basket which we use as a proxy - for lack of the code from the proprietary software - for the COCOMO labor supply side value of the proprietary software (e.g., the cost it would take to pay a programmer to write that proprietary software from scratch). We then calculate the average COCOMO labor supply-side value of the basket, \ud835\udc49 !,1#23.4 ,  and  the average price for the basket, \ud835\udc43 !,1#23.4 . 22 Since, we know the labor market supply-side value of all OSS, \ud835\udc49 ! \"#$%&amp; , we can setup the following equation and obtain the price of OSS, \ud835\udc43 ! for the goodsmarket for all OSS via a simple scaling transformation:\n\n<!-- formula-not-decoded -->\n\nThis results in the following goods-market supply-side value:\n\n<!-- formula-not-decoded -->\n\n<!-- formula-not-decoded -->\n\nWe can then obtain the equivalent demand-side goods-market values as follows:\n\n<!-- formula-not-decoded -->\n\nFrom the goods market side, we consider the equivalent price that a firm would charge if it produced all existing widely used OSS and then sold it as a product to customers.\n\nTable A6, column 3 shows that the value on the demand side ranges between $177 million and $244 million across the different buckets independent of the country of origin from which programmers are hired. Naturally, the goods-market value will be substantially smaller than the labor demand value since this imaginary firm will make a profit at a comparatively low price by producing the software once and then selling it to many customers. Further, while Greenstein and Nagle (2014) as well as Murciano-Goroff et al. (2021) focus on one particular type of software only (web servers), we attempt to expand on their approach to many goods. However, the data limitations become a stronger constraint in this context which makes it inherently more difficult\n\n22 We obtained the average price of the goods-market proprietary basket by using a 3 years lifespan of software, i.e. 1/(1-0.66), so the depreciation factor is 0.33. This is consistent with the United States Internal Revenue Service (IRS) rules for depreciating software, which states 'If you can depreciate the cost of computer software, use the straight line method over a useful life of 36 months.' https://www.irs.gov/publications/p946#en\\_US\\_2022\\_publink1000107354.\n\nto  estimate  the  value  through  this  approach  while  requiring  substantially  more  assumptions. Instead of a pure goods-market approach, this requires assistance from the labor-market approach in terms of scaling for the estimate, which ultimately leads to a substantial underestimate of the value of OSS. Further, the pricing strategy of the proprietary software counterparts is sensitive to the  market  demand.  With  the  goods-market  approach  extending  to  multiple  goods,  the  strong implicit assumption is that the market demands for our basket software and our sample OSS are similar, so they lead to commensurate prices.\n\nAn alternative and even more simplified goods-market back-of-the-envelope calculation that does not account for lines of code and relies on no scaling from the labor market approach would simply be to multiply a price of a reference good with the usage. We can take the minimum, average, and maximum prices of the basket of proprietary goods as captured in the reference price vector p = (69.99, 1610.17, 5800) and simply multiply it with usage from the combined Census and BuiltWith sample (Table 1). Based on those imputed proprietary price assumptions, the goods market demand side value would range from $0.2 - $16.5 trillion (minimum price - maximum price)  with  the  mean  price  resulting  in  a  value  estimate  of  $4.5  trillion.  However,  while  this estimate creates slightly more variance than the labor market approach, it is inherently flawed by simply assuming that the imputed prices are identical for each open source product based on the reference price. We further think this very simple back-of-the-envelope is an orange to apples comparison since the goods in our basket are fully functional, stand-alone software packages, while the packages in the Census and BuiltWith datasets are comprised of application libraries, which are generally smaller than such stand-alone packages.\n\nGiven all the complexities and assumptions one has to make due to lack of data for a goodsmarket approach, we place stronger emphasis on the labor cost approach highlighted in the main body but we include this method here for completeness.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The goods-market approach to estimating the value of open-source software (OSS) has several limitations. It requires numerous assumptions due to the lack of data, making it inherently more complex and potentially less accurate. This approach assumes a fixed price for selling a good multiple times, which is usually lower than the total value estimated from recreating all packages on the labor side. Additionally, the pricing strategy of proprietary software counterparts is sensitive to market demand, and the assumption that market demands for the basket software and sample OSS are similar may not hold true. The goods-market approach also involves a substantial underestimate of the value of OSS because it relies on scaling from the labor-market approach.\n\nIn contrast, a labor-market approach might be preferred because it directly calculates the labor replacement cost of each OSS package, providing a more straightforward and potentially more accurate estimation of value. This method considers the actual cost of recreating OSS at each firm, which can offer a clearer picture of its economic value. The labor-market approach also allows for a detailed analysis of value creation and contribution inequality among developers, which is not addressed by the goods-market approach.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "**Answer:**", "contexts": ["Working Paper 24-038", "## -- Figure 4 about here ---\n\nFigure 3 shows the Lorenz curves and the number of repositories that a fraction of programmers has contributed to for the supply side (Panel A) and the demand side (Panel B). A Lorenz curve that  lay  directly  on  the  45  degree  line  would  imply  a  very  even  distribution  of  values  across programmers. Instead, Panel A shows a Lorenz curve as a nearly flat line with a drastic increase for the final share of programmers. This implies that the distribution of the supply value is highly uneven and considerably more concentrated than the 80/20 standard. Indeed, the last five percent of programmers, or 3,000 programmers, generate over 93% of the supply side value. Similarly, Panel B shows - when accounting for usage - that those last five percent generate over 96% of the demand side value.  In  aggregate,  this  indicates  that  a  very  small  number  of  programmers  are creating the bulk of OSS code that is heavily relied upon by firms to create their own code. In both Panel A and Panel B we can also see a rise in the number of repositories for the last 10-15% of programmers that contribute  to  the  highest  value,  which  implies  that  the  uneven  value  that  is generated by few programmers is not just due to a few highly valuable repositories but by the contributions of this handful of contributors to a substantial number of repositories."], "response": "The analysis of Lorenz curves in the study highlights a significant concentration of value creation among a small fraction of programmers. Specifically, the last five percent of programmers are responsible for generating over 93% of the supply side value and over 96% of the demand side value. This indicates that a very small number of programmers are crucial in creating the majority of open-source software code, which is extensively used by firms. Additionally, the increase in the number of repositories for the top contributors suggests that their impact is not limited to a few high-value projects but extends across numerous repositories.", "passing": true, "feedback": "YES", "score": 1.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}, {"query": "The goods-market approach to estimating the value of OSS is limited by several factors. Firstly, it requires numerous assumptions, such as the assumption that market demands for proprietary software and OSS are similar, which may not be accurate. Additionally, this approach can lead to a substantial underestimate of OSS value because it does not account for the differences in the nature of the software being compared; proprietary software is often fully functional and stand-alone, whereas OSS may consist of smaller application libraries. Furthermore, the goods-market approach is sensitive to market demand and pricing strategies, which can vary significantly. Due to these complexities and the lack of comprehensive data, the goods-market approach is inherently flawed and can result in an \"orange to apples\" comparison. In contrast, the labor-market approach, which focuses on the cost of labor required to develop the software, is emphasized as it provides a more reliable estimate by considering the actual resources invested in creating OSS.", "contexts": ["## Appendix A) Goods-Market Valuation Approach\n\nAs an alternate estimation method, instead of using the labor replacement cost, we use a goods replacement value approach. We identify several OSS packages that have similar closed-source, pecuniary alternatives and consider the costs if all commercial users of the free OSS had to replace that software with a pecuniary alternative (similar to the calculations Greenstein and Nagle (2014) and Murciano-Goroff et al. (2021) performed for web servers). We can then use this alternate value of p , combined with the q values from above to estimate a goods replacement value of OSS. This method builds on suggestions from Nordhaus (2006, p. 146) who says '\u2026the price of market and nonmarket goods and services should be imputed on the basis of the comparable market goods and services.' We do not expect the estimates from the two methods to be similar. Quite the contrary, the value of those two methods varies substantially since the latter goods-market approach assumes a fixed price to sell a good multiple times and that fixed price is usually lower than the total value estimated from recreating all packages on the labor side. The differential between these estimates is  essentially the result of a firm stepping in to reproduce the missing OSS packages and then selling them for a pecuniary price rather than all firms needing to reproduce those packages from scratch themselves.\n\nWith the goods market approach, the thought experiment is still that we live in a world where OSS does not exist, but it has to be recreated via one firm that then charges a price for a good that is currently free. To value OSS via the goods market approach, we created a basket of equivalent substitute proprietary goods that are priced on the open market as a stand-in for an OSS product.  This  methodology  is  consistent  with  that  used  in  the  prior  literature  (Greenstein  and Nagle, 2014; Murciano-Goroff et al., 2021) although both of those studies only used a single good rather than a basket since they were focused on only one type of OSS (web servers). Since there is no readily available database for proprietary equivalents of OSS, we conduct a search based on subjective  perception  of  popularity  of  OSS  and  we  then  search  for  pecuniary,  closed-source substitutes for them. The resulting basket of 20 OSS packages with proprietary substitutes is a good representation of the diversity of OSS. The software ranges from media and design software to statistical analysis programs, to database management and web server software. 21\n\n21 Table A5 shows the basket of OSS and their proprietary equivalents that we used. To create this basket, we looked for proprietary software that had an OSS equivalent that was similar in its overall function and feature set, and sought to identify pairs of software that, in aggregate, captured a broad and representative set of the types of OSS that exist.\n\nBased on our OSS equivalent substitute proprietary goods basket we then obtain prices for each proprietary software equivalent and we calculated the COCOMO labor market supply-side value for each OSS product in the basket which we use as a proxy - for lack of the code from the proprietary software - for the COCOMO labor supply side value of the proprietary software (e.g., the cost it would take to pay a programmer to write that proprietary software from scratch). We then calculate the average COCOMO labor supply-side value of the basket, \ud835\udc49 !,1#23.4 ,  and  the average price for the basket, \ud835\udc43 !,1#23.4 . 22 Since, we know the labor market supply-side value of all OSS, \ud835\udc49 ! \"#$%&amp; , we can setup the following equation and obtain the price of OSS, \ud835\udc43 ! for the goodsmarket for all OSS via a simple scaling transformation:\n\n<!-- formula-not-decoded -->\n\nThis results in the following goods-market supply-side value:\n\n<!-- formula-not-decoded -->\n\n<!-- formula-not-decoded -->\n\nWe can then obtain the equivalent demand-side goods-market values as follows:\n\n<!-- formula-not-decoded -->\n\nFrom the goods market side, we consider the equivalent price that a firm would charge if it produced all existing widely used OSS and then sold it as a product to customers.\n\nTable A6, column 3 shows that the value on the demand side ranges between $177 million and $244 million across the different buckets independent of the country of origin from which programmers are hired. Naturally, the goods-market value will be substantially smaller than the labor demand value since this imaginary firm will make a profit at a comparatively low price by producing the software once and then selling it to many customers. Further, while Greenstein and Nagle (2014) as well as Murciano-Goroff et al. (2021) focus on one particular type of software only (web servers), we attempt to expand on their approach to many goods. However, the data limitations become a stronger constraint in this context which makes it inherently more difficult\n\n22 We obtained the average price of the goods-market proprietary basket by using a 3 years lifespan of software, i.e. 1/(1-0.66), so the depreciation factor is 0.33. This is consistent with the United States Internal Revenue Service (IRS) rules for depreciating software, which states 'If you can depreciate the cost of computer software, use the straight line method over a useful life of 36 months.' https://www.irs.gov/publications/p946#en\\_US\\_2022\\_publink1000107354.\n\nto  estimate  the  value  through  this  approach  while  requiring  substantially  more  assumptions. Instead of a pure goods-market approach, this requires assistance from the labor-market approach in terms of scaling for the estimate, which ultimately leads to a substantial underestimate of the value of OSS. Further, the pricing strategy of the proprietary software counterparts is sensitive to the  market  demand.  With  the  goods-market  approach  extending  to  multiple  goods,  the  strong implicit assumption is that the market demands for our basket software and our sample OSS are similar, so they lead to commensurate prices.\n\nAn alternative and even more simplified goods-market back-of-the-envelope calculation that does not account for lines of code and relies on no scaling from the labor market approach would simply be to multiply a price of a reference good with the usage. We can take the minimum, average, and maximum prices of the basket of proprietary goods as captured in the reference price vector p = (69.99, 1610.17, 5800) and simply multiply it with usage from the combined Census and BuiltWith sample (Table 1). Based on those imputed proprietary price assumptions, the goods market demand side value would range from $0.2 - $16.5 trillion (minimum price - maximum price)  with  the  mean  price  resulting  in  a  value  estimate  of  $4.5  trillion.  However,  while  this estimate creates slightly more variance than the labor market approach, it is inherently flawed by simply assuming that the imputed prices are identical for each open source product based on the reference price. We further think this very simple back-of-the-envelope is an orange to apples comparison since the goods in our basket are fully functional, stand-alone software packages, while the packages in the Census and BuiltWith datasets are comprised of application libraries, which are generally smaller than such stand-alone packages.\n\nGiven all the complexities and assumptions one has to make due to lack of data for a goodsmarket approach, we place stronger emphasis on the labor cost approach highlighted in the main body but we include this method here for completeness.", "## 3. Methodology\n\nWe first measure the value of OSS by considering the supply and the demand side of OSS using a labor market approach. 14 The thought experiment is that we live in a world where OSS does not exist and has to be recreated at each firm that uses a given piece of OSS. Using the labor market approach, we calculate the labor replacement cost of each OSS package. To estimate the value for each package, we use COCOMO II (Boehm, 1984; Boehm et al., 2009) at the individual package level and then sum across all package values to obtain a supply-side labor market replacement value. Then, we scale the supply-side value by the number of times firms are using each package while removing multi-usage within each firm to obtain a demand-side value.\n\nSecond, we move beyond the aggregate and inspect inequality in the value creation process. In OSS, as with many creative endeavors, it is common that a small handful of individuals provide the bulk of the contributions, while many others make small contributions (sometimes referred to as the 80/20 rule, implying 80% of the work is done by 20% of the people). Research has shown these frequent contributors often attain positions of influence in OSS communities as a result of their efforts (Hanisch, et al, 2018). Therefore, to better understand the dispersion of value creation across developers, we first use the GHTorrent data and identify individual developer contributions in two ways: a) through their OSS value contributions directly and b) through the total number of repositories they contributed to. We then test how concentrated these two contribution measures are to better understand whether many or few developers contribute to the total value we measure. We explain the exact details for the labor market approach and the inequality of valuations below."], "response": "The goods-market approach to estimating the value of OSS is limited by several factors. It relies on numerous assumptions, such as the similarity in market demands for proprietary software and OSS, which may not hold true. This approach can lead to a substantial underestimate of OSS value because it does not fully account for the differences in the nature of the software being compared; proprietary software is often fully functional and stand-alone, whereas OSS may consist of smaller application libraries. Additionally, the goods-market approach is sensitive to market demand and pricing strategies, which can vary significantly. Due to these complexities and the lack of comprehensive data, the goods-market approach can result in an \"orange to apples\" comparison. In contrast, the labor-market approach, which focuses on the cost of labor required to develop the software, is emphasized as it provides a more reliable estimate by considering the actual resources invested in creating OSS.", "passing": false, "feedback": "NO", "score": 0.0, "pairwise_source": null, "invalid_result": false, "invalid_reason": null}]}